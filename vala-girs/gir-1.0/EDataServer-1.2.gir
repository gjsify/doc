<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Camel" version="1.2"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Soup" version="2.4"/>
  <include name="libxml2" version="2.0"/>
  <package name="libedataserver-1.2"/>
  <c:include name="libedataserver/libedataserver.h"/>
  <namespace name="EDataServer"
             version="1.2"
             shared-library="libcamel-1.2.so.62,libedataserver-1.2.so.25"
             c:identifier-prefixes="E"
             c:symbol-prefixes="e">
    <record name="AsyncClosure"
            c:type="EAsyncClosure"
            disguised="1"
            version="3.6">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1701">#EAsyncClosure provides a simple way to run an asynchronous function
synchronously without blocking a running #GMainLoop or using threads.

1) Create an #EAsyncClosure with e_async_closure_new().

2) Call the asynchronous function passing e_async_closure_callback() as
   the #GAsyncReadyCallback argument and the #EAsyncClosure as the data
   argument.

3) Call e_async_closure_wait() and collect the #GAsyncResult.

4) Call the corresponding asynchronous "finish" function, passing the
   #GAsyncResult returned by e_async_closure_wait().

5) If needed, repeat steps 2-4 for additional asynchronous functions
   using the same #EAsyncClosure.

6) Finally, free the #EAsyncClosure with e_async_closure_free().</doc>
      <source-position filename="e-data-server-util.h" line="146"/>
      <method name="free"
              c:identifier="e_async_closure_free"
              version="3.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1810">Frees the @closure and the resources it holds.</doc>
        <source-position filename="e-data-server-util.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="1812">an #EAsyncClosure</doc>
            <type name="AsyncClosure" c:type="EAsyncClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wait"
              c:identifier="e_async_closure_wait"
              version="3.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1770">Call this function immediately after starting an asynchronous operation.
The function waits for the asynchronous operation to complete and returns
its #GAsyncResult to be passed to the operation's "finish" function.

This function can be called repeatedly on the same #EAsyncClosure to
easily string together multiple asynchronous operations.</doc>
        <source-position filename="e-data-server-util.h" line="149"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1781">a #GAsyncResult which is owned by the closure</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </return-value>
        <parameters>
          <instance-parameter name="closure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="1772">an #EAsyncClosure</doc>
            <type name="AsyncClosure" c:type="EAsyncClosure*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="callback"
                c:identifier="e_async_closure_callback"
                version="3.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1836">Pass this function as the #GAsyncReadyCallback argument of an asynchronous
function, and the #EAsyncClosure as the data argument.

This causes e_async_closure_wait() to terminate and return @result.</doc>
        <source-position filename="e-data-server-util.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="1838">a #GObject or %NULL, it is not used by the function at all</doc>
            <type name="GObject.Object" c:type="GObject*"/>
          </parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="1839">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="closure"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="1840">an #EAsyncClosure</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="new"
                c:identifier="e_async_closure_new"
                version="3.6"
                introspectable="0">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1733">Creates a new #EAsyncClosure for use with asynchronous functions.</doc>
        <source-position filename="e-data-server-util.h" line="148"/>
        <return-value>
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1738">a new #EAsyncClosure</doc>
          <type name="AsyncClosure" c:type="EAsyncClosure*"/>
        </return-value>
      </function>
    </record>
    <function-macro name="CLIENT" c:identifier="E_CLIENT" introspectable="0">
      <source-position filename="e-client.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="CLIENT_BACKEND_PROPERTY_CACHE_DIR"
              value="cache-dir"
              c:type="CLIENT_BACKEND_PROPERTY_CACHE_DIR"
              version="3.2">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="71">The "cache-dir" property indicates the backend's local directory for
cached data.</doc>
      <source-position filename="e-client.h" line="78"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_BACKEND_PROPERTY_CAPABILITIES"
              value="capabilities"
              c:type="CLIENT_BACKEND_PROPERTY_CAPABILITIES"
              version="3.2">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="81">The "capabilities" property is a comma-separated list of capabilities
supported by the backend.  The preferred method of retrieving and working
with capabilities is e_client_get_capabilities() and
e_client_check_capability().</doc>
      <source-position filename="e-client.h" line="90"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_BACKEND_PROPERTY_ONLINE"
              value="online"
              c:type="CLIENT_BACKEND_PROPERTY_ONLINE"
              version="3.2">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="50">The "online" property is "TRUE" when the client is fully opened and
online, "FALSE" at all other times.  See also e_client_is_online().</doc>
      <source-position filename="e-client.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_BACKEND_PROPERTY_OPENED"
              value="opened"
              c:type="CLIENT_BACKEND_PROPERTY_OPENED"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="369">The "opened" property is "TRUE" when the client is fully opened,
"FALSE" at all other times.</doc>
      <doc-deprecated xml:space="preserve">Clients don't need to care if they're fully opened
                 anymore.  This property will always return %TRUE.</doc-deprecated>
      <source-position filename="e-client.h" line="379"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_BACKEND_PROPERTY_OPENING"
              value="opening"
              c:type="CLIENT_BACKEND_PROPERTY_OPENING"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="382">The "opening" property is "TRUE" when the client is in the process of
opening, "FALSE" at all other times.</doc>
      <doc-deprecated xml:space="preserve">Clients don't need to care if they're fully opened
                 anymore.  This property will always return %FALSE.</doc-deprecated>
      <source-position filename="e-client.h" line="392"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_BACKEND_PROPERTY_READONLY"
              value="readonly"
              c:type="CLIENT_BACKEND_PROPERTY_READONLY"
              version="3.2">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="60">The "online" property is "TRUE" if the backend has only read access
to its data, "FALSE" if the backend can modify its data.  See also
e_client_is_readonly().</doc>
      <source-position filename="e-client.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="CLIENT_BACKEND_PROPERTY_REVISION"
              value="revision"
              c:type="CLIENT_BACKEND_PROPERTY_REVISION"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="93">The current overall revision string, this can be used as
a quick check to see if data has changed at all since the
last time the revision was observed.</doc>
      <source-position filename="e-client.h" line="101"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="CLIENT_CLASS"
                    c:identifier="E_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="e-client.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CLIENT_GET_CLASS"
                    c:identifier="E_CLIENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-client.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Client"
           c:symbol-prefix="client"
           c:type="EClient"
           version="3.2"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="EClient"
           glib:get-type="e_client_get_type"
           glib:type-struct="ClientClass">
      <doc xml:space="preserve"
           filename="e-client.c"
           line="28">This class provides some base functionality for clients
such as #EBookClient and #ECalClient.</doc>
      <source-position filename="e-client.h" line="309"/>
      <function name="error_create"
                c:identifier="e_client_error_create"
                version="3.2">
        <source-position filename="e-client.h" line="173"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="191">a new #GError containing an #E_CLIENT_ERROR of the given
   @code. If the @custom_msg is NULL, then the error message is the one returned
   from e_client_error_to_string() for the @code, otherwise the given message is used.
   Returned pointer should be freed with g_error_free().</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="188">an #EClientError code to create</doc>
            <type name="ClientError" c:type="EClientError"/>
          </parameter>
          <parameter name="custom_msg"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="189">custom message to use for the error; can be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="error_create_fmt"
                c:identifier="e_client_error_create_fmt"
                version="3.34"
                introspectable="0">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="208">Similar as e_client_error_create(), only here, instead of custom_msg,
is used a printf() format to create a custom message for the error.</doc>
        <source-position filename="e-client.h" line="175"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="217">a newly allocated #GError, which should be
  freed with g_error_free(), when no longer needed.
  The #GError has set the custom message, or the default message for
  @code, when @format is %NULL.</doc>
          <type name="GLib.Error" c:type="GError*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="210">an #EClientError</doc>
            <type name="ClientError" c:type="EClientError"/>
          </parameter>
          <parameter name="format"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="211">message format, or %NULL to use the default message for the @code</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="212">arguments for the format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="error_quark" c:identifier="e_client_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
      <function name="error_to_string"
                c:identifier="e_client_error_to_string"
                version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="120">Get localized human readable description of the given error code.</doc>
        <source-position filename="e-client.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="126">Localized human readable description of the given error code</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="122">an #EClientError error code</doc>
            <type name="ClientError" c:type="EClientError"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_copy_object_slist"
                c:identifier="e_client_util_copy_object_slist"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2224">Copies a #GSList of #GObject&lt;!-- --&gt;s to the end of @copy_to.</doc>
        <doc-deprecated xml:space="preserve">Use e_util_copy_object_slist() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="468"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2231">New head of @copy_to.
The returned pointer can be freed with e_client_util_free_object_slist().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GObject.Object"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="copy_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2226">Where to copy; may be %NULL</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="GObject.Object"/>
            </type>
          </parameter>
          <parameter name="objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2227">#GSList of #GObject&lt;!-- --&gt;s to be copied</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="GObject.Object"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="util_copy_string_slist"
                c:identifier="e_client_util_copy_string_slist"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2203">Copies the #GSList of strings to the end of @copy_to.</doc>
        <doc-deprecated xml:space="preserve">Use e_util_copy_string_slist() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="466"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2210">New head of @copy_to.
The returned pointer can be freed with e_client_util_free_string_slist().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="copy_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2205">Where to copy; may be %NULL</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="strings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2206">#GSList of strings to be copied</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="util_free_object_slist"
                c:identifier="e_client_util_free_object_slist"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2261">Calls g_object_unref() on each member of @objects and then frees @objects
itself.</doc>
        <doc-deprecated xml:space="preserve">Use g_slist_free_full() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="471"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="objects" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2263">a #GSList of #GObject&lt;!-- --&gt;s</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="GObject.Object"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="util_free_string_slist"
                c:identifier="e_client_util_free_string_slist"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2245">Frees memory previously allocated by e_client_util_strv_to_slist().</doc>
        <doc-deprecated xml:space="preserve">Use g_slist_free_full() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="470"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="strings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2247">a #GSList of strings (gchar *)</doc>
            <type name="GLib.SList" c:type="GSList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="util_parse_comma_strings"
                c:identifier="e_client_util_parse_comma_strings"
                version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2278">Parses comma-separated list of values into #GSList.</doc>
        <source-position filename="e-client.h" line="365"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2284">Newly allocated #GSList of
newly allocated strings corresponding to values parsed from @strings.
Free the returned pointer with e_client_util_free_string_slist().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="strings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2280">string of comma-separated values</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_slist_to_strv"
                c:identifier="e_client_util_slist_to_strv"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2160">Convert a list of strings into a %NULL-terminated array of strings.</doc>
        <doc-deprecated xml:space="preserve">Use e_util_slist_to_strv() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="464"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2166">Newly allocated %NULL-terminated array of strings.
The returned pointer should be freed with g_strfreev().

Note: Paired function for this is e_client_util_strv_to_slist().</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <parameter name="strings" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2162">a #GSList of strings (const gchar *)</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </function>
      <function name="util_strv_to_slist"
                c:identifier="e_client_util_strv_to_slist"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2181">Convert a %NULL-terminated array of strings to a list of strings.</doc>
        <doc-deprecated xml:space="preserve">Use e_util_strv_to_slist() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="465"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2187">Newly allocated #GSList of
newly allocated strings. The returned pointer should be freed with
e_client_util_free_string_slist().

Note: Paired function for this is e_client_util_slist_to_strv().</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="strv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2183">a %NULL-terminated array of strings (const gchar *)</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_unwrap_dbus_error"
                c:identifier="e_client_util_unwrap_dbus_error"
                version="3.2"
                deprecated="1"
                deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2349">The function takes a @dbus_error and tries to find a match in @known_errors
for it, if it is a G_IO_ERROR, G_IO_ERROR_DBUS_ERROR. If it is anything else
then the @dbus_error is moved to @client_error.

The @fail_when_none_matched influences behaviour. If it's %TRUE, and none of
@known_errors matches, or this is not a G_IO_ERROR_DBUS_ERROR, then %FALSE
is returned and the @client_error is left without change. Otherwise, the
@fail_when_none_matched is %FALSE, the error is always processed and will
result in E_CLIENT_ERROR, E_CLIENT_ERROR_OTHER_ERROR if none of @known_error
matches.</doc>
        <doc-deprecated xml:space="preserve">This function is no longer used.</doc-deprecated>
        <source-position filename="e-client.h" line="492"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2369">Whether was @dbus_error processed into @client_error.

Note: The @dbus_error is automatically freed if returned %TRUE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="dbus_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2351">DBus #GError to unwrap</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
          <parameter name="client_error"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2352">Resulting #GError; can be %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="known_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2353">List of known errors against which try to match</doc>
            <type name="ClientErrorsList" c:type="const EClientErrorsList*"/>
          </parameter>
          <parameter name="known_errors_count" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2354">How many items are stored in @known_errors</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="known_errors_domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2355">Error domain for @known_errors</doc>
            <type name="GLib.Quark" c:type="GQuark"/>
          </parameter>
          <parameter name="fail_when_none_matched" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2356">Whether to fail when none of @known_errors matches</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="backend_died">
        <source-position filename="e-client.h" line="304"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="backend_error">
        <source-position filename="e-client.h" line="302"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="error_msg" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="backend_property_changed">
        <source-position filename="e-client.h" line="305"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backend_property"
                      invoker="get_backend_property"
                      version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1374">Queries @client's backend for a property of name @prop_name.
The call is finished by e_client_get_backend_property_finish()
from the @callback.</doc>
        <source-position filename="e-client.h" line="226"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1376">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1377">property name, whose value to retrieve; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1378">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1379">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1380">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backend_property_finish"
                      invoker="get_backend_property_finish"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1409">Finishes previous call of e_client_get_backend_property().</doc>
        <source-position filename="e-client.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1418">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1411">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1412">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="prop_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1413">Retrieved backend property value; cannot be %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_backend_property_sync"
                      invoker="get_backend_property_sync"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1441">Queries @client's backend for a property of name @prop_name.</doc>
        <source-position filename="e-client.h" line="236"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1451">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1443">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1444">property name, whose value to retrieve; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1445">Retrieved backend property value; cannot be %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1446">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_dbus_proxy" introspectable="0">
        <source-position filename="e-client.h" line="202"/>
        <return-value>
          <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open"
                      invoker="open"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1588">Opens the @client, making it ready for queries and other operations.
The call is finished by e_client_open_finish() from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Use e_book_client_connect() and
                 e_book_client_connect_finish() or
                 e_cal_client_connect() and
                 e_cal_client_connect_finish() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="261"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1590">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="only_if_exists" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1591">this parameter is not used anymore</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1592">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1593">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1594">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_finish"
                      invoker="open_finish"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1625">Finishes previous call of e_client_open().</doc>
        <doc-deprecated xml:space="preserve">Use e_book_client_connect() and
                 e_book_client_connect_finish() or
                 e_cal_client_connect() and
                 e_cal_client_connect_finish() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="266"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1633">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1627">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1628">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="open_sync"
                      invoker="open_sync"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1658">Opens the @client, making it ready for queries and other operations.</doc>
        <doc-deprecated xml:space="preserve">Use e_book_client_connect_sync() or
                 e_cal_client_connect_sync() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="269"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1667">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1660">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="only_if_exists" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1661">this parameter is not used anymore</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1662">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="opened">
        <source-position filename="e-client.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="refresh" invoker="refresh" version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1781">Initiates refresh on the @client. Finishing the method doesn't mean
that the refresh is done, backend only notifies whether it started
refreshing or not. Use e_client_check_refresh_supported() to check
whether the backend supports this method.
The call is finished by e_client_refresh_finish() from the @callback.</doc>
        <source-position filename="e-client.h" line="285"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1783">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1784">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1785">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1786">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="refresh_finish"
                      invoker="refresh_finish"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1814">Finishes previous call of e_client_refresh().</doc>
        <source-position filename="e-client.h" line="289"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1822">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1816">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1817">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="refresh_sync"
                      invoker="refresh_sync"
                      version="3.2"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1842">Initiates refresh on the @client. Finishing the method doesn't mean
that the refresh is done, backend only notifies whether it started
refreshing or not. Use e_client_check_refresh_supported() to check
whether the backend supports this method.</doc>
        <source-position filename="e-client.h" line="292"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1853">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1844">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1845">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove"
                      invoker="remove"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.6">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1689">Removes the backing data for this #EClient. For example, with the file
backend this deletes the database file. You cannot get it back!
The call is finished by e_client_remove_finish() from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Use e_source_remove() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="274"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1691">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1692">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1693">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1694">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_finish"
                      invoker="remove_finish"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1722">Finishes previous call of e_client_remove().</doc>
        <doc-deprecated xml:space="preserve">Use e_source_remove_finish() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="278"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1730">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1724">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1725">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_sync"
                      invoker="remove_sync"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1752">Removes the backing data for this #EClient. For example, with the file
backend this deletes the database file. You cannot get it back!</doc>
        <doc-deprecated xml:space="preserve">Use e_source_remove_sync() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="281"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1761">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1754">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1755">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="retrieve_capabilities"
                      invoker="retrieve_capabilities"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1252">Initiates retrieval of capabilities on the @client. This is usually
required only once, after the @client is opened. The returned value
is cached and any subsequent call of e_client_get_capabilities() and
e_client_check_capability() is using the cached value.
The call is finished by e_client_retrieve_capabilities_finish()
from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Use e_client_get_capabilities() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="210"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1254">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1255">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1256">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1257">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="retrieve_capabilities_finish"
                      invoker="retrieve_capabilities_finish"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1288">Finishes previous call of e_client_retrieve_capabilities().
Returned value of @capabilities should be freed with g_free(),
when no longer needed.</doc>
        <doc-deprecated xml:space="preserve">Use e_client_get_capabilities() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="215"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1299">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1290">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1291">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1292">Comma-separated list of capabilities of the @client</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="retrieve_capabilities_sync"
                      invoker="retrieve_capabilities_sync"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1330">Initiates retrieval of capabilities on the @client. This is usually
required only once, after the @client is opened. The returned value
is cached and any subsequent call of e_client_get_capabilities() and
e_client_check_capability() is using the cached value. Returned value
of @capabilities should be freed with g_free(), when no longer needed.</doc>
        <doc-deprecated xml:space="preserve">Use e_client_get_capabilities() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="220"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1343">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1332">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1333">Comma-separated list of capabilities of the @client</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1334">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="retrieve_properties_sync"
                      invoker="retrieve_properties_sync"
                      version="3.16"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2049">Retrieves @client properties to match server-side values, without waiting
for the D-Bus property change notifications delivery.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-client.h" line="295"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2060">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2051">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2052">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_backend_property"
                      invoker="set_backend_property"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1476">Sets @client's backend property of name @prop_name
to value @prop_value. The call is finished
by e_client_set_backend_property_finish() from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Clients cannot set backend properties.  Any attempt
                 will fail with an %E_CLIENT_ERROR_NOT_SUPPORTED error.</doc-deprecated>
        <source-position filename="e-client.h" line="244"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1478">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1479">property name, whose value to change; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1480">property value, to set; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1481">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1482">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1483">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_backend_property_finish"
                      invoker="set_backend_property_finish"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1518">Finishes previous call of e_client_set_backend_property().</doc>
        <doc-deprecated xml:space="preserve">Clients cannot set backend properties.  Any attempt
                 will fail with an %E_CLIENT_ERROR_NOT_SUPPORTED error.</doc-deprecated>
        <source-position filename="e-client.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1526">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1520">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1521">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="set_backend_property_sync"
                      invoker="set_backend_property_sync"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1549">Sets @client's backend property of name @prop_name
to value @prop_value.</doc>
        <doc-deprecated xml:space="preserve">Clients cannot set backend properties.  Any attempt
                 will fail with an %E_CLIENT_ERROR_NOT_SUPPORTED error.</doc-deprecated>
        <source-position filename="e-client.h" line="254"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1560">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1551">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1552">property name, whose value to change; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1553">property value, to set; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1554">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unwrap_dbus_error"
                      invoker="unwrap_dbus_error"
                      version="3.2"
                      deprecated="1"
                      deprecated-version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2315">Unwraps D-Bus error to local error. @dbus_error is automatically freed.
@dbus_erorr and @out_error can point to the same variable.</doc>
        <doc-deprecated xml:space="preserve">Use g_dbus_error_strip_remote_error() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2317">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="dbus_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2318">a #GError returned bu D-Bus</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="cancel_all"
              c:identifier="e_client_cancel_all"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1236">Cancels all pending operations started on @client.</doc>
        <doc-deprecated xml:space="preserve">The function no longer does anything.</doc-deprecated>
        <source-position filename="e-client.h" line="396"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1238">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="check_capability"
              c:identifier="e_client_check_capability"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1058">Check if backend supports particular capability.
To get all capabilities use e_client_get_capabilities().</doc>
        <source-position filename="e-client.h" line="316"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1066">#GSList of const strings of capabilities</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1060">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="capability" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1061">a capability</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_refresh_supported"
              c:identifier="e_client_check_refresh_supported"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1097">Checks whether a client supports explicit refreshing
(see e_client_refresh()).</doc>
        <source-position filename="e-client.h" line="318"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1104">TRUE if the client supports refreshing, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1099">A client.</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_bus_name"
              c:identifier="e_client_dup_bus_name"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2444">Returns a D-Bus bus name that will be used to connect the
client to the backend subprocess.</doc>
        <source-position filename="e-client.h" line="472"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2451">a newly-allocated string representing a D-Bus bus
         name that will be used to connect the client to
         the backend subprocess. The string should be
         freed by the caller using g_free().</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2446">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backend_property"
              c:identifier="e_client_get_backend_property"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1374">Queries @client's backend for a property of name @prop_name.
The call is finished by e_client_get_backend_property_finish()
from the @callback.</doc>
        <source-position filename="e-client.h" line="323"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1376">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1377">property name, whose value to retrieve; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1378">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1379">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1380">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_backend_property_finish"
              c:identifier="e_client_get_backend_property_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1409">Finishes previous call of e_client_get_backend_property().</doc>
        <source-position filename="e-client.h" line="328"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1418">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1411">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1412">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="prop_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1413">Retrieved backend property value; cannot be %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_backend_property_sync"
              c:identifier="e_client_get_backend_property_sync"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1441">Queries @client's backend for a property of name @prop_name.</doc>
        <source-position filename="e-client.h" line="333"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1451">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1443">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1444">property name, whose value to retrieve; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1445">Retrieved backend property value; cannot be %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1446">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="e_client_get_capabilities"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1013">Get list of strings with capabilities advertised by a backend.
This list, together with inner strings, is owned by the @client.
To check for individual capabilities use e_client_check_capability().</doc>
        <source-position filename="e-client.h" line="314"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1021">#GSList of const strings
         of capabilities</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1015">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="e_client_get_source"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="977">Get the #ESource that this client has assigned.</doc>
        <source-position filename="e-client.h" line="313"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="983">The source.</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="979">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_online" c:identifier="e_client_is_online" version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1171">Check if this @client is connected.</doc>
        <source-position filename="e-client.h" line="321"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1177">%TRUE if this @client is connected, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1173">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_opened"
              c:identifier="e_client_is_opened"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1211">Check if this @client is fully opened. This includes
everything from e_client_open() call up to the authentication,
if required by a backend. Client cannot do any other operation
during the opening phase except of authenticate or cancel it.
Every other operation results in an %E_CLIENT_ERROR_BUSY error.</doc>
        <doc-deprecated xml:space="preserve">Clients don't need to care if they're fully opened
                 anymore.  This function always returns %TRUE.</doc-deprecated>
        <source-position filename="e-client.h" line="395"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1221">always %TRUE</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1213">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_readonly"
              c:identifier="e_client_is_readonly"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1134">Check if this @client is read-only.</doc>
        <source-position filename="e-client.h" line="320"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1140">%TRUE if this @client is read-only, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1136">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open"
              c:identifier="e_client_open"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1588">Opens the @client, making it ready for queries and other operations.
The call is finished by e_client_open_finish() from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Use e_book_client_connect() and
                 e_book_client_connect_finish() or
                 e_cal_client_connect() and
                 e_cal_client_connect_finish() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="430"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1590">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="only_if_exists" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1591">this parameter is not used anymore</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1592">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1593">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1594">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_finish"
              c:identifier="e_client_open_finish"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1625">Finishes previous call of e_client_open().</doc>
        <doc-deprecated xml:space="preserve">Use e_book_client_connect() and
                 e_book_client_connect_finish() or
                 e_cal_client_connect() and
                 e_cal_client_connect_finish() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="435"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1633">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1627">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1628">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_sync"
              c:identifier="e_client_open_sync"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1658">Opens the @client, making it ready for queries and other operations.</doc>
        <doc-deprecated xml:space="preserve">Use e_book_client_connect_sync() or
                 e_cal_client_connect_sync() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="438"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1667">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1660">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="only_if_exists" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1661">this parameter is not used anymore</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1662">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_main_context"
              c:identifier="e_client_ref_main_context"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1036">Returns the #GMainContext on which event sources for @client are to
be attached.

The returned #GMainContext is referenced for thread-safety and must be
unreferenced with g_main_context_unref() when finished with it.</doc>
        <source-position filename="e-client.h" line="315"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1046">a #GMainContext</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1038">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh" c:identifier="e_client_refresh" version="3.2">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1781">Initiates refresh on the @client. Finishing the method doesn't mean
that the refresh is done, backend only notifies whether it started
refreshing or not. Use e_client_check_refresh_supported() to check
whether the backend supports this method.
The call is finished by e_client_refresh_finish() from the @callback.</doc>
        <source-position filename="e-client.h" line="340"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1783">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1784">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1785">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1786">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="e_client_refresh_finish"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1814">Finishes previous call of e_client_refresh().</doc>
        <source-position filename="e-client.h" line="344"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1822">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1816">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1817">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_sync"
              c:identifier="e_client_refresh_sync"
              version="3.2"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1842">Initiates refresh on the @client. Finishing the method doesn't mean
that the refresh is done, backend only notifies whether it started
refreshing or not. Use e_client_check_refresh_supported() to check
whether the backend supports this method.</doc>
        <source-position filename="e-client.h" line="347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1853">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1844">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1845">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="e_client_remove"
              version="3.2"
              deprecated="1"
              deprecated-version="3.6">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1689">Removes the backing data for this #EClient. For example, with the file
backend this deletes the database file. You cannot get it back!
The call is finished by e_client_remove_finish() from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Use e_source_remove() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="442"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1691">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1692">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1693">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1694">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="e_client_remove_finish"
              version="3.2"
              deprecated="1"
              deprecated-version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1722">Finishes previous call of e_client_remove().</doc>
        <doc-deprecated xml:space="preserve">Use e_source_remove_finish() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="446"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1730">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1724">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1725">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_sync"
              c:identifier="e_client_remove_sync"
              version="3.2"
              deprecated="1"
              deprecated-version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1752">Removes the backing data for this #EClient. For example, with the file
backend this deletes the database file. You cannot get it back!</doc>
        <doc-deprecated xml:space="preserve">Use e_source_remove_sync() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="449"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1761">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1754">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1755">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_capabilities"
              c:identifier="e_client_retrieve_capabilities"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1252">Initiates retrieval of capabilities on the @client. This is usually
required only once, after the @client is opened. The returned value
is cached and any subsequent call of e_client_get_capabilities() and
e_client_check_capability() is using the cached value.
The call is finished by e_client_retrieve_capabilities_finish()
from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Use e_client_get_capabilities() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="400"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1254">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1255">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1256">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1257">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_capabilities_finish"
              c:identifier="e_client_retrieve_capabilities_finish"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1288">Finishes previous call of e_client_retrieve_capabilities().
Returned value of @capabilities should be freed with g_free(),
when no longer needed.</doc>
        <doc-deprecated xml:space="preserve">Use e_client_get_capabilities() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="404"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1299">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1290">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1291">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1292">Comma-separated list of capabilities of the @client</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_capabilities_sync"
              c:identifier="e_client_retrieve_capabilities_sync"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1330">Initiates retrieval of capabilities on the @client. This is usually
required only once, after the @client is opened. The returned value
is cached and any subsequent call of e_client_get_capabilities() and
e_client_check_capability() is using the cached value. Returned value
of @capabilities should be freed with g_free(), when no longer needed.</doc>
        <doc-deprecated xml:space="preserve">Use e_client_get_capabilities() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="409"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1343">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1332">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1333">Comma-separated list of capabilities of the @client</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1334">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_properties"
              c:identifier="e_client_retrieve_properties"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2098">Asynchronously retrieves @client properties to match server-side values,
without waiting for the D-Bus property change notifications delivery.

When the operation is finished, @callback will be called. You can then
call e_client_retrieve_properties_finish() to get the result of the operation.</doc>
        <source-position filename="e-client.h" line="456"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2100">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2101">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2102">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2103">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_properties_finish"
              c:identifier="e_client_retrieve_properties_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2131">Finishes the operation started with e_client_retrieve_properties().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-client.h" line="460"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2141">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2133">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2134">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="retrieve_properties_sync"
              c:identifier="e_client_retrieve_properties_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2049">Retrieves @client properties to match server-side values, without waiting
for the D-Bus property change notifications delivery.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-client.h" line="452"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="2060">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2051">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2052">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backend_property"
              c:identifier="e_client_set_backend_property"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1476">Sets @client's backend property of name @prop_name
to value @prop_value. The call is finished
by e_client_set_backend_property_finish() from the @callback.</doc>
        <doc-deprecated xml:space="preserve">Clients cannot set backend properties.  Any attempt
                 will fail with an %E_CLIENT_ERROR_NOT_SUPPORTED error.</doc-deprecated>
        <source-position filename="e-client.h" line="414"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1478">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1479">property name, whose value to change; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1480">property value, to set; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1481">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1482">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1483">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backend_property_finish"
              c:identifier="e_client_set_backend_property_finish"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1518">Finishes previous call of e_client_set_backend_property().</doc>
        <doc-deprecated xml:space="preserve">Clients cannot set backend properties.  Any attempt
                 will fail with an %E_CLIENT_ERROR_NOT_SUPPORTED error.</doc-deprecated>
        <source-position filename="e-client.h" line="420"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1526">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1520">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1521">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_backend_property_sync"
              c:identifier="e_client_set_backend_property_sync"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1549">Sets @client's backend property of name @prop_name
to value @prop_value.</doc>
        <doc-deprecated xml:space="preserve">Clients cannot set backend properties.  Any attempt
                 will fail with an %E_CLIENT_ERROR_NOT_SUPPORTED error.</doc-deprecated>
        <source-position filename="e-client.h" line="424"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1560">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1551">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="prop_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1552">property name, whose value to change; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="prop_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1553">property value, to set; cannot be %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1554">a #GCancellable; can be %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_bus_name"
              c:identifier="e_client_set_bus_name"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2466">Sets a D-Bus bus name that will be used to connect the client
to the backend subprocess.</doc>
        <source-position filename="e-client.h" line="473"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2468">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="bus_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2469">a string representing a D-Bus bus name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unwrap_dbus_error"
              c:identifier="e_client_unwrap_dbus_error"
              version="3.2"
              deprecated="1"
              deprecated-version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="2315">Unwraps D-Bus error to local error. @dbus_error is automatically freed.
@dbus_erorr and @out_error can point to the same variable.</doc>
        <doc-deprecated xml:space="preserve">Use g_dbus_error_strip_remote_error() instead.</doc-deprecated>
        <source-position filename="e-client.h" line="397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2317">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="dbus_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2318">a #GError returned bu D-Bus</doc>
            <type name="GLib.Error" c:type="GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_connected"
              c:identifier="e_client_wait_for_connected"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1891">Asynchronously waits until the @client is connected (according
to @ESource::connection-status property), but not longer than @timeout_seconds.

The call is finished by e_client_wait_for_connected_finish() from
the @callback.</doc>
        <source-position filename="e-client.h" line="351"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1893">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="timeout_seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1894">a timeout for the wait, in seconds</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1895">a #GCancellable; or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1896">callback to call when a result is ready</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1897">user data for the @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_connected_finish"
              c:identifier="e_client_wait_for_connected_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1927">Finishes previous call of e_client_wait_for_connected().</doc>
        <source-position filename="e-client.h" line="356"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1935">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1929">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1930">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait_for_connected_sync"
              c:identifier="e_client_wait_for_connected_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="1974">Synchronously waits until the @client is connected (according
to @ESource::connection-status property), but not longer than @timeout_seconds.

Note: This also calls e_client_retrieve_properties_sync() on success, to have
  up-to-date property values on the client side, without a delay due
  to property change notifcations delivery through D-Bus.</doc>
        <source-position filename="e-client.h" line="360"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-client.c"
               line="1988">%TRUE if successful, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="client" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1976">an #EClient</doc>
            <type name="Client" c:type="EClient*"/>
          </instance-parameter>
          <parameter name="timeout_seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1977">a timeout for the wait, in seconds</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1978">a #GCancellable; or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="capabilities" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="819">The capabilities of this client</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="main-context" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="835">The main loop context in which notifications for
this client will be delivered.</doc>
        <type name="GLib.MainContext"/>
      </property>
      <property name="online" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="853">Whether this client's backing data is online.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="opened"
                deprecated="1"
                deprecated-version="3.8"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="870">Whether this client is open and ready to use.</doc>
        <doc-deprecated xml:space="preserve">This property is no longer relevant and
will always be %TRUE after successfully creating any concrete
type of #EClient.</doc-deprecated>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="readonly" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="890">Whether this client's backing data is readonly.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-client.c"
             line="906">The #ESource for which this client was created.</doc>
        <type name="Source"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ClientPrivate" c:type="EClientPrivate*"/>
      </field>
      <glib:signal name="backend-died" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="backend-error" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="backend-property-changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="p0" transfer-ownership="none">
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="opened" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ClientClass"
            c:type="EClientClass"
            glib:is-gtype-struct-for="Client">
      <source-position filename="e-client.h" line="309"/>
      <field name="parent" readable="0" private="1">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_dbus_proxy" introspectable="0">
        <callback name="get_dbus_proxy" introspectable="0">
          <source-position filename="e-client.h" line="202"/>
          <return-value>
            <type name="Gio.DBusProxy" c:type="GDBusProxy*"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="EClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unwrap_dbus_error">
        <callback name="unwrap_dbus_error" throws="1">
          <source-position filename="e-client.h" line="205"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="2317">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="dbus_error" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="2318">a #GError returned bu D-Bus</doc>
              <type name="GLib.Error" c:type="GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="retrieve_capabilities">
        <callback name="retrieve_capabilities">
          <source-position filename="e-client.h" line="210"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1254">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1255">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1256">callback to call when a result is ready</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1257">user data for the @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="retrieve_capabilities_finish">
        <callback name="retrieve_capabilities_finish" throws="1">
          <source-position filename="e-client.h" line="215"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1299">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1290">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1291">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="capabilities"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1292">Comma-separated list of capabilities of the @client</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="retrieve_capabilities_sync">
        <callback name="retrieve_capabilities_sync" throws="1">
          <source-position filename="e-client.h" line="220"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1343">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1332">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="capabilities"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1333">Comma-separated list of capabilities of the @client</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1334">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backend_property">
        <callback name="get_backend_property">
          <source-position filename="e-client.h" line="226"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1376">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1377">property name, whose value to retrieve; cannot be %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1378">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1379">callback to call when a result is ready</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1380">user data for the @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backend_property_finish">
        <callback name="get_backend_property_finish" throws="1">
          <source-position filename="e-client.h" line="231"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1418">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1411">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1412">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="prop_value"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1413">Retrieved backend property value; cannot be %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_backend_property_sync">
        <callback name="get_backend_property_sync" throws="1">
          <source-position filename="e-client.h" line="236"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1451">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1443">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1444">property name, whose value to retrieve; cannot be %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="prop_value"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1445">Retrieved backend property value; cannot be %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1446">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_backend_property">
        <callback name="set_backend_property">
          <source-position filename="e-client.h" line="244"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1478">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1479">property name, whose value to change; cannot be %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="prop_value" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1480">property value, to set; cannot be %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1481">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="5">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1482">callback to call when a result is ready</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="5">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1483">user data for the @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_backend_property_finish">
        <callback name="set_backend_property_finish" throws="1">
          <source-position filename="e-client.h" line="250"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1526">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1520">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1521">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="set_backend_property_sync">
        <callback name="set_backend_property_sync" throws="1">
          <source-position filename="e-client.h" line="254"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1560">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1551">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1552">property name, whose value to change; cannot be %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="prop_value" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1553">property value, to set; cannot be %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1554">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open">
        <callback name="open">
          <source-position filename="e-client.h" line="261"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1590">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="only_if_exists" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1591">this parameter is not used anymore</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1592">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1593">callback to call when a result is ready</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1594">user data for the @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open_finish">
        <callback name="open_finish" throws="1">
          <source-position filename="e-client.h" line="266"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1633">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1627">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1628">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="open_sync">
        <callback name="open_sync" throws="1">
          <source-position filename="e-client.h" line="269"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1667">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1660">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="only_if_exists" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1661">this parameter is not used anymore</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1662">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <source-position filename="e-client.h" line="274"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1691">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1692">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1693">callback to call when a result is ready</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1694">user data for the @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_finish">
        <callback name="remove_finish" throws="1">
          <source-position filename="e-client.h" line="278"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1730">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1724">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1725">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_sync">
        <callback name="remove_sync" throws="1">
          <source-position filename="e-client.h" line="281"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1761">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1754">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1755">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh">
        <callback name="refresh">
          <source-position filename="e-client.h" line="285"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1783">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1784">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1785">callback to call when a result is ready</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1786">user data for the @callback</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh_finish">
        <callback name="refresh_finish" throws="1">
          <source-position filename="e-client.h" line="289"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1822">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1816">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1817">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="refresh_sync">
        <callback name="refresh_sync" throws="1">
          <source-position filename="e-client.h" line="292"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="1853">%TRUE if successful, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1844">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="1845">a #GCancellable; can be %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="retrieve_properties_sync">
        <callback name="retrieve_properties_sync" throws="1">
          <source-position filename="e-client.h" line="295"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-client.c"
                 line="2060">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="2051">an #EClient</doc>
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-client.c"
                   line="2052">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="opened">
        <callback name="opened">
          <source-position filename="e-client.h" line="300"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="backend_error">
        <callback name="backend_error">
          <source-position filename="e-client.h" line="302"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="error_msg" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="backend_died">
        <callback name="backend_died">
          <source-position filename="e-client.h" line="304"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="EClient*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="backend_property_changed">
        <callback name="backend_property_changed">
          <source-position filename="e-client.h" line="305"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="client" transfer-ownership="none">
              <type name="Client" c:type="EClient*"/>
            </parameter>
            <parameter name="prop_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="prop_value" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <enumeration name="ClientError" version="3.2" c:type="EClientError">
      <doc xml:space="preserve"
           filename="e-client.h"
           line="117">Error codes for #EClient operations.</doc>
      <source-position filename="e-client.h" line="169"/>
      <member name="invalid_arg"
              value="0"
              c:identifier="E_CLIENT_ERROR_INVALID_ARG">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="119">Invalid argument was used</doc>
      </member>
      <member name="busy" value="1" c:identifier="E_CLIENT_ERROR_BUSY">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="120">The client is busy</doc>
      </member>
      <member name="source_not_loaded"
              value="2"
              c:identifier="E_CLIENT_ERROR_SOURCE_NOT_LOADED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="121">The source is not loaded</doc>
      </member>
      <member name="source_already_loaded"
              value="3"
              c:identifier="E_CLIENT_ERROR_SOURCE_ALREADY_LOADED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="122">The source is already loaded</doc>
      </member>
      <member name="authentication_failed"
              value="4"
              c:identifier="E_CLIENT_ERROR_AUTHENTICATION_FAILED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="123">Authentication failed</doc>
      </member>
      <member name="authentication_required"
              value="5"
              c:identifier="E_CLIENT_ERROR_AUTHENTICATION_REQUIRED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="124">Authentication required</doc>
      </member>
      <member name="repository_offline"
              value="6"
              c:identifier="E_CLIENT_ERROR_REPOSITORY_OFFLINE">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="125">The repository (client) is offline</doc>
      </member>
      <member name="offline_unavailable"
              value="7"
              c:identifier="E_CLIENT_ERROR_OFFLINE_UNAVAILABLE">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="126">The operation is unavailable in offline mode</doc>
      </member>
      <member name="permission_denied"
              value="8"
              c:identifier="E_CLIENT_ERROR_PERMISSION_DENIED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="127">Permission denied for the operation</doc>
      </member>
      <member name="cancelled"
              value="9"
              c:identifier="E_CLIENT_ERROR_CANCELLED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="128">The operation was cancelled</doc>
      </member>
      <member name="could_not_cancel"
              value="10"
              c:identifier="E_CLIENT_ERROR_COULD_NOT_CANCEL">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="129">The operation cannot be cancelled</doc>
      </member>
      <member name="not_supported"
              value="11"
              c:identifier="E_CLIENT_ERROR_NOT_SUPPORTED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="130">The operation is not supported</doc>
      </member>
      <member name="tls_not_available"
              value="12"
              c:identifier="E_CLIENT_ERROR_TLS_NOT_AVAILABLE">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="131">TLS is not available</doc>
      </member>
      <member name="unsupported_authentication_method"
              value="13"
              c:identifier="E_CLIENT_ERROR_UNSUPPORTED_AUTHENTICATION_METHOD">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="132">Requested authentication method is not supported</doc>
      </member>
      <member name="search_size_limit_exceeded"
              value="14"
              c:identifier="E_CLIENT_ERROR_SEARCH_SIZE_LIMIT_EXCEEDED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="133">Search size limit exceeded</doc>
      </member>
      <member name="search_time_limit_exceeded"
              value="15"
              c:identifier="E_CLIENT_ERROR_SEARCH_TIME_LIMIT_EXCEEDED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="134">Search time limit exceeded</doc>
      </member>
      <member name="invalid_query"
              value="16"
              c:identifier="E_CLIENT_ERROR_INVALID_QUERY">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="135">The query was invalid</doc>
      </member>
      <member name="query_refused"
              value="17"
              c:identifier="E_CLIENT_ERROR_QUERY_REFUSED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="136">The query was refused by the server side</doc>
      </member>
      <member name="dbus_error"
              value="18"
              c:identifier="E_CLIENT_ERROR_DBUS_ERROR">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="137">A D-Bus error occurred</doc>
      </member>
      <member name="other_error"
              value="19"
              c:identifier="E_CLIENT_ERROR_OTHER_ERROR">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="138">Other error</doc>
      </member>
      <member name="not_opened"
              value="20"
              c:identifier="E_CLIENT_ERROR_NOT_OPENED">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="139">The client is not opened</doc>
      </member>
      <member name="out_of_sync"
              value="21"
              c:identifier="E_CLIENT_ERROR_OUT_OF_SYNC">
        <doc xml:space="preserve"
             filename="e-client.h"
             line="140">The client is out of sync with the server</doc>
      </member>
    </enumeration>
    <record name="ClientErrorsList"
            c:type="EClientErrorsList"
            version="3.2"
            deprecated="1"
            deprecated-version="3.8">
      <doc-deprecated xml:space="preserve">This structure is no longer used.</doc-deprecated>
      <source-position filename="e-client.h" line="490"/>
      <field name="name" readable="0" private="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="err_code" readable="0" private="1">
        <type name="gint" c:type="gint"/>
      </field>
    </record>
    <record name="ClientPrivate" c:type="EClientPrivate" disguised="1">
      <source-position filename="e-client.h" line="189"/>
    </record>
    <record name="Collator"
            c:type="ECollator"
            version="3.12"
            glib:type-name="ECollator"
            glib:get-type="e_collator_get_type"
            c:symbol-prefix="collator">
      <doc xml:space="preserve"
           filename="e-collator.c"
           line="20">The #ECollator is a wrapper object around ICU collation services and
provides features to sort words in locale specific ways. The collator
also provides some API for determining features of the active alphabet
in the user's locale, and which words should be sorted under which
letter in the user's alphabet.</doc>
      <source-position filename="e-collator.h" line="66"/>
      <constructor name="new"
                   c:identifier="e_collator_new"
                   version="3.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="292">Creates a new #ECollator for the given @locale,
the returned collator should be freed with e_collator_unref().</doc>
        <source-position filename="e-collator.h" line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="300">A newly created #ECollator.</doc>
          <type name="Collator" c:type="ECollator*"/>
        </return-value>
        <parameters>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="294">The locale under which to sort</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_interpret_country"
                   c:identifier="e_collator_new_interpret_country"
                   version="3.12"
                   throws="1">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="311">Creates a new #ECollator for the given @locale,
the returned collator should be freed with e_collator_unref().

In addition, this also reliably interprets the country
code from the @locale string and stores it to @country_code.</doc>
        <source-position filename="e-collator.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="323">A newly created #ECollator.</doc>
          <type name="Collator" c:type="ECollator*"/>
        </return-value>
        <parameters>
          <parameter name="locale" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="313">The locale under which to sort</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="country_code"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="314">A location to store the interpreted country code from @locale</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="collate"
              c:identifier="e_collator_collate"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="591">Compares @str_a with @str_b, the order of strings is determined by the parameters of @collator.

The @result will be set to integer less than, equal to, or greater than zero if @str_a is found,
respectively, to be less than, to match, or be greater than @str_b.

Either @str_a or @str_b can be %NULL, %NULL strings are considered to sort below other strings.

This function will first ensure that both strings are valid UTF-8.</doc>
        <source-position filename="e-collator.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="608">%TRUE on success, otherwise if %FALSE is returned then @error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="593">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
          <parameter name="str_a"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="594">A string to compare</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="str_b"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="595">The string to compare with @str_a</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="result"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="596">A location to store the comparison result</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key"
              c:identifier="e_collator_generate_key"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="454">Generates a collation key for @str, the result of comparing
two collation keys with strcmp() will be the same result
of calling e_collator_collate() on the same original strings.

This function will first ensure that @str is valid UTF-8 encoded.</doc>
        <source-position filename="e-collator.h" line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="466">A collation key for @str, or %NULL on failure with @error set.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="456">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="457">The string to generate a collation key for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="generate_key_for_index"
              c:identifier="e_collator_generate_key_for_index"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="559">Generates a sort key for the given alphabetic @index.

The generated sort key is guaranteed to sort below
any sort keys for words beginning with any variant of
the given letter.

For instance, a sort key generated for the index 5 of
a latin alphabet, where the fifth index is 'E' will sort
below any sort keys generated for words starting with
the characters 'e', 'E', 'é', 'É', 'è' or 'È'. It will also
sort above any sort keys generated for words starting with
the characters 'd' or 'D'.</doc>
        <source-position filename="e-collator.h" line="81"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="577">A sort key for the given index</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="561">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="562">An index into the alphabetic labels</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index"
              c:identifier="e_collator_get_index"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="683">Checks which index, as determined by e_collator_get_index_labels(),
that @str should sort under.</doc>
        <source-position filename="e-collator.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="691">The alphabetic index under which @str would sort</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="685">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="686">A string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_index_labels"
              c:identifier="e_collator_get_index_labels"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="647">Fetches the displayable labels and index positions for the active alphabet.</doc>
        <source-position filename="e-collator.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="657">
  The array of displayable labels for each index in the active alphabet(s).</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="649">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
          <parameter name="n_labels"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="650">The number of labels/indexes available for @collator</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="underflow"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="651">The underflow index, for any words which sort below the active alphabet(s)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="inflow"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="652">The inflow index, for any words which sort between the active alphabets (if there is more than one)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="overflow"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="653">The overflow index, for any words which sort above the active alphabet(s)</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="e_collator_ref" version="3.12">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="402">Increases the reference count of @collator.</doc>
        <source-position filename="e-collator.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-collator.c"
               line="408">@collator</doc>
          <type name="Collator" c:type="ECollator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="404">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="e_collator_unref" version="3.12">
        <doc xml:space="preserve"
             filename="e-collator.c"
             line="422">Decreases the reference count of @collator.
If the reference count reaches 0 then the collator is freed</doc>
        <source-position filename="e-collator.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="collator" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-collator.c"
                 line="424">An #ECollator</doc>
            <type name="Collator" c:type="ECollator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="error_quark" c:identifier="e_collator_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </record>
    <enumeration name="CollatorError"
                 c:type="ECollatorError"
                 glib:error-domain="e-collator-error-quark">
      <doc xml:space="preserve"
           filename="e-collator.h"
           line="44">Errors from the #E_COLLATOR_ERROR domain.</doc>
      <source-position filename="e-collator.h" line="56"/>
      <member name="open" value="0" c:identifier="E_COLLATOR_ERROR_OPEN">
        <doc xml:space="preserve"
             filename="e-collator.h"
             line="46">An error occured trying to open a collator and access collation data.</doc>
      </member>
      <member name="conversion"
              value="1"
              c:identifier="E_COLLATOR_ERROR_CONVERSION">
        <doc xml:space="preserve"
             filename="e-collator.h"
             line="47">An error occurred converting character encodings</doc>
      </member>
      <member name="invalid_locale"
              value="2"
              c:identifier="E_COLLATOR_ERROR_INVALID_LOCALE">
        <doc xml:space="preserve"
             filename="e-collator.h"
             line="48">A malformed locale name was given to e_collator_new()</doc>
      </member>
    </enumeration>
    <enumeration name="ConflictResolution"
                 version="3.26"
                 glib:type-name="EConflictResolution"
                 glib:get-type="e_conflict_resolution_get_type"
                 c:type="EConflictResolution">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="292">Defines what to do when a conflict between the locally stored and
remotely stored object versions happen during object modify or remove.</doc>
      <member name="fail"
              value="0"
              c:identifier="E_CONFLICT_RESOLUTION_FAIL"
              glib:nick="fail">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="294">Fail when a write-conflict occurs.</doc>
      </member>
      <member name="use_newer"
              value="1"
              c:identifier="E_CONFLICT_RESOLUTION_USE_NEWER"
              glib:nick="use-newer">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="295">Use newer version of the object,
   which can be either the server version or the local version of it.</doc>
      </member>
      <member name="keep_server"
              value="2"
              c:identifier="E_CONFLICT_RESOLUTION_KEEP_SERVER"
              glib:nick="keep-server">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="297">Keep server object on conflict.</doc>
      </member>
      <member name="keep_local"
              value="3"
              c:identifier="E_CONFLICT_RESOLUTION_KEEP_LOCAL"
              glib:nick="keep-local">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="298">Write local version of the object on conflict.</doc>
      </member>
      <member name="write_copy"
              value="4"
              c:identifier="E_CONFLICT_RESOLUTION_WRITE_COPY"
              glib:nick="write-copy">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="299">Create a new copy of the object on conflict.</doc>
      </member>
    </enumeration>
    <constant name="DEBUG_LOG_DOMAIN_CAL_QUERIES"
              value="CalQueries"
              c:type="E_DEBUG_LOG_DOMAIN_CAL_QUERIES"
              version="2.32">
      <source-position filename="e-debug-log.h" line="49"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEBUG_LOG_DOMAIN_GLOG"
              value="GLog"
              c:type="E_DEBUG_LOG_DOMAIN_GLOG"
              version="2.32">
      <source-position filename="e-debug-log.h" line="42"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="DEBUG_LOG_DOMAIN_USER"
              value="USER"
              c:type="E_DEBUG_LOG_DOMAIN_USER"
              version="2.32">
      <source-position filename="e-debug-log.h" line="35"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="EDS_CHECK_VERSION"
                    c:identifier="EDS_CHECK_VERSION"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="eds-version.h"
           line="54">Checks the version of the Evolution-Data-Server library.  Returns
%TRUE if the version of the EDS header files is the same as or newer
than the passed-in version.</doc>
      <source-position filename="eds-version.h" line="64"/>
      <parameters>
        <parameter name="major">
          <doc xml:space="preserve"
               filename="eds-version.h"
               line="56">the major version number</doc>
        </parameter>
        <parameter name="minor">
          <doc xml:space="preserve"
               filename="eds-version.h"
               line="57">the minor version number</doc>
        </parameter>
        <parameter name="micro">
          <doc xml:space="preserve"
               filename="eds-version.h"
               line="58">the micro version number</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="EDS_MAJOR_VERSION" value="3" c:type="EDS_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="eds-version.h"
           line="24">The major version number of the Evolution-Data-Server library.  Like
eds_major_version(), but from the headers used at application compile
time, rather than from the library linked against at application run
time.</doc>
      <source-position filename="eds-version.h" line="32"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EDS_MICRO_VERSION" value="1" c:type="EDS_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="eds-version.h"
           line="44">The micro version number of the Evolution-Data-Server library.  Like
eds_micro_version(), but from the headers used at application compile
time, rather than from the library linked against at application run
time.</doc>
      <source-position filename="eds-version.h" line="52"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="EDS_MINOR_VERSION" value="39" c:type="EDS_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="eds-version.h"
           line="34">The minor version number of the Evolution-Data-Server library.  Like
eds_minor_version(), but from the headers used at application compile
time, rather than from the library linked against at application run
time.</doc>
      <source-position filename="eds-version.h" line="42"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="EXTENSIBLE"
                    c:identifier="E_EXTENSIBLE"
                    introspectable="0">
      <source-position filename="e-extensible.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EXTENSIBLE_GET_INTERFACE"
                    c:identifier="E_EXTENSIBLE_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="e-extensible.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EXTENSIBLE_INTERFACE"
                    c:identifier="E_EXTENSIBLE_INTERFACE"
                    introspectable="0">
      <source-position filename="e-extensible.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EXTENSION"
                    c:identifier="E_EXTENSION"
                    introspectable="0">
      <source-position filename="e-extension.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EXTENSION_CLASS"
                    c:identifier="E_EXTENSION_CLASS"
                    introspectable="0">
      <source-position filename="e-extension.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="EXTENSION_GET_CLASS"
                    c:identifier="E_EXTENSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-extension.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="Extensible"
               c:symbol-prefix="extensible"
               c:type="EExtensible"
               glib:type-name="EExtensible"
               glib:get-type="e_extensible_get_type"
               glib:type-struct="ExtensibleInterface">
      <doc xml:space="preserve"
           filename="e-extensible.c"
           line="18">#EExtension objects can be tacked on to any #GObject instance that
implements the #EExtensible interface.  A #GObject type can be made
extensible in two steps:

1. Add the #EExtensible interface when registering the #GType.
   There are no methods to implement.

|[
#include &lt;libedataserver/libedataserver.h&gt;

G_DEFINE_TYPE_WITH_CODE (
        ECustomWidget, e_custom_widget, GTK_TYPE_WIDGET,
        G_IMPLEMENT_INTERFACE (E_TYPE_EXTENSIBLE, NULL))
]|

2. Load extensions for the class at some point during #GObject
   initialization.  Generally this should be done toward the end of
   the initialization code, so extensions get a fully initialized
   object to work with.

|[
static void
e_custom_widget_constructed (ECustomWidget *widget)
{
        Construction code goes here, same as call to parent's 'constructed'...

        e_extensible_load_extensions (E_EXTENSIBLE (widget));
}
]|</doc>
      <source-position filename="e-extensible.h" line="53"/>
      <method name="list_extensions"
              c:identifier="e_extensible_list_extensions"
              version="3.4">
        <doc xml:space="preserve"
             filename="e-extensible.c"
             line="153">Returns a list of #EExtension objects bound to @extensible whose
types are ancestors of @extension_type.  For a complete list of
extension objects bound to @extensible, pass %E_TYPE_EXTENSION.

The list itself should be freed with g_list_free().  The extension
objects are owned by @extensible and should not be unreferenced.</doc>
        <source-position filename="e-extensible.h" line="57"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="e-extensible.c"
               line="165">a list of extension objects derived from @extension_type</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Extension"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="extensible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-extensible.c"
                 line="155">an #EExtensible</doc>
            <type name="Extensible" c:type="EExtensible*"/>
          </instance-parameter>
          <parameter name="extension_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-extensible.c"
                 line="156">the type of extensions to list</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="load_extensions"
              c:identifier="e_extensible_load_extensions"
              version="3.4">
        <doc xml:space="preserve"
             filename="e-extensible.c"
             line="109">Creates an instance of all instantiable subtypes of #EExtension which
target the class of @extensible.  The lifetimes of these newly created
#EExtension objects are bound to @extensible such that they are finalized
when @extensible is finalized.</doc>
        <source-position filename="e-extensible.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extensible" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-extensible.c"
                 line="111">an #EExtensible</doc>
            <type name="Extensible" c:type="EExtensible*"/>
          </instance-parameter>
        </parameters>
      </method>
    </interface>
    <record name="ExtensibleInterface"
            c:type="EExtensibleInterface"
            glib:is-gtype-struct-for="Extensible">
      <source-position filename="e-extensible.h" line="53"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
    </record>
    <class name="Extension"
           c:symbol-prefix="extension"
           c:type="EExtension"
           version="3.4"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="EExtension"
           glib:get-type="e_extension_get_type"
           glib:type-struct="ExtensionClass">
      <doc xml:space="preserve"
           filename="e-extension.c"
           line="18">#EExtension provides a way to extend the functionality of objects
that implement the #EExtensible interface.  #EExtension subclasses
can target a particular extensible object type.  New instances of
an extensible object type get paired with a new instance of each
#EExtension subclass that targets the extensible object type.

The first steps of writing a new extension are as follows:

1. Subclass #EExtension.

2. In the class initialization function, specify the #GType being
   extended.  The #GType must implement the #EExtensible interface.

3. Register the extension's own #GType.  If the extension is to
   be loaded dynamically using #GTypeModule, the type should be
   registered in the library module's e_module_load() function.</doc>
      <source-position filename="e-extension.h" line="71"/>
      <method name="get_extensible"
              c:identifier="e_extension_get_extensible"
              version="3.4">
        <doc xml:space="preserve"
             filename="e-extension.c"
             line="169">Returns the object that @extension extends.</doc>
        <source-position filename="e-extension.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-extension.c"
               line="175">the object being extended</doc>
          <type name="Extensible" c:type="EExtensible*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-extension.c"
                 line="171">an #EExtension</doc>
            <type name="Extension" c:type="EExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="extensible"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Extensible"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ExtensionPrivate" c:type="EExtensionPrivate*"/>
      </field>
    </class>
    <record name="ExtensionClass"
            c:type="EExtensionClass"
            glib:is-gtype-struct-for="Extension">
      <source-position filename="e-extension.h" line="71"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="extensible_type">
        <type name="GType" c:type="GType"/>
      </field>
    </record>
    <record name="ExtensionPrivate" c:type="EExtensionPrivate" disguised="1">
      <source-position filename="e-extension.h" line="50"/>
    </record>
    <record name="Flag" c:type="EFlag" disguised="1" version="1.12">
      <doc xml:space="preserve"
           filename="e-flag.h"
           line="33">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="e-flag.h" line="41"/>
      <method name="clear"
              c:identifier="e_flag_clear"
              version="1.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="102">Unsets @flag.  Subsequent calls to e_flag_wait() or e_flag_wait_until()
will block until @flag is set.</doc>
        <source-position filename="e-flag.h" line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="104">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="free"
              c:identifier="e_flag_free"
              version="1.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="215">Destroys @flag.</doc>
        <source-position filename="e-flag.h" line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="217">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_set"
              c:identifier="e_flag_is_set"
              version="1.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="57">Returns the state of @flag.</doc>
        <source-position filename="e-flag.h" line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-flag.c"
               line="63">%TRUE if @flag is set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="59">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="e_flag_set"
              version="1.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="81">Sets @flag.  All threads waiting on @flag are woken up.  Threads that
call e_flag_wait() or e_flag_wait_until() once @flag is set will not
block at all.</doc>
        <source-position filename="e-flag.h" line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="83">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="timed_wait"
              c:identifier="e_flag_timed_wait"
              version="1.12"
              introspectable="0"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="141">Blocks until @flag is set, or until the time specified by @abs_time.
If @flag is already set, the function returns immediately.  The return
value indicates the state of @flag after waiting.

If @abs_time is %NULL, e_flag_timed_wait() acts like e_flag_wait().

To easily calculate @abs_time, a combination of g_get_current_time() and
g_time_val_add() can be used.</doc>
        <doc-deprecated xml:space="preserve">Use e_flag_wait_until() instead.</doc-deprecated>
        <source-position filename="e-flag.h" line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-flag.c"
               line="155">%TRUE if @flag is now set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="143">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
          <parameter name="abs_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="144">a #GTimeVal, determining the final time</doc>
            <type name="GLib.TimeVal" c:type="GTimeVal*"/>
          </parameter>
        </parameters>
      </method>
      <method name="wait"
              c:identifier="e_flag_wait"
              version="1.12"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="121">Blocks until @flag is set.  If @flag is already set, the function returns
immediately.</doc>
        <source-position filename="e-flag.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="123">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="wait_until"
              c:identifier="e_flag_wait_until"
              version="3.8"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="181">Blocks until @flag is set, or until the time specified by @end_time.
If @flag is already set, the function returns immediately.  The return
value indicates the state of @flag after waiting.

To easily calculate @end_time, a combination of g_get_monotonic_time() and
G_TIME_SPAN_SECOND macro.</doc>
        <source-position filename="e-flag.h" line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-flag.c"
               line="193">%TRUE if @flag is now set</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="flag" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="183">an #EFlag</doc>
            <type name="Flag" c:type="EFlag*"/>
          </instance-parameter>
          <parameter name="end_time" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-flag.c"
                 line="184">the monotonic time to wait until</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="e_flag_new"
                version="1.12"
                introspectable="0">
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="35">Creates a new #EFlag object.  It is initially unset.</doc>
        <source-position filename="e-flag.h" line="43"/>
        <return-value>
          <doc xml:space="preserve"
               filename="e-flag.c"
               line="40">a new #EFlag</doc>
          <type name="Flag" c:type="EFlag*"/>
        </return-value>
      </function>
    </record>
    <callback name="FreeFormExpBuildSexpFunc"
              c:type="EFreeFormExpBuildSexpFunc">
      <source-position filename="e-free-form-exp.h" line="31"/>
      <return-value transfer-ownership="full">
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="word" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="options" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="hint" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <record name="FreeFormExpSymbol" c:type="EFreeFormExpSymbol">
      <source-position filename="e-free-form-exp.h" line="39"/>
      <field name="names" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="hint" writable="1">
        <type name="utf8" c:type="const gchar*"/>
      </field>
      <field name="build_sexp" writable="1">
        <type name="FreeFormExpBuildSexpFunc"
              c:type="EFreeFormExpBuildSexpFunc"/>
      </field>
    </record>
    <function-macro name="GDATA_OAUTH2_AUTHORIZER"
                    c:identifier="E_GDATA_OAUTH2_AUTHORIZER"
                    introspectable="0">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GDATA_OAUTH2_AUTHORIZER_CLASS"
                    c:identifier="E_GDATA_OAUTH2_AUTHORIZER_CLASS"
                    introspectable="0">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="GDATA_OAUTH2_AUTHORIZER_GET_CLASS"
                    c:identifier="E_GDATA_OAUTH2_AUTHORIZER_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="GDataOAuth2Authorizer"
           c:symbol-prefix="gdata_oauth2_authorizer"
           c:type="EGDataOAuth2Authorizer"
           parent="GObject.Object"
           glib:type-name="EGDataOAuth2Authorizer"
           glib:get-type="e_gdata_oauth2_authorizer_get_type"
           glib:type-struct="GDataOAuth2AuthorizerClass">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="60"/>
      <constructor name="new"
                   c:identifier="e_gdata_oauth2_authorizer_new"
                   version="3.28">
        <doc xml:space="preserve"
             filename="e-gdata-oauth2-authorizer.c"
             line="377">Creates a new #EGDataOAuth2Authorizer for the given @source
and @service_type. The function always returns %NULL when
e_gdata_oauth2_authorizer_supported() returns %FALSE.</doc>
        <source-position filename="e-gdata-oauth2-authorizer.h" line="65"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-gdata-oauth2-authorizer.c"
               line="386">a new #EGDataOAuth2Authorizer, or %NULL when
   the #EGDataOAuth2Authorizer is not supported.</doc>
          <type name="GDataOAuth2Authorizer" c:type="EGDataOAuth2Authorizer*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="379">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="service_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="380">a #GDataService type descendant</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="supported"
                c:identifier="e_gdata_oauth2_authorizer_supported"
                version="3.28">
        <source-position filename="e-gdata-oauth2-authorizer.h" line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-gdata-oauth2-authorizer.c"
               line="362">Whether the #EGDataOAuth2Authorizer is supported, which
   means whether evolution-data-server had been compiled with libgdata.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <method name="clone_credentials"
              c:identifier="e_gdata_oauth2_authorizer_clone_credentials"
              version="3.28">
        <source-position filename="e-gdata-oauth2-authorizer.h" line="74"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-gdata-oauth2-authorizer.c"
               line="492">A copy of currently stored credentials,
   or %NULL, when none are set. Free the returned structure with
   e_named_parameters_free(), when no longer needed.

See: e_gdata_oauth2_authorizer_supported()</doc>
          <type name="NamedParameters" c:type="ENamedParameters*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oauth2_authorizer"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="490">an #EGDataOAuth2Authorizer</doc>
            <type name="GDataOAuth2Authorizer"
                  c:type="EGDataOAuth2Authorizer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_type"
              c:identifier="e_gdata_oauth2_authorizer_get_service_type"
              version="3.28">
        <source-position filename="e-gdata-oauth2-authorizer.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-gdata-oauth2-authorizer.c"
               line="435">a service %GType, for which the @oauth2_authorizer had been created.

See: e_gdata_oauth2_authorizer_supported()</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <instance-parameter name="oauth2_authorizer"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="433">an #EGDataOAuth2Authorizer</doc>
            <type name="GDataOAuth2Authorizer"
                  c:type="EGDataOAuth2Authorizer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_expired"
              c:identifier="e_gdata_oauth2_authorizer_is_expired"
              version="3.28">
        <source-position filename="e-gdata-oauth2-authorizer.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-gdata-oauth2-authorizer.c"
               line="525">Whether the internally stored token is expired.

See: e_gdata_oauth2_authorizer_supported()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="oauth2_authorizer"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="523">an #EGDataOAuth2Authorizer</doc>
            <type name="GDataOAuth2Authorizer"
                  c:type="EGDataOAuth2Authorizer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_source"
              c:identifier="e_gdata_oauth2_authorizer_ref_source"
              version="3.28">
        <source-position filename="e-gdata-oauth2-authorizer.h" line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-gdata-oauth2-authorizer.c"
               line="411">an #ESource, for which the @oauth2_authorizer
   had been created, or %NULL. Free returned non-NULL object with g_object_unref(),
   when done with it.

See: e_gdata_oauth2_authorizer_supported()</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="oauth2_authorizer"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="409">an #EGDataOAuth2Authorizer</doc>
            <type name="GDataOAuth2Authorizer"
                  c:type="EGDataOAuth2Authorizer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_credentials"
              c:identifier="e_gdata_oauth2_authorizer_set_credentials"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-gdata-oauth2-authorizer.c"
             line="453">Updates internally stored credentials, used to get access token.

See: e_gdata_oauth2_authorizer_supported()</doc>
        <source-position filename="e-gdata-oauth2-authorizer.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="oauth2_authorizer"
                              transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="455">an #EGDataOAuth2Authorizer</doc>
            <type name="GDataOAuth2Authorizer"
                  c:type="EGDataOAuth2Authorizer*"/>
          </instance-parameter>
          <parameter name="credentials"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-gdata-oauth2-authorizer.c"
                 line="456">credentials to set, or %NULL</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
        </parameters>
      </method>
      <property name="service-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GType" c:type="GType"/>
      </property>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Source"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="GDataOAuth2AuthorizerPrivate"
              c:type="EGDataOAuth2AuthorizerPrivate*"/>
      </field>
    </class>
    <record name="GDataOAuth2AuthorizerClass"
            c:type="EGDataOAuth2AuthorizerClass"
            glib:is-gtype-struct-for="GDataOAuth2Authorizer">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="60"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="GDataOAuth2AuthorizerPrivate"
            c:type="EGDataOAuth2AuthorizerPrivate"
            disguised="1">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="51"/>
    </record>
    <function-macro name="IS_CLIENT"
                    c:identifier="E_IS_CLIENT"
                    introspectable="0">
      <source-position filename="e-client.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CLIENT_CLASS"
                    c:identifier="E_IS_CLIENT_CLASS"
                    introspectable="0">
      <source-position filename="e-client.h" line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EXTENSIBLE"
                    c:identifier="E_IS_EXTENSIBLE"
                    introspectable="0">
      <source-position filename="e-extensible.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EXTENSIBLE_INTERFACE"
                    c:identifier="E_IS_EXTENSIBLE_INTERFACE"
                    introspectable="0">
      <source-position filename="e-extensible.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EXTENSION"
                    c:identifier="E_IS_EXTENSION"
                    introspectable="0">
      <source-position filename="e-extension.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_EXTENSION_CLASS"
                    c:identifier="E_IS_EXTENSION_CLASS"
                    introspectable="0">
      <source-position filename="e-extension.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GDATA_OAUTH2_AUTHORIZER"
                    c:identifier="E_IS_GDATA_OAUTH2_AUTHORIZER"
                    introspectable="0">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_GDATA_OAUTH2_AUTHORIZER_CLASS"
                    c:identifier="E_IS_GDATA_OAUTH2_AUTHORIZER_CLASS"
                    introspectable="0">
      <source-position filename="e-gdata-oauth2-authorizer.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MODULE"
                    c:identifier="E_IS_MODULE"
                    introspectable="0">
      <source-position filename="e-module.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MODULE_CLASS"
                    c:identifier="E_IS_MODULE_CLASS"
                    introspectable="0">
      <source-position filename="e-module.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_MONITOR"
                    c:identifier="E_IS_NETWORK_MONITOR"
                    introspectable="0">
      <source-position filename="e-network-monitor.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_MONITOR_CLASS"
                    c:identifier="E_IS_NETWORK_MONITOR_CLASS"
                    introspectable="0">
      <source-position filename="e-network-monitor.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE"
                    c:identifier="E_IS_OAUTH2_SERVICE"
                    introspectable="0">
      <source-position filename="e-oauth2-service.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICES"
                    c:identifier="E_IS_OAUTH2_SERVICES"
                    introspectable="0">
      <source-position filename="e-oauth2-services.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICES_CLASS"
                    c:identifier="E_IS_OAUTH2_SERVICES_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-services.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE_BASE"
                    c:identifier="E_IS_OAUTH2_SERVICE_BASE"
                    introspectable="0">
      <source-position filename="e-oauth2-service-base.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE_BASE_CLASS"
                    c:identifier="E_IS_OAUTH2_SERVICE_BASE_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-base.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE_GOOGLE"
                    c:identifier="E_IS_OAUTH2_SERVICE_GOOGLE"
                    introspectable="0">
      <source-position filename="e-oauth2-service-google.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE_GOOGLE_CLASS"
                    c:identifier="E_IS_OAUTH2_SERVICE_GOOGLE_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-google.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE_OUTLOOK"
                    c:identifier="E_IS_OAUTH2_SERVICE_OUTLOOK"
                    introspectable="0">
      <source-position filename="e-oauth2-service-outlook.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_OAUTH2_SERVICE_OUTLOOK_CLASS"
                    c:identifier="E_IS_OAUTH2_SERVICE_OUTLOOK_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-outlook.h" line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOUP_AUTH_BEARER"
                    c:identifier="E_IS_SOUP_AUTH_BEARER"
                    introspectable="0">
      <source-position filename="e-soup-auth-bearer.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOUP_AUTH_BEARER_CLASS"
                    c:identifier="E_IS_SOUP_AUTH_BEARER_CLASS"
                    introspectable="0">
      <source-position filename="e-soup-auth-bearer.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOUP_SESSION"
                    c:identifier="E_IS_SOUP_SESSION"
                    introspectable="0">
      <source-position filename="e-soup-session.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOUP_SESSION_CLASS"
                    c:identifier="E_IS_SOUP_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="e-soup-session.h" line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE"
                    c:identifier="E_IS_SOURCE"
                    introspectable="0">
      <source-position filename="e-source.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_ADDRESS_BOOK"
                    c:identifier="E_IS_SOURCE_ADDRESS_BOOK"
                    introspectable="0">
      <source-position filename="e-source-address-book.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_ADDRESS_BOOK_CLASS"
                    c:identifier="E_IS_SOURCE_ADDRESS_BOOK_CLASS"
                    introspectable="0">
      <source-position filename="e-source-address-book.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_ALARMS"
                    c:identifier="E_IS_SOURCE_ALARMS"
                    introspectable="0">
      <source-position filename="e-source-alarms.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_ALARMS_CLASS"
                    c:identifier="E_IS_SOURCE_ALARMS_CLASS"
                    introspectable="0">
      <source-position filename="e-source-alarms.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_AUTHENTICATION"
                    c:identifier="E_IS_SOURCE_AUTHENTICATION"
                    introspectable="0">
      <source-position filename="e-source-authentication.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_AUTHENTICATION_CLASS"
                    c:identifier="E_IS_SOURCE_AUTHENTICATION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-authentication.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_AUTOCOMPLETE"
                    c:identifier="E_IS_SOURCE_AUTOCOMPLETE"
                    introspectable="0">
      <source-position filename="e-source-autocomplete.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_AUTOCOMPLETE_CLASS"
                    c:identifier="E_IS_SOURCE_AUTOCOMPLETE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-autocomplete.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_AUTOCONFIG"
                    c:identifier="E_IS_SOURCE_AUTOCONFIG"
                    introspectable="0">
      <source-position filename="e-source-autoconfig.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_AUTOCONFIG_CLASS"
                    c:identifier="E_IS_SOURCE_AUTOCONFIG_CLASS"
                    introspectable="0">
      <source-position filename="e-source-autoconfig.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_BACKEND"
                    c:identifier="E_IS_SOURCE_BACKEND"
                    introspectable="0">
      <source-position filename="e-source-backend.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_BACKEND_CLASS"
                    c:identifier="E_IS_SOURCE_BACKEND_CLASS"
                    introspectable="0">
      <source-position filename="e-source-backend.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CALENDAR"
                    c:identifier="E_IS_SOURCE_CALENDAR"
                    introspectable="0">
      <source-position filename="e-source-calendar.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CALENDAR_CLASS"
                    c:identifier="E_IS_SOURCE_CALENDAR_CLASS"
                    introspectable="0">
      <source-position filename="e-source-calendar.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CAMEL"
                    c:identifier="E_IS_SOURCE_CAMEL"
                    introspectable="0">
      <source-position filename="e-source-camel.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CAMEL_CLASS"
                    c:identifier="E_IS_SOURCE_CAMEL_CLASS"
                    introspectable="0">
      <source-position filename="e-source-camel.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CLASS"
                    c:identifier="E_IS_SOURCE_CLASS"
                    introspectable="0">
      <source-position filename="e-source.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_COLLECTION"
                    c:identifier="E_IS_SOURCE_COLLECTION"
                    introspectable="0">
      <source-position filename="e-source-collection.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_COLLECTION_CLASS"
                    c:identifier="E_IS_SOURCE_COLLECTION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-collection.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CONTACTS"
                    c:identifier="E_IS_SOURCE_CONTACTS"
                    introspectable="0">
      <source-position filename="e-source-contacts.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CONTACTS_CLASS"
                    c:identifier="E_IS_SOURCE_CONTACTS_CLASS"
                    introspectable="0">
      <source-position filename="e-source-contacts.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_CLASS"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider.h" line="45"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_IMPL"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_IMPL"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_CLASS"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="42"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2_CLASS"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="43"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD_CLASS"
                    c:identifier="E_IS_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_EXTENSION"
                    c:identifier="E_IS_SOURCE_EXTENSION"
                    introspectable="0">
      <source-position filename="e-source-extension.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_EXTENSION_CLASS"
                    c:identifier="E_IS_SOURCE_EXTENSION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-extension.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_GOA"
                    c:identifier="E_IS_SOURCE_GOA"
                    introspectable="0">
      <source-position filename="e-source-goa.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_GOA_CLASS"
                    c:identifier="E_IS_SOURCE_GOA_CLASS"
                    introspectable="0">
      <source-position filename="e-source-goa.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_LDAP"
                    c:identifier="E_IS_SOURCE_LDAP"
                    introspectable="0">
      <source-position filename="e-source-ldap.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_LDAP_CLASS"
                    c:identifier="E_IS_SOURCE_LDAP_CLASS"
                    introspectable="0">
      <source-position filename="e-source-ldap.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_LOCAL"
                    c:identifier="E_IS_SOURCE_LOCAL"
                    introspectable="0">
      <source-position filename="e-source-local.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_LOCAL_CLASS"
                    c:identifier="E_IS_SOURCE_LOCAL_CLASS"
                    introspectable="0">
      <source-position filename="e-source-local.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_ACCOUNT"
                    c:identifier="E_IS_SOURCE_MAIL_ACCOUNT"
                    introspectable="0">
      <source-position filename="e-source-mail-account.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_ACCOUNT_CLASS"
                    c:identifier="E_IS_SOURCE_MAIL_ACCOUNT_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-account.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_COMPOSITION"
                    c:identifier="E_IS_SOURCE_MAIL_COMPOSITION"
                    introspectable="0">
      <source-position filename="e-source-mail-composition.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_COMPOSITION_CLASS"
                    c:identifier="E_IS_SOURCE_MAIL_COMPOSITION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-composition.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_IDENTITY"
                    c:identifier="E_IS_SOURCE_MAIL_IDENTITY"
                    introspectable="0">
      <source-position filename="e-source-mail-identity.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_IDENTITY_CLASS"
                    c:identifier="E_IS_SOURCE_MAIL_IDENTITY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-identity.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_SIGNATURE"
                    c:identifier="E_IS_SOURCE_MAIL_SIGNATURE"
                    introspectable="0">
      <source-position filename="e-source-mail-signature.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_SIGNATURE_CLASS"
                    c:identifier="E_IS_SOURCE_MAIL_SIGNATURE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-signature.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_SUBMISSION"
                    c:identifier="E_IS_SOURCE_MAIL_SUBMISSION"
                    introspectable="0">
      <source-position filename="e-source-mail-submission.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_SUBMISSION_CLASS"
                    c:identifier="E_IS_SOURCE_MAIL_SUBMISSION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-submission.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_TRANSPORT"
                    c:identifier="E_IS_SOURCE_MAIL_TRANSPORT"
                    introspectable="0">
      <source-position filename="e-source-mail-transport.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MAIL_TRANSPORT_CLASS"
                    c:identifier="E_IS_SOURCE_MAIL_TRANSPORT_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-transport.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MDN"
                    c:identifier="E_IS_SOURCE_MDN"
                    introspectable="0">
      <source-position filename="e-source-mdn.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MDN_CLASS"
                    c:identifier="E_IS_SOURCE_MDN_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mdn.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MEMO_LIST"
                    c:identifier="E_IS_SOURCE_MEMO_LIST"
                    introspectable="0">
      <source-position filename="e-source-memo-list.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_MEMO_LIST_CLASS"
                    c:identifier="E_IS_SOURCE_MEMO_LIST_CLASS"
                    introspectable="0">
      <source-position filename="e-source-memo-list.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_OFFLINE"
                    c:identifier="E_IS_SOURCE_OFFLINE"
                    introspectable="0">
      <source-position filename="e-source-offline.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_OFFLINE_CLASS"
                    c:identifier="E_IS_SOURCE_OFFLINE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-offline.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_OPENPGP"
                    c:identifier="E_IS_SOURCE_OPENPGP"
                    introspectable="0">
      <source-position filename="e-source-openpgp.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_OPENPGP_CLASS"
                    c:identifier="E_IS_SOURCE_OPENPGP_CLASS"
                    introspectable="0">
      <source-position filename="e-source-openpgp.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_PROXY"
                    c:identifier="E_IS_SOURCE_PROXY"
                    introspectable="0">
      <source-position filename="e-source-proxy.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_PROXY_CLASS"
                    c:identifier="E_IS_SOURCE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-proxy.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REFRESH"
                    c:identifier="E_IS_SOURCE_REFRESH"
                    introspectable="0">
      <source-position filename="e-source-refresh.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REFRESH_CLASS"
                    c:identifier="E_IS_SOURCE_REFRESH_CLASS"
                    introspectable="0">
      <source-position filename="e-source-refresh.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REGISTRY"
                    c:identifier="E_IS_SOURCE_REGISTRY"
                    introspectable="0">
      <source-position filename="e-source-registry.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REGISTRY_CLASS"
                    c:identifier="E_IS_SOURCE_REGISTRY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-registry.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REGISTRY_WATCHER"
                    c:identifier="E_IS_SOURCE_REGISTRY_WATCHER"
                    introspectable="0">
      <source-position filename="e-source-registry-watcher.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REGISTRY_WATCHER_CLASS"
                    c:identifier="E_IS_SOURCE_REGISTRY_WATCHER_CLASS"
                    introspectable="0">
      <source-position filename="e-source-registry-watcher.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_RESOURCE"
                    c:identifier="E_IS_SOURCE_RESOURCE"
                    introspectable="0">
      <source-position filename="e-source-resource.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_RESOURCE_CLASS"
                    c:identifier="E_IS_SOURCE_RESOURCE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-resource.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REVISION_GUARDS"
                    c:identifier="E_IS_SOURCE_REVISION_GUARDS"
                    introspectable="0">
      <source-position filename="e-source-revision-guards.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_REVISION_GUARDS_CLASS"
                    c:identifier="E_IS_SOURCE_REVISION_GUARDS_CLASS"
                    introspectable="0">
      <source-position filename="e-source-revision-guards.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_SECURITY"
                    c:identifier="E_IS_SOURCE_SECURITY"
                    introspectable="0">
      <source-position filename="e-source-security.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_SECURITY_CLASS"
                    c:identifier="E_IS_SOURCE_SECURITY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-security.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_SELECTABLE"
                    c:identifier="E_IS_SOURCE_SELECTABLE"
                    introspectable="0">
      <source-position filename="e-source-selectable.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_SELECTABLE_CLASS"
                    c:identifier="E_IS_SOURCE_SELECTABLE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-selectable.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_SMIME"
                    c:identifier="E_IS_SOURCE_SMIME"
                    introspectable="0">
      <source-position filename="e-source-smime.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_SMIME_CLASS"
                    c:identifier="E_IS_SOURCE_SMIME_CLASS"
                    introspectable="0">
      <source-position filename="e-source-smime.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_TASK_LIST"
                    c:identifier="E_IS_SOURCE_TASK_LIST"
                    introspectable="0">
      <source-position filename="e-source-task-list.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_TASK_LIST_CLASS"
                    c:identifier="E_IS_SOURCE_TASK_LIST_CLASS"
                    introspectable="0">
      <source-position filename="e-source-task-list.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_UOA"
                    c:identifier="E_IS_SOURCE_UOA"
                    introspectable="0">
      <source-position filename="e-source-uoa.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_UOA_CLASS"
                    c:identifier="E_IS_SOURCE_UOA_CLASS"
                    introspectable="0">
      <source-position filename="e-source-uoa.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_WEATHER"
                    c:identifier="E_IS_SOURCE_WEATHER"
                    introspectable="0">
      <source-position filename="e-source-weather.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_WEATHER_CLASS"
                    c:identifier="E_IS_SOURCE_WEATHER_CLASS"
                    introspectable="0">
      <source-position filename="e-source-weather.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_WEBDAV"
                    c:identifier="E_IS_SOURCE_WEBDAV"
                    introspectable="0">
      <source-position filename="e-source-webdav.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SOURCE_WEBDAV_CLASS"
                    c:identifier="E_IS_SOURCE_WEBDAV_CLASS"
                    introspectable="0">
      <source-position filename="e-source-webdav.h" line="41"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBDAV_SESSION"
                    c:identifier="E_IS_WEBDAV_SESSION"
                    introspectable="0">
      <source-position filename="e-webdav-session.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_WEBDAV_SESSION_CLASS"
                    c:identifier="E_IS_WEBDAV_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="e-webdav-session.h" line="44"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_XML_DOCUMENT"
                    c:identifier="E_IS_XML_DOCUMENT"
                    introspectable="0">
      <source-position filename="e-xml-document.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_XML_DOCUMENT_CLASS"
                    c:identifier="E_IS_XML_DOCUMENT_CLASS"
                    introspectable="0">
      <source-position filename="e-xml-document.h" line="40"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MODULE" c:identifier="E_MODULE" introspectable="0">
      <source-position filename="e-module.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MODULE_CLASS"
                    c:identifier="E_MODULE_CLASS"
                    introspectable="0">
      <source-position filename="e-module.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MODULE_GET_CLASS"
                    c:identifier="E_MODULE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-module.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="MdnResponsePolicy"
                 version="3.6"
                 glib:type-name="EMdnResponsePolicy"
                 glib:get-type="e_mdn_response_policy_get_type"
                 c:type="EMdnResponsePolicy">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="25">Policy for responding to Message Disposition Notification requests
(i.e. a Disposition-Notification-To header) when receiving messages.
See RFC 2298 for more information about MDN requests.</doc>
      <member name="never"
              value="0"
              c:identifier="E_MDN_RESPONSE_POLICY_NEVER"
              glib:nick="never">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="27">Never respond to an MDN request.</doc>
      </member>
      <member name="always"
              value="1"
              c:identifier="E_MDN_RESPONSE_POLICY_ALWAYS"
              glib:nick="always">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="29">Always respond to an MDN request.</doc>
      </member>
      <member name="ask"
              value="2"
              c:identifier="E_MDN_RESPONSE_POLICY_ASK"
              glib:nick="ask">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="31">Ask the user before responding to an MDN request.</doc>
      </member>
    </enumeration>
    <record name="MemChunk" c:type="EMemChunk" disguised="1">
      <source-position filename="e-memory.h" line="33"/>
    </record>
    <class name="Module"
           c:symbol-prefix="module"
           c:type="EModule"
           version="3.4"
           parent="GObject.TypeModule"
           glib:type-name="EModule"
           glib:get-type="e_module_get_type"
           glib:type-struct="ModuleClass">
      <doc xml:space="preserve"
           filename="e-module.h"
           line="53">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="e-module.h" line="69"/>
      <implements name="GObject.TypePlugin"/>
      <constructor name="new" c:identifier="e_module_new" version="3.4">
        <doc xml:space="preserve"
             filename="e-module.c"
             line="221">Creates a new #EModule that will load the specific shared library
when in use.</doc>
        <source-position filename="e-module.h" line="72"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-module.c"
               line="228">a new #EModule for @filename</doc>
          <type name="Module" c:type="EModule*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-module.c"
                 line="223">filename of the shared library module</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="load_all_in_directory"
                c:identifier="e_module_load_all_in_directory"
                version="3.4">
        <doc xml:space="preserve"
             filename="e-module.c"
             line="259">Loads all the modules in the specified directory into memory.  If
you want to unload them (enabling on-demand loading) you must call
g_type_module_unuse() on all the modules.  Free the returned list
with g_list_free().</doc>
        <source-position filename="e-module.h" line="75"/>
        <return-value transfer-ownership="container">
          <doc xml:space="preserve"
               filename="e-module.c"
               line="268">a list of #EModules loaded from @dirname</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Module"/>
          </type>
        </return-value>
        <parameters>
          <parameter name="dirname" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-module.c"
                 line="261">pathname for a directory containing modules to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="load_file"
                c:identifier="e_module_load_file"
                version="3.16">
        <doc xml:space="preserve"
             filename="e-module.c"
             line="314">Load the module from the specified filename into memory. If
you want to unload it (enabling on-demand loading) you must call
g_type_module_unuse() on the module.</doc>
        <source-position filename="e-module.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-module.c"
               line="322">an #EModule loaded from @filename</doc>
          <type name="Module" c:type="EModule*"/>
        </return-value>
        <parameters>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-module.c"
                 line="316">filename of the module to load</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_filename"
              c:identifier="e_module_get_filename"
              version="3.4">
        <doc xml:space="preserve"
             filename="e-module.c"
             line="240">Returns the filename of the shared library for @module.  The
string is owned by @module and should not be modified or freed.</doc>
        <source-position filename="e-module.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-module.c"
               line="247">the filename for @module</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="module" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-module.c"
                 line="242">an #EModule</doc>
            <type name="Module" c:type="EModule*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="filename"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-module.c"
             line="197">The filename of the module.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.TypeModule" c:type="GTypeModule"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="ModulePrivate" c:type="EModulePrivate*"/>
      </field>
    </class>
    <record name="ModuleClass"
            c:type="EModuleClass"
            glib:is-gtype-struct-for="Module">
      <source-position filename="e-module.h" line="69"/>
      <field name="parent_class">
        <type name="GObject.TypeModuleClass" c:type="GTypeModuleClass"/>
      </field>
    </record>
    <record name="ModulePrivate" c:type="EModulePrivate" disguised="1">
      <source-position filename="e-module.h" line="51"/>
    </record>
    <function-macro name="NETWORK_MONITOR"
                    c:identifier="E_NETWORK_MONITOR"
                    introspectable="0">
      <source-position filename="e-network-monitor.h" line="28"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="NETWORK_MONITOR_ALWAYS_ONLINE_NAME"
              value='"always-online"'
              c:type="E_NETWORK_MONITOR_ALWAYS_ONLINE_NAME"
              version="3.22">
      <doc xml:space="preserve"
           filename="e-network-monitor.h"
           line="51">A special name, which can be used as a GIO name in the call
to e_network_monitor_set_gio_name(), which is used to report
the the network as always reachable.</doc>
      <source-position filename="e-network-monitor.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="NETWORK_MONITOR_CLASS"
                    c:identifier="E_NETWORK_MONITOR_CLASS"
                    introspectable="0">
      <source-position filename="e-network-monitor.h" line="31"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_MONITOR_GET_CLASS"
                    c:identifier="E_NETWORK_MONITOR_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-network-monitor.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <record name="NamedParameters"
            c:type="ENamedParameters"
            version="3.8"
            glib:type-name="ENamedParameters"
            glib:get-type="e_named_parameters_get_type"
            c:symbol-prefix="named_parameters">
      <source-position filename="e-data-server-util.h" line="173"/>
      <constructor name="new"
                   c:identifier="e_named_parameters_new"
                   version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2160">Creates a new instance of an #ENamedParameters. This should be freed
with e_named_parameters_free(), when no longer needed. Names are
compared case insensitively.

The structure is not thread safe, if the caller requires thread safety,
then it should provide it on its own.</doc>
        <source-position filename="e-data-server-util.h" line="179"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2170">newly allocated #ENamedParameters</doc>
          <type name="NamedParameters" c:type="ENamedParameters*"/>
        </return-value>
      </constructor>
      <constructor name="new_string"
                   c:identifier="e_named_parameters_new_string"
                   version="3.18">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2212">Creates a new instance of an #ENamedParameters, with initial content being
taken from @str. This should be freed with e_named_parameters_free(),
when no longer needed. Names are compared case insensitively.

The @str should be created with e_named_parameters_to_string(), to be
properly encoded.

The structure is not thread safe, if the caller requires thread safety,
then it should provide it on its own.</doc>
        <source-position filename="e-data-server-util.h" line="183"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2226">newly allocated #ENamedParameters</doc>
          <type name="NamedParameters" c:type="ENamedParameters*"/>
        </return-value>
        <parameters>
          <parameter name="str" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2214">a string to be used as a content of a newly created #ENamedParameters</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_strv"
                   c:identifier="e_named_parameters_new_strv"
                   version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2180">Creates a new instance of an #ENamedParameters, with initial content
being taken from @strv. This should be freed with e_named_parameters_free(),
when no longer needed. Names are compared case insensitively.

The structure is not thread safe, if the caller requires thread safety,
then it should provide it on its own.</doc>
        <source-position filename="e-data-server-util.h" line="181"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2192">newly allocated #ENamedParameters</doc>
          <type name="NamedParameters" c:type="ENamedParameters*"/>
        </return-value>
        <parameters>
          <parameter name="strv" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2182">NULL-terminated string array to be used as a content of a newly
    created #ENamedParameters</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="assign"
              c:identifier="e_named_parameters_assign"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2318">Makes content of the @parameters the same as @from.
Functions clears content of @parameters if @from is %NULL.</doc>
        <source-position filename="e-data-server-util.h" line="188"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2320">an #ENamedParameters to assign values to</doc>
            <type name="NamedParameters" c:type="ENamedParameters*"/>
          </instance-parameter>
          <parameter name="from"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2321">an #ENamedParameters to get values from, or %NULL</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="e_named_parameters_clear"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2298">Removes all stored parameters from @parameters.</doc>
        <source-position filename="e-data-server-util.h" line="187"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2300">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="ENamedParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="count"
              c:identifier="e_named_parameters_count"
              version="3.18">
        <source-position filename="e-data-server-util.h" line="203"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2574">The number of stored named parameters in @parameters</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2572">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="exists"
              c:identifier="e_named_parameters_exists"
              version="3.18">
        <source-position filename="e-data-server-util.h" line="201"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2556">Whether @parameters holds a parameter named @name</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2553">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2554">name of the parameter whose existence to check</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="free" c:identifier="e_named_parameters_free" version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2279">Frees an instance of #ENamedParameters, previously allocated
with e_named_parameters_new(). Function does nothing, if
@parameters is %NULL.</doc>
        <source-position filename="e-data-server-util.h" line="186"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2281">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="ENamedParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get" c:identifier="e_named_parameters_get" version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2424">Returns current value of a parameter with name @name. If not such
exists, then returns %NULL.</doc>
        <source-position filename="e-data-server-util.h" line="193"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2432">value of a parameter named @name, or %NULL.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2426">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2427">name of a parameter to get</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="e_named_parameters_get_name"
              version="3.18">
        <source-position filename="e-data-server-util.h" line="204"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2591">The name of the parameters at index @index,
   or %NULL, of the @index is out of bounds or other error. The returned
   string should be freed with g_free() when done with it.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2588">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2589">an index of the parameter whose name to retrieve</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_clone"
              c:identifier="e_named_parameters_new_clone"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2251">Creates a new instance of an #ENamedParameters, with initial content
being taken from @parameters. This should be freed with e_named_parameters_free(),
when no longer needed. Names are compared case insensitively.

The structure is not thread safe, if the caller requires thread safety,
then it should provide it on its own.</doc>
        <source-position filename="e-data-server-util.h" line="185"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2263">newly allocated #ENamedParameters</doc>
          <type name="NamedParameters" c:type="ENamedParameters*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2253">an #ENamedParameters to be used as a content of a newly
   created #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set" c:identifier="e_named_parameters_set" version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2378">Sets parameter named @name to value @value. If @value is NULL,
then the parameter is removed. @value can be an empty string.

Note: There is a restriction on parameter names, it cannot be empty or
contain a colon character (':'), otherwise it can be pretty much anything.</doc>
        <source-position filename="e-data-server-util.h" line="190"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2380">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="ENamedParameters*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2381">name of a parameter to set</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2382">value to set, or %NULL to unset</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="test" c:identifier="e_named_parameters_test" version="3.8">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2455">Compares current value of parameter named @name with given @value
and returns whether they are equal, either case sensitively or
insensitively, based on @case_sensitively argument. Function
returns %FALSE, if no such parameter exists.</doc>
        <source-position filename="e-data-server-util.h" line="197"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2467">Whether parameter of given name has stored value of given value.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2457">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2458">name of a parameter to test</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2459">value to test</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="case_sensitively" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2460">whether to compare case sensitively</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string"
              c:identifier="e_named_parameters_to_string"
              version="3.18">
        <source-position filename="e-data-server-util.h" line="196"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2523">Contents of @parameters as a string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2521">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="to_strv"
              c:identifier="e_named_parameters_to_strv"
              version="3.8">
        <source-position filename="e-data-server-util.h" line="195"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2497">Contents of @parameters as a null-terminated strv</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="parameters" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2495">an #ENamedParameters</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <class name="NetworkMonitor"
           c:symbol-prefix="network_monitor"
           c:type="ENetworkMonitor"
           version="3.22"
           parent="GObject.Object"
           glib:type-name="ENetworkMonitor"
           glib:get-type="e_network_monitor_get_type"
           glib:type-struct="NetworkMonitorClass">
      <doc xml:space="preserve"
           filename="e-network-monitor.h"
           line="62">Contains only private data that should be read and manipulated using
the functions below. Implements #GNetworkMonitorInterface.</doc>
      <source-position filename="e-network-monitor.h" line="78"/>
      <implements name="Gio.Initable"/>
      <implements name="Gio.NetworkMonitor"/>
      <function name="get_default"
                c:identifier="e_network_monitor_get_default"
                version="3.22">
        <doc xml:space="preserve"
             filename="e-network-monitor.c"
             line="468">Gets the default #ENetworkMonitor. The caller should not unref the returned instance.
The #ENetworkMonitor implements the #GNetworkMonitor iterface.</doc>
        <source-position filename="e-network-monitor.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-network-monitor.c"
               line="474">The default #ENetworkMonitor instance.</doc>
          <type name="Gio.NetworkMonitor" c:type="GNetworkMonitor*"/>
        </return-value>
      </function>
      <method name="dup_gio_name"
              c:identifier="e_network_monitor_dup_gio_name"
              version="3.22">
        <doc xml:space="preserve"
             filename="e-network-monitor.c"
             line="532">Get currently set GIO name for the network availability checks.
See e_network_monitor_set_gio_name() for more details.</doc>
        <source-position filename="e-network-monitor.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-network-monitor.c"
               line="539">A newly allocated string, a GIO name
  of the underlying GNetworkMonitor which is set to be used.
  The returned string should be freed with g_free(), when
  no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="network_monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-network-monitor.c"
                 line="534">an #ENetworkMonitor</doc>
            <type name="NetworkMonitor" c:type="ENetworkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_gio_names"
              c:identifier="e_network_monitor_list_gio_names"
              version="3.22">
        <doc xml:space="preserve"
             filename="e-network-monitor.c"
             line="492">Get a list of available GIO names for the #GNetworkMonitor implementations.
The strings can be used in e_network_monitor_set_gio_name().</doc>
        <source-position filename="e-network-monitor.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-network-monitor.c"
               line="499">A newly allocated #GSList,
  with newly allocated strings, the GIO names. The #GSList should be freed
  with g_slist_free_full (gio_names, g_free); when no longer needed.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="network_monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-network-monitor.c"
                 line="494">an #ENetworkMonitor</doc>
            <type name="NetworkMonitor" c:type="ENetworkMonitor*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gio_name"
              c:identifier="e_network_monitor_set_gio_name"
              version="3.22">
        <doc xml:space="preserve"
             filename="e-network-monitor.c"
             line="560">Set a @gio_name of the #GNetworkMonitor implementation to use, can be %NULL.
Use e_network_monitor_list_gio_names() for a list of available
implementations. A special value, %E_NETWORK_MONITOR_ALWAYS_ONLINE_NAME, can
be used to report the network as always reachable. When an unknown GIO
name is used the default #GNetworkMonitor implementation, as returned
by the g_network_monitor_get_default(), will be used.</doc>
        <source-position filename="e-network-monitor.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="network_monitor" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-network-monitor.c"
                 line="562">an #ENetworkMonitor</doc>
            <type name="NetworkMonitor" c:type="ENetworkMonitor*"/>
          </instance-parameter>
          <parameter name="gio_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-network-monitor.c"
                 line="563">a GIO name of a #GNetworkMonitor implementation to use, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="gio-name" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-network-monitor.c"
             line="301">The GIO name of the underlying #GNetworkMonitor to use.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="NetworkMonitorPrivate" c:type="ENetworkMonitorPrivate*"/>
      </field>
    </class>
    <record name="NetworkMonitorClass"
            c:type="ENetworkMonitorClass"
            glib:is-gtype-struct-for="NetworkMonitor">
      <source-position filename="e-network-monitor.h" line="78"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="NetworkMonitorPrivate"
            c:type="ENetworkMonitorPrivate"
            disguised="1">
      <source-position filename="e-network-monitor.h" line="49"/>
    </record>
    <constant name="OAUTH2_SECRET_ACCESS_TOKEN"
              value="access_token"
              c:type="E_OAUTH2_SECRET_ACCESS_TOKEN">
      <source-position filename="e-oauth2-service.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OAUTH2_SECRET_EXPIRES_AFTER"
              value="expires_after"
              c:type="E_OAUTH2_SECRET_EXPIRES_AFTER">
      <source-position filename="e-oauth2-service.h" line="45"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="OAUTH2_SECRET_REFRESH_TOKEN"
              value="refresh_token"
              c:type="E_OAUTH2_SECRET_REFRESH_TOKEN">
      <source-position filename="e-oauth2-service.h" line="43"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="OAUTH2_SERVICE"
                    c:identifier="E_OAUTH2_SERVICE"
                    introspectable="0">
      <source-position filename="e-oauth2-service.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICES"
                    c:identifier="E_OAUTH2_SERVICES"
                    introspectable="0">
      <source-position filename="e-oauth2-services.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICES_CLASS"
                    c:identifier="E_OAUTH2_SERVICES_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-services.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICES_GET_CLASS"
                    c:identifier="E_OAUTH2_SERVICES_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-services.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_BASE"
                    c:identifier="E_OAUTH2_SERVICE_BASE"
                    introspectable="0">
      <source-position filename="e-oauth2-service-base.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_BASE_CLASS"
                    c:identifier="E_OAUTH2_SERVICE_BASE_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-base.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_BASE_GET_CLASS"
                    c:identifier="E_OAUTH2_SERVICE_BASE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-base.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_GET_INTERFACE"
                    c:identifier="E_OAUTH2_SERVICE_GET_INTERFACE"
                    introspectable="0">
      <source-position filename="e-oauth2-service.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_GOOGLE"
                    c:identifier="E_OAUTH2_SERVICE_GOOGLE"
                    introspectable="0">
      <source-position filename="e-oauth2-service-google.h" line="28"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_GOOGLE_CLASS"
                    c:identifier="E_OAUTH2_SERVICE_GOOGLE_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-google.h" line="31"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_GOOGLE_GET_CLASS"
                    c:identifier="E_OAUTH2_SERVICE_GOOGLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-google.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_OUTLOOK"
                    c:identifier="E_OAUTH2_SERVICE_OUTLOOK"
                    introspectable="0">
      <source-position filename="e-oauth2-service-outlook.h" line="28"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_OUTLOOK_CLASS"
                    c:identifier="E_OAUTH2_SERVICE_OUTLOOK_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-outlook.h" line="31"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="OAUTH2_SERVICE_OUTLOOK_GET_CLASS"
                    c:identifier="E_OAUTH2_SERVICE_OUTLOOK_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-oauth2-service-outlook.h" line="40"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <interface name="OAuth2Service"
               c:symbol-prefix="oauth2_service"
               c:type="EOAuth2Service"
               version="3.28"
               glib:type-name="EOAuth2Service"
               glib:get-type="e_oauth2_service_get_type"
               glib:type-struct="OAuth2ServiceInterface">
      <doc xml:space="preserve"
           filename="e-oauth2-service.c"
           line="18">An interface for an OAuth2 service. Any descendant might be defined
as an extension of #EOAuth2Services and it should add itself into it
with e_oauth2_services_add(). To make it easier, an #EOAuth2ServiceBase
is provided for convenience.</doc>
      <source-position filename="e-oauth2-service.h" line="162"/>
      <function name="util_set_to_form"
                c:identifier="e_oauth2_service_util_set_to_form"
                version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="1544">Sets @value for @name to @form. The @form should be
the one used in e_oauth2_service_prepare_authentication_uri_query(),
e_oauth2_service_prepare_get_token_form() or
e_oauth2_service_prepare_refresh_token_form().

If the @value is %NULL, then the property named @name is removed
from the @form instead.</doc>
        <source-position filename="e-oauth2-service.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1546">a #GHashTable</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1547">a property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1548">a property value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_take_to_form"
                c:identifier="e_oauth2_service_util_take_to_form"
                version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="1574">Takes ownership of @value and sets it for @name to @form. The @value
will be freed with g_free(), when no longer needed. The @form should be
the one used in e_oauth2_service_prepare_authentication_uri_query(),
e_oauth2_service_prepare_get_token_form() or
e_oauth2_service_prepare_refresh_token_form().

If the @value is %NULL, then the property named @name is removed
from the @form instead.</doc>
        <source-position filename="e-oauth2-service.h" line="249"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1576">a #GHashTable</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1577">a property name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1578">a property value</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="can_process" invoker="can_process" version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="232">Checks whether the @service can be used with the given @source.

The default implementation checks whether the @source has an #ESourceAuthentication
extension and when its method matches e_oauth2_service_get_name(), then it automatically
returns %TRUE. Contrary, when the @source contains GNOME Online Accounts or Ubuntu
Online Accounts extension, then it returns %FALSE.

The default implementation is tried always as the first and when it fails, then
the descendant's implementation is called.</doc>
        <source-position filename="e-oauth2-service.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="247">Whether the @service can be used for the given @source</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="234">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="235">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="extract_authorization_code"
                      invoker="extract_authorization_code"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="596">Tries to extract an authorization code from a web page provided by the server.
The function can be called multiple times, whenever the page load is finished.

There can happen three states: 1) either the @service cannot determine
the authentication code from the page information, then the %FALSE is
returned and the @out_authorization_code is left untouched; or 2) the server
reported a failure, in which case the function returns %TRUE and lefts
the @out_authorization_code untouched; or 3) the @service could extract
the authentication code from the given arguments, then the function
returns %TRUE and sets the received authorization code to @out_authorization_code.

The @page_content is %NULL, unless flags returned by e_oauth2_service_get_flags()
contain also %E_OAUTH2_SERVICE_FLAG_EXTRACT_REQUIRES_PAGE_CONTENT.

This method is always called after e_oauth2_service_get_authentication_policy().</doc>
        <source-position filename="e-oauth2-service.h" line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="621">whether could recognized successful or failed server response.
   The @out_authorization_code is populated on success too.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="598">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="599">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="page_title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="600">a web page title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="601">a web page URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="page_content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="602">a web page content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_authorization_code"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="603">the extracted authorization code</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_authentication_policy"
                      invoker="get_authentication_policy"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="560">Used to decide what to do when the server redirects to the next page.
The default implementation always returns %E_OAUTH2_SERVICE_NAVIGATION_POLICY_ALLOW.

This method is called before e_oauth2_service_extract_authorization_code() and
can be used to block certain resources or to abort the authentication when
the server redirects to an unexpected page (like when user denies authorization
in the page).</doc>
        <source-position filename="e-oauth2-service.h" line="135"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="574">one of #EOAuth2ServiceNavigationPolicy</doc>
          <type name="OAuth2ServiceNavigationPolicy"
                c:type="EOAuth2ServiceNavigationPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="562">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="563">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="564">a URI of the navigation resource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_authentication_uri"
                      invoker="get_authentication_uri"
                      version="3.28">
        <source-position filename="e-oauth2-service.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="447">an authentication URI, to be used to obtain
   the authentication code</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="444">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="445">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_client_id"
                      invoker="get_client_id"
                      version="3.28">
        <source-position filename="e-oauth2-service.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="397">application client ID, as provided by the server</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="394">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="395">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_client_secret"
                      invoker="get_client_secret"
                      version="3.28">
        <source-position filename="e-oauth2-service.h" line="122"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="422">application client secret, as provided by the server, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="419">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="420">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_display_name"
                      invoker="get_display_name"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="366">Returns a human readable name of the service. This is similar to
e_oauth2_service_get_name(), except this string should be localized,
because it will be used in user-visible strings.</doc>
        <source-position filename="e-oauth2-service.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="374">the display name of the @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="368">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_flags" invoker="get_flags" version="3.28">
        <source-position filename="e-oauth2-service.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="321">bit-or of #EOAuth2ServiceFlags for the @service. The default
   implementation returns %E_OAUTH2_SERVICE_FLAG_NONE.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="319">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_name" invoker="get_name" version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="340">Returns a unique name of the service. It can be named for example
by the server or the company from which it receives the OAuth2
token and where it refreshes it, like "Company" for login.company.com.</doc>
        <source-position filename="e-oauth2-service.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="348">the name of the @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="342">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_redirect_uri"
                      invoker="get_redirect_uri"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="493">Returns a value for the "redirect_uri" keys in the authenticate and get_token
operations. The default implementation returns "urn:ietf:wg:oauth:2.0:oob".</doc>
        <source-position filename="e-oauth2-service.h" line="128"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="501">The redirect_uri to use, or %NULL for none</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="495">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="496">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_refresh_uri"
                      invoker="get_refresh_uri"
                      version="3.28">
        <source-position filename="e-oauth2-service.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="473">a URI to be used to refresh the authentication token</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="470">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="471">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="guess_can_process"
                      invoker="guess_can_process"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="271">Checks whether the @service can be used with the given @protocol and/or @hostname.
Any of @protocol and @hostname can be %NULL, but not both. It's up to each implementer
to decide, which of the arguments are important and whether all or only any of them
can be required.

The function is meant to check whether the @service can be offered
for example when configuring a new account. The real usage is
determined by e_oauth2_service_can_process().

The default implementation consults org.gnome.evolution-data-server.oauth2-services-hint
GSettings key against given hostname. See its description for more information.

The default implementation is tried always as the first and when it fails, then
the descendant's implementation is called.</doc>
        <source-position filename="e-oauth2-service.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="292">Whether the @service can be used for the given arguments</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="273">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="protocol"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="274">a protocol to search the service for, like "imap", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="275">a host name to search the service for, like "server.example.com", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_authentication_uri_query"
                      invoker="prepare_authentication_uri_query"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="521">The @service can change what arguments are passed in the authentication URI
in this method. The default implementation sets some values too, namely
"response_type", "client_id", "redirect_uri" and "login_hint", if available
in the @source. These parameters are always provided, even when the interface
implementer overrides this method.

The @uri_query hash table expects both key and value to be newly allocated
strings, which will be freed together with the hash table or when the key
is replaced.</doc>
        <source-position filename="e-oauth2-service.h" line="130"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="523">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="524">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="uri_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="525">query for the URI to use</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_get_token_form"
                      invoker="prepare_get_token_form"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="646">Sets additional form parameters to be used in the POST request when requesting
access token after successfully obtained authorization code.
The default implementation sets some values too, namely
"code", "client_id", "client_secret", "redirect_uri" and "grant_type".
These parameters are always provided, even when the interface implementer overrides this method.

The @form hash table expects both key and value to be newly allocated
strings, which will be freed together with the hash table or when the key
is replaced.</doc>
        <source-position filename="e-oauth2-service.h" line="144"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="648">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="649">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="authorization_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="650">authorization code, as returned from e_oauth2_service_extract_authorization_code()</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="651">form parameters to be used in the POST request</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_get_token_message"
                      invoker="prepare_get_token_message"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="688">The @service can change the @message before it's sent to
the e_oauth2_service_get_authentication_uri(), with POST data
being provided by e_oauth2_service_prepare_get_token_form().
The default implementation does nothing with the @message.</doc>
        <source-position filename="e-oauth2-service.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="690">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="691">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="692">a #SoupMessage</doc>
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_refresh_token_form"
                      invoker="prepare_refresh_token_form"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="719">Sets additional form parameters to be used in the POST request when requesting
to refresh an access token.
The default implementation sets some values too, namely
"refresh_token", "client_id", "client_secret" and "grant_type".
These parameters are always provided, even when the interface implementer overrides this method.

The @form hash table expects both key and value to be newly allocated
strings, which will be freed together with the hash table or when the key
is replaced.</doc>
        <source-position filename="e-oauth2-service.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="721">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="722">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="refresh_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="723">a refresh token to be used</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="724">form parameters to be used in the POST request</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare_refresh_token_message"
                      invoker="prepare_refresh_token_message"
                      version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="761">The @service can change the @message before it's sent to
the e_oauth2_service_get_refresh_uri(), with POST data
being provided by e_oauth2_service_prepare_refresh_token_form().
The default implementation does nothing with the @message.</doc>
        <source-position filename="e-oauth2-service.h" line="155"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="763">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="764">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="765">a #SoupMessage</doc>
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_process"
              c:identifier="e_oauth2_service_can_process"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="232">Checks whether the @service can be used with the given @source.

The default implementation checks whether the @source has an #ESourceAuthentication
extension and when its method matches e_oauth2_service_get_name(), then it automatically
returns %TRUE. Contrary, when the @source contains GNOME Online Accounts or Ubuntu
Online Accounts extension, then it returns %FALSE.

The default implementation is tried always as the first and when it fails, then
the descendant's implementation is called.</doc>
        <source-position filename="e-oauth2-service.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="247">Whether the @service can be used for the given @source</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="234">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="235">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_token_sync"
              c:identifier="e_oauth2_service_delete_token_sync"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="1436">Deletes token information for the @service and @source from the secret store.</doc>
        <source-position filename="e-oauth2-service.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1445">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1438">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1439">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1440">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="extract_authorization_code"
              c:identifier="e_oauth2_service_extract_authorization_code"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="596">Tries to extract an authorization code from a web page provided by the server.
The function can be called multiple times, whenever the page load is finished.

There can happen three states: 1) either the @service cannot determine
the authentication code from the page information, then the %FALSE is
returned and the @out_authorization_code is left untouched; or 2) the server
reported a failure, in which case the function returns %TRUE and lefts
the @out_authorization_code untouched; or 3) the @service could extract
the authentication code from the given arguments, then the function
returns %TRUE and sets the received authorization code to @out_authorization_code.

The @page_content is %NULL, unless flags returned by e_oauth2_service_get_flags()
contain also %E_OAUTH2_SERVICE_FLAG_EXTRACT_REQUIRES_PAGE_CONTENT.

This method is always called after e_oauth2_service_get_authentication_policy().</doc>
        <source-position filename="e-oauth2-service.h" line="192"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="621">whether could recognized successful or failed server response.
   The @out_authorization_code is populated on success too.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="598">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="599">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="page_title" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="600">a web page title</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="page_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="601">a web page URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="page_content"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="602">a web page content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_authorization_code"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="603">the extracted authorization code</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_access_token_sync"
              c:identifier="e_oauth2_service_get_access_token_sync"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="1477">Reads access token information from the secret store for the @source and
in case it's expired it refreshes the token, if possible.

Free the returned @out_access_token with g_free(), when no longer needed.</doc>
        <source-position filename="e-oauth2-service.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1493">%TRUE, when the returned access token has been set and it's not expired,
   %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1479">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1480">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="ref_source"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1481">an #EOAuth2ServiceRefSourceFunc function to obtain an #ESource</doc>
            <type name="OAuth2ServiceRefSourceFunc"
                  c:type="EOAuth2ServiceRefSourceFunc"/>
          </parameter>
          <parameter name="ref_source_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1482">user data for @ref_source</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1483">return location for the access token</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1484">how many seconds the access token expires in</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1485">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_authentication_policy"
              c:identifier="e_oauth2_service_get_authentication_policy"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="560">Used to decide what to do when the server redirects to the next page.
The default implementation always returns %E_OAUTH2_SERVICE_NAVIGATION_POLICY_ALLOW.

This method is called before e_oauth2_service_extract_authorization_code() and
can be used to block certain resources or to abort the authentication when
the server redirects to an unexpected page (like when user denies authorization
in the page).</doc>
        <source-position filename="e-oauth2-service.h" line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="574">one of #EOAuth2ServiceNavigationPolicy</doc>
          <type name="OAuth2ServiceNavigationPolicy"
                c:type="EOAuth2ServiceNavigationPolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="562">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="563">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="564">a URI of the navigation resource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_authentication_uri"
              c:identifier="e_oauth2_service_get_authentication_uri"
              version="3.28">
        <source-position filename="e-oauth2-service.h" line="177"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="447">an authentication URI, to be used to obtain
   the authentication code</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="444">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="445">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_client_id"
              c:identifier="e_oauth2_service_get_client_id"
              version="3.28">
        <source-position filename="e-oauth2-service.h" line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="397">application client ID, as provided by the server</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="394">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="395">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_client_secret"
              c:identifier="e_oauth2_service_get_client_secret"
              version="3.28">
        <source-position filename="e-oauth2-service.h" line="175"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="422">application client secret, as provided by the server, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="419">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="420">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="e_oauth2_service_get_display_name"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="366">Returns a human readable name of the service. This is similar to
e_oauth2_service_get_name(), except this string should be localized,
because it will be used in user-visible strings.</doc>
        <source-position filename="e-oauth2-service.h" line="172"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="374">the display name of the @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="368">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_flags"
              c:identifier="e_oauth2_service_get_flags"
              version="3.28">
        <source-position filename="e-oauth2-service.h" line="170"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="321">bit-or of #EOAuth2ServiceFlags for the @service. The default
   implementation returns %E_OAUTH2_SERVICE_FLAG_NONE.</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="319">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="e_oauth2_service_get_name"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="340">Returns a unique name of the service. It can be named for example
by the server or the company from which it receives the OAuth2
token and where it refreshes it, like "Company" for login.company.com.</doc>
        <source-position filename="e-oauth2-service.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="348">the name of the @service</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="342">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_redirect_uri"
              c:identifier="e_oauth2_service_get_redirect_uri"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="493">Returns a value for the "redirect_uri" keys in the authenticate and get_token
operations. The default implementation returns "urn:ietf:wg:oauth:2.0:oob".</doc>
        <source-position filename="e-oauth2-service.h" line="181"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="501">The redirect_uri to use, or %NULL for none</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="495">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="496">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_refresh_uri"
              c:identifier="e_oauth2_service_get_refresh_uri"
              version="3.28">
        <source-position filename="e-oauth2-service.h" line="179"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="473">a URI to be used to refresh the authentication token</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="470">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="471">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="guess_can_process"
              c:identifier="e_oauth2_service_guess_can_process"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="271">Checks whether the @service can be used with the given @protocol and/or @hostname.
Any of @protocol and @hostname can be %NULL, but not both. It's up to each implementer
to decide, which of the arguments are important and whether all or only any of them
can be required.

The function is meant to check whether the @service can be offered
for example when configuring a new account. The real usage is
determined by e_oauth2_service_can_process().

The default implementation consults org.gnome.evolution-data-server.oauth2-services-hint
GSettings key against given hostname. See its description for more information.

The default implementation is tried always as the first and when it fails, then
the descendant's implementation is called.</doc>
        <source-position filename="e-oauth2-service.h" line="167"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="292">Whether the @service can be used for the given arguments</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="273">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="protocol"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="274">a protocol to search the service for, like "imap", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="275">a host name to search the service for, like "server.example.com", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_authentication_uri_query"
              c:identifier="e_oauth2_service_prepare_authentication_uri_query"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="521">The @service can change what arguments are passed in the authentication URI
in this method. The default implementation sets some values too, namely
"response_type", "client_id", "redirect_uri" and "login_hint", if available
in the @source. These parameters are always provided, even when the interface
implementer overrides this method.

The @uri_query hash table expects both key and value to be newly allocated
strings, which will be freed together with the hash table or when the key
is replaced.</doc>
        <source-position filename="e-oauth2-service.h" line="183"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="523">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="524">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="uri_query" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="525">query for the URI to use</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_get_token_form"
              c:identifier="e_oauth2_service_prepare_get_token_form"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="646">Sets additional form parameters to be used in the POST request when requesting
access token after successfully obtained authorization code.
The default implementation sets some values too, namely
"code", "client_id", "client_secret", "redirect_uri" and "grant_type".
These parameters are always provided, even when the interface implementer overrides this method.

The @form hash table expects both key and value to be newly allocated
strings, which will be freed together with the hash table or when the key
is replaced.</doc>
        <source-position filename="e-oauth2-service.h" line="199"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="648">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="649">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="authorization_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="650">authorization code, as returned from e_oauth2_service_extract_authorization_code()</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="651">form parameters to be used in the POST request</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_get_token_message"
              c:identifier="e_oauth2_service_prepare_get_token_message"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="688">The @service can change the @message before it's sent to
the e_oauth2_service_get_authentication_uri(), with POST data
being provided by e_oauth2_service_prepare_get_token_form().
The default implementation does nothing with the @message.</doc>
        <source-position filename="e-oauth2-service.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="690">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="691">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="692">a #SoupMessage</doc>
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_refresh_token_form"
              c:identifier="e_oauth2_service_prepare_refresh_token_form"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="719">Sets additional form parameters to be used in the POST request when requesting
to refresh an access token.
The default implementation sets some values too, namely
"refresh_token", "client_id", "client_secret" and "grant_type".
These parameters are always provided, even when the interface implementer overrides this method.

The @form hash table expects both key and value to be newly allocated
strings, which will be freed together with the hash table or when the key
is replaced.</doc>
        <source-position filename="e-oauth2-service.h" line="207"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="721">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="722">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="refresh_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="723">a refresh token to be used</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="form" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="724">form parameters to be used in the POST request</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="utf8"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="prepare_refresh_token_message"
              c:identifier="e_oauth2_service_prepare_refresh_token_message"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="761">The @service can change the @message before it's sent to
the e_oauth2_service_get_refresh_uri(), with POST data
being provided by e_oauth2_service_prepare_refresh_token_form().
The default implementation does nothing with the @message.</doc>
        <source-position filename="e-oauth2-service.h" line="212"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="763">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="764">an associated #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="message" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="765">a #SoupMessage</doc>
            <type name="Soup.Message" c:type="SoupMessage*"/>
          </parameter>
        </parameters>
      </method>
      <method name="receive_and_store_token_sync"
              c:identifier="e_oauth2_service_receive_and_store_token_sync"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="1251">Queries @service at e_oauth2_service_get_refresh_uri() with a request to obtain
a new access token, associated with the given @authorization_code and stores
it into the secret store on success.</doc>
        <source-position filename="e-oauth2-service.h" line="217"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1265">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1253">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1254">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="authorization_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1255">authorization code provided by the server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ref_source"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1256">an #EOAuth2ServiceRefSourceFunc function to obtain an #ESource</doc>
            <type name="OAuth2ServiceRefSourceFunc"
                  c:type="EOAuth2ServiceRefSourceFunc"/>
          </parameter>
          <parameter name="ref_source_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1257">user data for @ref_source</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1258">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_and_store_token_sync"
              c:identifier="e_oauth2_service_refresh_and_store_token_sync"
              version="3.28"
              throws="1">
        <doc xml:space="preserve"
             filename="e-oauth2-service.c"
             line="1340">Queries @service at e_oauth2_service_get_refresh_uri() with a request to refresh
existing access token with provided @refresh_token and stores it into the secret
store on success.</doc>
        <source-position filename="e-oauth2-service.h" line="225"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1354">whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1342">an #EOAuth2Service</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1343">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="refresh_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1344">refresh token as provided by the server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ref_source"
                     transfer-ownership="none"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1345">an #EOAuth2ServiceRefSourceFunc function to obtain an #ESource</doc>
            <type name="OAuth2ServiceRefSourceFunc"
                  c:type="EOAuth2ServiceRefSourceFunc"/>
          </parameter>
          <parameter name="ref_source_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1346">user data for @ref_source</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="1347">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <class name="OAuth2ServiceBase"
           c:symbol-prefix="oauth2_service_base"
           c:type="EOAuth2ServiceBase"
           parent="Extension"
           abstract="1"
           glib:type-name="EOAuth2ServiceBase"
           glib:get-type="e_oauth2_service_base_get_type"
           glib:type-struct="OAuth2ServiceBaseClass">
      <doc xml:space="preserve"
           filename="e-oauth2-service-base.c"
           line="17">An abstract base class, which can be used by any #EOAuth2Service
implementation. It registers itself to #EOAuth2Services at the end
of its constructed method. The descendant implements the #EOAuth2ServiceInterface.</doc>
      <source-position filename="e-oauth2-service-base.h" line="57"/>
      <field name="parent">
        <type name="Extension" c:type="EExtension"/>
      </field>
    </class>
    <record name="OAuth2ServiceBaseClass"
            c:type="EOAuth2ServiceBaseClass"
            glib:is-gtype-struct-for="OAuth2ServiceBase">
      <source-position filename="e-oauth2-service-base.h" line="57"/>
      <field name="parent_class">
        <type name="ExtensionClass" c:type="EExtensionClass"/>
      </field>
    </record>
    <bitfield name="OAuth2ServiceFlags"
              version="3.28"
              c:type="EOAuth2ServiceFlags">
      <doc xml:space="preserve"
           filename="e-oauth2-service.h"
           line="50">Flags of the OAuth2 service.</doc>
      <source-position filename="e-oauth2-service.h" line="63"/>
      <member name="none" value="0" c:identifier="E_OAUTH2_SERVICE_FLAG_NONE">
        <doc xml:space="preserve"
             filename="e-oauth2-service.h"
             line="52">No flag set</doc>
      </member>
      <member name="extract_requires_page_content"
              value="2"
              c:identifier="E_OAUTH2_SERVICE_FLAG_EXTRACT_REQUIRES_PAGE_CONTENT">
        <doc xml:space="preserve"
             filename="e-oauth2-service.h"
             line="53">the service requires also page
   content to be passed to e_oauth2_service_extract_authorization_code()</doc>
      </member>
    </bitfield>
    <class name="OAuth2ServiceGoogle"
           c:symbol-prefix="oauth2_service_google"
           c:type="EOAuth2ServiceGoogle"
           parent="OAuth2ServiceBase"
           glib:type-name="EOAuth2ServiceGoogle"
           glib:get-type="e_oauth2_service_google_get_type"
           glib:type-struct="OAuth2ServiceGoogleClass">
      <source-position filename="e-oauth2-service-google.h" line="56"/>
      <implements name="OAuth2Service"/>
      <field name="parent">
        <type name="OAuth2ServiceBase" c:type="EOAuth2ServiceBase"/>
      </field>
    </class>
    <record name="OAuth2ServiceGoogleClass"
            c:type="EOAuth2ServiceGoogleClass"
            glib:is-gtype-struct-for="OAuth2ServiceGoogle">
      <source-position filename="e-oauth2-service-google.h" line="56"/>
      <field name="parent_class">
        <type name="OAuth2ServiceBaseClass" c:type="EOAuth2ServiceBaseClass"/>
      </field>
    </record>
    <record name="OAuth2ServiceInterface"
            c:type="EOAuth2ServiceInterface"
            glib:is-gtype-struct-for="OAuth2Service">
      <source-position filename="e-oauth2-service.h" line="162"/>
      <field name="parent_interface">
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="can_process">
        <callback name="can_process">
          <source-position filename="e-oauth2-service.h" line="112"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="247">Whether the @service can be used for the given @source</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="234">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="235">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="guess_can_process">
        <callback name="guess_can_process">
          <source-position filename="e-oauth2-service.h" line="114"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="292">Whether the @service can be used for the given arguments</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="273">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="protocol"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="274">a protocol to search the service for, like "imap", or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="hostname"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="275">a host name to search the service for, like "server.example.com", or %NULL</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_flags">
        <callback name="get_flags">
          <source-position filename="e-oauth2-service.h" line="117"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="321">bit-or of #EOAuth2ServiceFlags for the @service. The default
   implementation returns %E_OAUTH2_SERVICE_FLAG_NONE.</doc>
            <type name="guint32" c:type="guint32"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="319">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_name">
        <callback name="get_name">
          <source-position filename="e-oauth2-service.h" line="118"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="348">the name of the @service</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="342">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_display_name">
        <callback name="get_display_name">
          <source-position filename="e-oauth2-service.h" line="119"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="374">the display name of the @service</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="368">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_client_id">
        <callback name="get_client_id">
          <source-position filename="e-oauth2-service.h" line="120"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="397">application client ID, as provided by the server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="394">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="395">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_client_secret">
        <callback name="get_client_secret">
          <source-position filename="e-oauth2-service.h" line="122"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="422">application client secret, as provided by the server, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="419">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="420">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_authentication_uri">
        <callback name="get_authentication_uri">
          <source-position filename="e-oauth2-service.h" line="124"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="447">an authentication URI, to be used to obtain
   the authentication code</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="444">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="445">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_refresh_uri">
        <callback name="get_refresh_uri">
          <source-position filename="e-oauth2-service.h" line="126"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="473">a URI to be used to refresh the authentication token</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="470">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="471">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_redirect_uri">
        <callback name="get_redirect_uri">
          <source-position filename="e-oauth2-service.h" line="128"/>
          <return-value transfer-ownership="none" nullable="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="501">The redirect_uri to use, or %NULL for none</doc>
            <type name="utf8" c:type="const gchar*"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="495">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="496">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_authentication_uri_query">
        <callback name="prepare_authentication_uri_query">
          <source-position filename="e-oauth2-service.h" line="130"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="523">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="524">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="uri_query" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="525">query for the URI to use</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="utf8"/>
                <type name="utf8"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_authentication_policy">
        <callback name="get_authentication_policy">
          <source-position filename="e-oauth2-service.h" line="135"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="574">one of #EOAuth2ServiceNavigationPolicy</doc>
            <type name="OAuth2ServiceNavigationPolicy"
                  c:type="EOAuth2ServiceNavigationPolicy"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="562">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="563">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="564">a URI of the navigation resource</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="extract_authorization_code">
        <callback name="extract_authorization_code">
          <source-position filename="e-oauth2-service.h" line="138"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-service.c"
                 line="621">whether could recognized successful or failed server response.
   The @out_authorization_code is populated on success too.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="598">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="599">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="page_title" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="600">a web page title</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="page_uri" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="601">a web page URI</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="page_content"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="602">a web page content</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="out_authorization_code"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="603">the extracted authorization code</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_get_token_form">
        <callback name="prepare_get_token_form">
          <source-position filename="e-oauth2-service.h" line="144"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="648">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="649">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="authorization_code" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="650">authorization code, as returned from e_oauth2_service_extract_authorization_code()</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="form" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="651">form parameters to be used in the POST request</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="utf8"/>
                <type name="utf8"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_get_token_message">
        <callback name="prepare_get_token_message">
          <source-position filename="e-oauth2-service.h" line="148"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="690">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="691">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="692">a #SoupMessage</doc>
              <type name="Soup.Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_refresh_token_form">
        <callback name="prepare_refresh_token_form">
          <source-position filename="e-oauth2-service.h" line="151"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="721">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="722">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="refresh_token" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="723">a refresh token to be used</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="form" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="724">form parameters to be used in the POST request</doc>
              <type name="GLib.HashTable" c:type="GHashTable*">
                <type name="utf8"/>
                <type name="utf8"/>
              </type>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="prepare_refresh_token_message">
        <callback name="prepare_refresh_token_message">
          <source-position filename="e-oauth2-service.h" line="155"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="763">an #EOAuth2Service</doc>
              <type name="OAuth2Service" c:type="EOAuth2Service*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="764">an associated #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="message" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-oauth2-service.c"
                   line="765">a #SoupMessage</doc>
              <type name="Soup.Message" c:type="SoupMessage*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="OAuth2ServiceNavigationPolicy"
                 version="3.28"
                 c:type="EOAuth2ServiceNavigationPolicy">
      <doc xml:space="preserve"
           filename="e-oauth2-service.h"
           line="65">A value used during querying authentication URI, to decide whether certain
resource can be used or not. The @E_OAUTH2_SERVICE_NAVIGATION_POLICY_ABORT
can be used to abort the authentication query, like when user cancelled it.</doc>
      <source-position filename="e-oauth2-service.h" line="81"/>
      <member name="deny"
              value="0"
              c:identifier="E_OAUTH2_SERVICE_NAVIGATION_POLICY_DENY">
        <doc xml:space="preserve"
             filename="e-oauth2-service.h"
             line="67">Deny navigation to the given web resource</doc>
      </member>
      <member name="allow"
              value="1"
              c:identifier="E_OAUTH2_SERVICE_NAVIGATION_POLICY_ALLOW">
        <doc xml:space="preserve"
             filename="e-oauth2-service.h"
             line="68">Allow navigation to the given web resource</doc>
      </member>
      <member name="abort"
              value="2"
              c:identifier="E_OAUTH2_SERVICE_NAVIGATION_POLICY_ABORT">
        <doc xml:space="preserve"
             filename="e-oauth2-service.h"
             line="69">Abort authentication processing</doc>
      </member>
    </enumeration>
    <class name="OAuth2ServiceOutlook"
           c:symbol-prefix="oauth2_service_outlook"
           c:type="EOAuth2ServiceOutlook"
           parent="OAuth2ServiceBase"
           glib:type-name="EOAuth2ServiceOutlook"
           glib:get-type="e_oauth2_service_outlook_get_type"
           glib:type-struct="OAuth2ServiceOutlookClass">
      <source-position filename="e-oauth2-service-outlook.h" line="56"/>
      <implements name="OAuth2Service"/>
      <field name="parent">
        <type name="OAuth2ServiceBase" c:type="EOAuth2ServiceBase"/>
      </field>
    </class>
    <record name="OAuth2ServiceOutlookClass"
            c:type="EOAuth2ServiceOutlookClass"
            glib:is-gtype-struct-for="OAuth2ServiceOutlook">
      <source-position filename="e-oauth2-service-outlook.h" line="56"/>
      <field name="parent_class">
        <type name="OAuth2ServiceBaseClass" c:type="EOAuth2ServiceBaseClass"/>
      </field>
    </record>
    <callback name="OAuth2ServiceRefSourceFunc"
              c:type="EOAuth2ServiceRefSourceFunc"
              version="3.28">
      <source-position filename="e-oauth2-service.h" line="95"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-oauth2-service.h"
             line="90">an #ESource with UID @uid, or %NULL, if not found.
   Dereference the returned non-NULL #ESource with g_object_unref(), when no longer needed.</doc>
        <type name="Source" c:type="ESource*"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="e-oauth2-service.h"
               line="85">user data, as passed to e_oauth2_service_get_access_token_sync()
   or e_oauth2_service_receive_and_store_token_sync(),
   or e_oauth2_service_refresh_and_store_token_sync()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="uid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.h"
               line="88">an #ESource UID to return</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <class name="OAuth2Services"
           c:symbol-prefix="oauth2_services"
           c:type="EOAuth2Services"
           version="3.28"
           parent="GObject.Object"
           glib:type-name="EOAuth2Services"
           glib:get-type="e_oauth2_services_get_type"
           glib:type-struct="OAuth2ServicesClass">
      <doc xml:space="preserve"
           filename="e-oauth2-services.c"
           line="18">The extensible object, which holds all known OAuth2 services. Each
#EOAuth2Service extends this object and adds itself to it with
e_oauth2_services_add(). The services can be later searched for
with e_oauth2_services_find(), which returns the service suitable
for the given protocol and/or host name.</doc>
      <source-position filename="e-oauth2-services.h" line="73"/>
      <implements name="Extensible"/>
      <constructor name="new"
                   c:identifier="e_oauth2_services_new"
                   version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="167">Creates a new #EOAuth2Services instance.</doc>
        <source-position filename="e-oauth2-services.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="172">an #EOAuth2Services</doc>
          <type name="OAuth2Services" c:type="EOAuth2Services*"/>
        </return-value>
      </constructor>
      <function name="is_oauth2_alias_static"
                c:identifier="e_oauth2_services_is_oauth2_alias_static"
                version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="411">This is the same as e_oauth2_services_is_oauth2_alias(), except
it creates its own #EOAuth2Services instance and frees it at the end.
The #EOAuth2Services is implemented as a singleton, thus it won't be
much trouble, as long as there is something else having created one
instance.</doc>
        <source-position filename="e-oauth2-services.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="421">whether exists any #EOAuth2Service, with the same name as @auth_method.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="auth_method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="413">an authentication method, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="is_supported"
                c:identifier="e_oauth2_services_is_supported"
                version="3.28">
        <source-position filename="e-oauth2-services.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="152">%TRUE, when evolution-data-server had been compiled
   with OAuth2 authentication enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <method name="add" c:identifier="e_oauth2_services_add" version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="182">Adds the @service to the list of known OAuth2 services into @services.
It also adds a reference to @service.</doc>
        <source-position filename="e-oauth2-services.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="services" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="184">an #EOAuth2Services</doc>
            <type name="OAuth2Services" c:type="EOAuth2Services*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="185">an #EOAuth2Service to add</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find" c:identifier="e_oauth2_services_find" version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="276">Searches the list of currently known OAuth2 services for the one which
can be used with the given @source.

The returned #EOAuth2Service is referenced for thread safety, if found.</doc>
        <source-position filename="e-oauth2-services.h" line="87"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="286">a referenced #EOAuth2Service, which can be used
   with given @source, or %NULL, when none was found.</doc>
          <type name="OAuth2Service" c:type="EOAuth2Service*"/>
        </return-value>
        <parameters>
          <instance-parameter name="services" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="278">an #EOAuth2Services</doc>
            <type name="OAuth2Services" c:type="EOAuth2Services*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="279">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="guess"
              c:identifier="e_oauth2_services_guess"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="317">Searches the list of currently known OAuth2 services for the one which
can be used with the given @protocol and/or @hostname.
Any of @protocol and @hostname can be %NULL, but not both.
It's up to each #EOAuth2Service to decide, which of the arguments
are important and whether all or only any of them can be required.

The returned #EOAuth2Service is referenced for thread safety, if found.</doc>
        <source-position filename="e-oauth2-services.h" line="90"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="331">a referenced #EOAuth2Service, which can be used
   with given constraints, or %NULL, when none was found.</doc>
          <type name="OAuth2Service" c:type="EOAuth2Service*"/>
        </return-value>
        <parameters>
          <instance-parameter name="services" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="319">an #EOAuth2Services</doc>
            <type name="OAuth2Services" c:type="EOAuth2Services*"/>
          </instance-parameter>
          <parameter name="protocol"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="320">a protocol to search the service for, like "imap", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="hostname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="321">a host name to search the service for, like "server.example.com", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_oauth2_alias"
              c:identifier="e_oauth2_services_is_oauth2_alias"
              version="3.28">
        <source-position filename="e-oauth2-services.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="377">whether exists any #EOAuth2Service, with the same name as @auth_method.

See: e_oauth2_services_is_oauth2_alias_static()</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="services" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="374">an #EOAuth2Services</doc>
            <type name="OAuth2Services" c:type="EOAuth2Services*"/>
          </instance-parameter>
          <parameter name="auth_method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="375">an authentication method, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list" c:identifier="e_oauth2_services_list" version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="246">Lists all currently known services, which had been added
with e_oauth2_services_add(). Free the returned #GSList with
g_slist_remove_full (known_services, g_object_unref);
when no longer needed.</doc>
        <source-position filename="e-oauth2-services.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-oauth2-services.c"
               line="255">a newly allocated #GSList
   with all currently known #EOAuth2Service referenced instances</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="OAuth2Service"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="services" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="248">an #EOAuth2Services</doc>
            <type name="OAuth2Services" c:type="EOAuth2Services*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove"
              c:identifier="e_oauth2_services_remove"
              version="3.28">
        <doc xml:space="preserve"
             filename="e-oauth2-services.c"
             line="214">Removes the @service from the list of known services in @services.
The function does nothing, if the @service had not been added.</doc>
        <source-position filename="e-oauth2-services.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="services" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="216">an #EOAuth2Services</doc>
            <type name="OAuth2Services" c:type="EOAuth2Services*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-oauth2-services.c"
                 line="217">an #EOAuth2Service to remove</doc>
            <type name="OAuth2Service" c:type="EOAuth2Service*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="OAuth2ServicesPrivate" c:type="EOAuth2ServicesPrivate*"/>
      </field>
    </class>
    <record name="OAuth2ServicesClass"
            c:type="EOAuth2ServicesClass"
            glib:is-gtype-struct-for="OAuth2Services">
      <source-position filename="e-oauth2-services.h" line="73"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="OAuth2ServicesPrivate"
            c:type="EOAuth2ServicesPrivate"
            disguised="1">
      <source-position filename="e-oauth2-services.h" line="52"/>
    </record>
    <record name="OperationPool"
            c:type="EOperationPool"
            disguised="1"
            version="3.2">
      <doc xml:space="preserve"
           filename="e-operation-pool.h"
           line="29">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="e-operation-pool.h" line="37"/>
      <method name="free" c:identifier="e_operation_pool_free" version="3.2">
        <doc xml:space="preserve"
             filename="e-operation-pool.c"
             line="71">Frees previously created @pool.</doc>
        <source-position filename="e-operation-pool.h" line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="73">an #EOperationPool</doc>
            <type name="OperationPool" c:type="EOperationPool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="push" c:identifier="e_operation_pool_push" version="3.2">
        <doc xml:space="preserve"
             filename="e-operation-pool.c"
             line="151">Pushes an operation to be processed.  @opdata is passed to the function
provided in e_operation_pool_new().</doc>
        <source-position filename="e-operation-pool.h" line="43"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="153">an #EOperationPool</doc>
            <type name="OperationPool" c:type="EOperationPool*"/>
          </instance-parameter>
          <parameter name="opdata"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="154">user data for the operation</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="release_opid"
              c:identifier="e_operation_pool_release_opid"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-operation-pool.c"
             line="130">Releases @opid previously reserved by e_operation_pool_reserve_opid().</doc>
        <source-position filename="e-operation-pool.h" line="42"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="132">an #EOperationPool</doc>
            <type name="OperationPool" c:type="EOperationPool*"/>
          </instance-parameter>
          <parameter name="opid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="133">an operation ID</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
        </parameters>
      </method>
      <method name="reserve_opid"
              c:identifier="e_operation_pool_reserve_opid"
              version="3.2">
        <doc xml:space="preserve"
             filename="e-operation-pool.c"
             line="90">Reserves new operation ID, which is returned. This operation ID may
be released by e_operation_pool_release_opid() when the operation
is finished.</doc>
        <source-position filename="e-operation-pool.h" line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-operation-pool.c"
               line="98">a new operation ID</doc>
          <type name="guint32" c:type="guint32"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="92">an #EOperationPool</doc>
            <type name="OperationPool" c:type="EOperationPool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="new"
                c:identifier="e_operation_pool_new"
                version="3.2"
                introspectable="0">
        <source-position filename="e-operation-pool.h" line="39"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-operation-pool.c"
               line="36">a new #EOperationPool with the given settings.
  Free it with e_operation_pool_free(), when no longer needed.</doc>
          <type name="OperationPool" c:type="EOperationPool*"/>
        </return-value>
        <parameters>
          <parameter name="max_threads" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="32">Maximum number of threads for this pool</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="thread_func" transfer-ownership="none" closure="2">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="33">Function to run for a given thread</doc>
            <type name="GLib.Func" c:type="GFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-operation-pool.c"
                 line="34">The user data to pass to @thread_func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="ProxyMethod"
                 version="3.12"
                 glib:type-name="EProxyMethod"
                 glib:get-type="e_proxy_method_get_type"
                 c:type="EProxyMethod">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="46">Network proxy configuration methods.</doc>
      <member name="default"
              value="0"
              c:identifier="E_PROXY_METHOD_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="48">Use the default #GProxyResolver (see g_proxy_resolver_get_default()).</doc>
      </member>
      <member name="manual"
              value="1"
              c:identifier="E_PROXY_METHOD_MANUAL"
              glib:nick="manual">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="50">Use the FTP/HTTP/HTTPS/SOCKS settings defined in #ESourceProxy.</doc>
      </member>
      <member name="auto"
              value="2"
              c:identifier="E_PROXY_METHOD_AUTO"
              glib:nick="auto">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="52">Use the autoconfiguration URL defined in #ESourceProxy.</doc>
      </member>
      <member name="none"
              value="3"
              c:identifier="E_PROXY_METHOD_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="54">Direct connection; do not use a network proxy.</doc>
      </member>
    </enumeration>
    <function-macro name="SOUP_AUTH_BEARER"
                    c:identifier="E_SOUP_AUTH_BEARER"
                    introspectable="0">
      <source-position filename="e-soup-auth-bearer.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOUP_AUTH_BEARER_CLASS"
                    c:identifier="E_SOUP_AUTH_BEARER_CLASS"
                    introspectable="0">
      <source-position filename="e-soup-auth-bearer.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOUP_AUTH_BEARER_GET_CLASS"
                    c:identifier="E_SOUP_AUTH_BEARER_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-soup-auth-bearer.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOUP_SESSION"
                    c:identifier="E_SOUP_SESSION"
                    introspectable="0">
      <source-position filename="e-soup-session.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOUP_SESSION_CLASS"
                    c:identifier="E_SOUP_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="e-soup-session.h" line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOUP_SESSION_GET_CLASS"
                    c:identifier="E_SOUP_SESSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-soup-session.h" line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE" c:identifier="E_SOURCE" introspectable="0">
      <source-position filename="e-source.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_ADDRESS_BOOK"
                    c:identifier="E_SOURCE_ADDRESS_BOOK"
                    introspectable="0">
      <source-position filename="e-source-address-book.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_ADDRESS_BOOK_CLASS"
                    c:identifier="E_SOURCE_ADDRESS_BOOK_CLASS"
                    introspectable="0">
      <source-position filename="e-source-address-book.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_ADDRESS_BOOK_GET_CLASS"
                    c:identifier="E_SOURCE_ADDRESS_BOOK_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-address-book.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_ALARMS"
                    c:identifier="E_SOURCE_ALARMS"
                    introspectable="0">
      <source-position filename="e-source-alarms.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_ALARMS_CLASS"
                    c:identifier="E_SOURCE_ALARMS_CLASS"
                    introspectable="0">
      <source-position filename="e-source-alarms.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_ALARMS_GET_CLASS"
                    c:identifier="E_SOURCE_ALARMS_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-alarms.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTHENTICATION"
                    c:identifier="E_SOURCE_AUTHENTICATION"
                    introspectable="0">
      <source-position filename="e-source-authentication.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTHENTICATION_CLASS"
                    c:identifier="E_SOURCE_AUTHENTICATION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-authentication.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTHENTICATION_GET_CLASS"
                    c:identifier="E_SOURCE_AUTHENTICATION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-authentication.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTOCOMPLETE"
                    c:identifier="E_SOURCE_AUTOCOMPLETE"
                    introspectable="0">
      <source-position filename="e-source-autocomplete.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTOCOMPLETE_CLASS"
                    c:identifier="E_SOURCE_AUTOCOMPLETE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-autocomplete.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTOCOMPLETE_GET_CLASS"
                    c:identifier="E_SOURCE_AUTOCOMPLETE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-autocomplete.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTOCONFIG"
                    c:identifier="E_SOURCE_AUTOCONFIG"
                    introspectable="0">
      <source-position filename="e-source-autoconfig.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTOCONFIG_CLASS"
                    c:identifier="E_SOURCE_AUTOCONFIG_CLASS"
                    introspectable="0">
      <source-position filename="e-source-autoconfig.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_AUTOCONFIG_GET_CLASS"
                    c:identifier="E_SOURCE_AUTOCONFIG_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-autoconfig.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_BACKEND"
                    c:identifier="E_SOURCE_BACKEND"
                    introspectable="0">
      <source-position filename="e-source-backend.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_BACKEND_CLASS"
                    c:identifier="E_SOURCE_BACKEND_CLASS"
                    introspectable="0">
      <source-position filename="e-source-backend.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_BACKEND_GET_CLASS"
                    c:identifier="E_SOURCE_BACKEND_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-backend.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CALENDAR"
                    c:identifier="E_SOURCE_CALENDAR"
                    introspectable="0">
      <source-position filename="e-source-calendar.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CALENDAR_CLASS"
                    c:identifier="E_SOURCE_CALENDAR_CLASS"
                    introspectable="0">
      <source-position filename="e-source-calendar.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CALENDAR_GET_CLASS"
                    c:identifier="E_SOURCE_CALENDAR_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-calendar.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CAMEL"
                    c:identifier="E_SOURCE_CAMEL"
                    introspectable="0">
      <source-position filename="e-source-camel.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CAMEL_CLASS"
                    c:identifier="E_SOURCE_CAMEL_CLASS"
                    introspectable="0">
      <source-position filename="e-source-camel.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CAMEL_GET_CLASS"
                    c:identifier="E_SOURCE_CAMEL_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-camel.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CLASS"
                    c:identifier="E_SOURCE_CLASS"
                    introspectable="0">
      <source-position filename="e-source.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_COLLECTION"
                    c:identifier="E_SOURCE_COLLECTION"
                    introspectable="0">
      <source-position filename="e-source-collection.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_COLLECTION_CLASS"
                    c:identifier="E_SOURCE_COLLECTION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-collection.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_COLLECTION_GET_CLASS"
                    c:identifier="E_SOURCE_COLLECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-collection.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CONTACTS"
                    c:identifier="E_SOURCE_CONTACTS"
                    introspectable="0">
      <source-position filename="e-source-contacts.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CONTACTS_CLASS"
                    c:identifier="E_SOURCE_CONTACTS_CLASS"
                    introspectable="0">
      <source-position filename="e-source-contacts.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CONTACTS_GET_CLASS"
                    c:identifier="E_SOURCE_CONTACTS_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-contacts.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider.h" line="39"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_GET_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider.h" line="48"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="36"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_GET_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="37"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2_GET_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_OAUTH2_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="46"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD_GET_CLASS"
                    c:identifier="E_SOURCE_CREDENTIALS_PROVIDER_IMPL_PASSWORD_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOURCE_CREDENTIAL_PASSWORD"
              value="password"
              c:type="E_SOURCE_CREDENTIAL_PASSWORD"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-source.h"
           line="71">A name of the named parameter used for passwords in credentials,
used to authenticate users with e_source_invoke_authenticate_sync()
and e_source_invoke_authenticate(). The named parameter is optional,
different authentication methods can use different names.</doc>
      <source-position filename="e-source.h" line="80"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_CREDENTIAL_SSL_TRUST"
              value="ssl-trust"
              c:type="E_SOURCE_CREDENTIAL_SSL_TRUST"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-source.h"
           line="83">A name of the named parameter used for SSL/TLS trust in credentials,
used to authenticate users with e_source_invoke_authenticate_sync()
and e_source_invoke_authenticate(). The named parameter is optional.
Its value corresponds to current ESourceWebdav::ssl-trust property,
in case the ESource has that extension available. This is required
to have up-to-date data on the server side, when the client side
just saved the SSL trust change, which might not be propagated
into the server (factory) side quickly enough. The key is added into
the credentials in e_source_invoke_authenticate() automatically, if the
corresponding ESource contain a WebDAV extension and the key
is not part of the credentials already.</doc>
      <source-position filename="e-source.h" line="99"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_CREDENTIAL_USERNAME"
              value="username"
              c:type="E_SOURCE_CREDENTIAL_USERNAME"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-source.h"
           line="59">A name of the named parameter used for usernames in credentials,
used to authenticate users with e_source_invoke_authenticate_sync()
and e_source_invoke_authenticate(). The named parameter is optional,
different authentication methods can use different names.</doc>
      <source-position filename="e-source.h" line="68"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOURCE_EXTENSION"
                    c:identifier="E_SOURCE_EXTENSION"
                    introspectable="0">
      <source-position filename="e-source-extension.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOURCE_EXTENSION_ADDRESS_BOOK"
              value="Address Book"
              c:type="E_SOURCE_EXTENSION_ADDRESS_BOOK"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-address-book.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceAddressBook.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-address-book.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_ALARMS"
              value="Alarms"
              c:type="E_SOURCE_EXTENSION_ALARMS"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-alarms.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceAlarms.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-alarms.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_AUTHENTICATION"
              value="Authentication"
              c:type="E_SOURCE_EXTENSION_AUTHENTICATION"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-authentication.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceAuthentication.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-authentication.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_AUTOCOMPLETE"
              value="Autocomplete"
              c:type="E_SOURCE_EXTENSION_AUTOCOMPLETE"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-autocomplete.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceAutocomplete.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-autocomplete.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_AUTOCONFIG"
              value="Autoconfig"
              c:type="E_SOURCE_EXTENSION_AUTOCONFIG"
              version="3.24">
      <doc xml:space="preserve"
           filename="e-source-autoconfig.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceAutoconfig.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-autoconfig.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_CALENDAR"
              value="Calendar"
              c:type="E_SOURCE_EXTENSION_CALENDAR"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-calendar.h"
           line="45">Pass this extension name to e_source_get_extension() to access
#ESourceCalendar.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-calendar.h" line="52"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOURCE_EXTENSION_CLASS"
                    c:identifier="E_SOURCE_EXTENSION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-extension.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOURCE_EXTENSION_COLLECTION"
              value="Collection"
              c:type="E_SOURCE_EXTENSION_COLLECTION"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-collection.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceCollection.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-collection.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_CONTACTS_BACKEND"
              value="Contacts Backend"
              c:type="E_SOURCE_EXTENSION_CONTACTS_BACKEND"
              version="3.18">
      <doc xml:space="preserve"
           filename="e-source-contacts.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceContacts.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-contacts.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOURCE_EXTENSION_GET_CLASS"
                    c:identifier="E_SOURCE_EXTENSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-extension.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOURCE_EXTENSION_GOA"
              value="GNOME Online Accounts"
              c:type="E_SOURCE_EXTENSION_GOA"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-goa.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceGoa.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-goa.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_LDAP_BACKEND"
              value="LDAP Backend"
              c:type="E_SOURCE_EXTENSION_LDAP_BACKEND"
              version="3.18">
      <doc xml:space="preserve"
           filename="e-source-ldap.h"
           line="47">Pass this extension name to e_source_get_extension() to access
#ESourceLDAP.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-ldap.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_LOCAL_BACKEND"
              value="Local Backend"
              c:type="E_SOURCE_EXTENSION_LOCAL_BACKEND"
              version="3.18">
      <doc xml:space="preserve"
           filename="e-source-local.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceLocal.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-local.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MAIL_ACCOUNT"
              value="Mail Account"
              c:type="E_SOURCE_EXTENSION_MAIL_ACCOUNT"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mail-account.h"
           line="47">Pass this extension name to e_source_get_extension() to access
#ESourceMailAccount.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mail-account.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MAIL_COMPOSITION"
              value="Mail Composition"
              c:type="E_SOURCE_EXTENSION_MAIL_COMPOSITION"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mail-composition.h"
           line="47">Pass this extension name to e_source_get_extension() to access
#ESourceMailComposition.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mail-composition.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MAIL_IDENTITY"
              value="Mail Identity"
              c:type="E_SOURCE_EXTENSION_MAIL_IDENTITY"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mail-identity.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceMailIdentity.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mail-identity.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MAIL_SIGNATURE"
              value="Mail Signature"
              c:type="E_SOURCE_EXTENSION_MAIL_SIGNATURE"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mail-signature.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceMailSignature.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mail-signature.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MAIL_SUBMISSION"
              value="Mail Submission"
              c:type="E_SOURCE_EXTENSION_MAIL_SUBMISSION"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mail-submission.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceMailSubmission.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mail-submission.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MAIL_TRANSPORT"
              value="Mail Transport"
              c:type="E_SOURCE_EXTENSION_MAIL_TRANSPORT"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mail-transport.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceMailTransport.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mail-transport.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MDN"
              value="Message Disposition Notifications"
              c:type="E_SOURCE_EXTENSION_MDN"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-mdn.h"
           line="47">Pass this extension name to e_source_get_extension() to access
#ESourceMDN.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-mdn.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_MEMO_LIST"
              value="Memo List"
              c:type="E_SOURCE_EXTENSION_MEMO_LIST"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-memo-list.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceMemoList.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-memo-list.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_OFFLINE"
              value="Offline"
              c:type="E_SOURCE_EXTENSION_OFFLINE"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-offline.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceOffline.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-offline.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_OPENPGP"
              value="Pretty Good Privacy (OpenPGP)"
              c:type="E_SOURCE_EXTENSION_OPENPGP"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-openpgp.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceOpenPGP.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-openpgp.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_PROXY"
              value="Proxy"
              c:type="E_SOURCE_EXTENSION_PROXY"
              version="3.12">
      <doc xml:space="preserve"
           filename="e-source-proxy.h"
           line="47">Pass this extension name to e_source_get_extension() to access
#ESourceProxy.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-proxy.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_REFRESH"
              value="Refresh"
              c:type="E_SOURCE_EXTENSION_REFRESH"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-refresh.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceRefresh.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-refresh.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_RESOURCE"
              value="Resource"
              c:type="E_SOURCE_EXTENSION_RESOURCE"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-resource.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceResource.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-resource.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_REVISION_GUARDS"
              value="Revision Guards"
              c:type="E_SOURCE_EXTENSION_REVISION_GUARDS"
              version="3.8">
      <doc xml:space="preserve"
           filename="e-source-revision-guards.h"
           line="49">Pass this extension name to e_source_get_extension() to access
#ESourceRevisionGuards.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-revision-guards.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_SECURITY"
              value="Security"
              c:type="E_SOURCE_EXTENSION_SECURITY"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-security.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceSecurity.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-security.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_SMIME"
              value="Secure MIME (S/MIME)"
              c:type="E_SOURCE_EXTENSION_SMIME"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-smime.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceSMIME.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-smime.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_TASK_LIST"
              value="Task List"
              c:type="E_SOURCE_EXTENSION_TASK_LIST"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-task-list.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceTaskList.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-task-list.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_UOA"
              value="Ubuntu Online Accounts"
              c:type="E_SOURCE_EXTENSION_UOA"
              version="3.8">
      <doc xml:space="preserve"
           filename="e-source-uoa.h"
           line="46">Pass this extension name to e_source_get_extension() to access
#ESourceUoa.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-uoa.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_WEATHER_BACKEND"
              value="Weather Backend"
              c:type="E_SOURCE_EXTENSION_WEATHER_BACKEND"
              version="3.18">
      <doc xml:space="preserve"
           filename="e-source-weather.h"
           line="47">Pass this extension name to e_source_get_extension() to access
#ESourceWeather.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-weather.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="SOURCE_EXTENSION_WEBDAV_BACKEND"
              value="WebDAV Backend"
              c:type="E_SOURCE_EXTENSION_WEBDAV_BACKEND"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source-webdav.h"
           line="49">Pass this extension name to e_source_get_extension() to access
#ESourceWebdav.  This is also used as a group name in key files.</doc>
      <source-position filename="e-source-webdav.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="SOURCE_GET_CLASS"
                    c:identifier="E_SOURCE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_GOA"
                    c:identifier="E_SOURCE_GOA"
                    introspectable="0">
      <source-position filename="e-source-goa.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_GOA_CLASS"
                    c:identifier="E_SOURCE_GOA_CLASS"
                    introspectable="0">
      <source-position filename="e-source-goa.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_GOA_GET_CLASS"
                    c:identifier="E_SOURCE_GOA_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-goa.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_LDAP"
                    c:identifier="E_SOURCE_LDAP"
                    introspectable="0">
      <source-position filename="e-source-ldap.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_LDAP_CLASS"
                    c:identifier="E_SOURCE_LDAP_CLASS"
                    introspectable="0">
      <source-position filename="e-source-ldap.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_LDAP_GET_CLASS"
                    c:identifier="E_SOURCE_LDAP_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-ldap.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_LOCAL"
                    c:identifier="E_SOURCE_LOCAL"
                    introspectable="0">
      <source-position filename="e-source-local.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_LOCAL_CLASS"
                    c:identifier="E_SOURCE_LOCAL_CLASS"
                    introspectable="0">
      <source-position filename="e-source-local.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_LOCAL_GET_CLASS"
                    c:identifier="E_SOURCE_LOCAL_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-local.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_ACCOUNT"
                    c:identifier="E_SOURCE_MAIL_ACCOUNT"
                    introspectable="0">
      <source-position filename="e-source-mail-account.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_ACCOUNT_CLASS"
                    c:identifier="E_SOURCE_MAIL_ACCOUNT_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-account.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_ACCOUNT_GET_CLASS"
                    c:identifier="E_SOURCE_MAIL_ACCOUNT_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-account.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_COMPOSITION"
                    c:identifier="E_SOURCE_MAIL_COMPOSITION"
                    introspectable="0">
      <source-position filename="e-source-mail-composition.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_COMPOSITION_CLASS"
                    c:identifier="E_SOURCE_MAIL_COMPOSITION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-composition.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_COMPOSITION_GET_CLASS"
                    c:identifier="E_SOURCE_MAIL_COMPOSITION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-composition.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_IDENTITY"
                    c:identifier="E_SOURCE_MAIL_IDENTITY"
                    introspectable="0">
      <source-position filename="e-source-mail-identity.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_IDENTITY_CLASS"
                    c:identifier="E_SOURCE_MAIL_IDENTITY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-identity.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_IDENTITY_GET_CLASS"
                    c:identifier="E_SOURCE_MAIL_IDENTITY_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-identity.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_SIGNATURE"
                    c:identifier="E_SOURCE_MAIL_SIGNATURE"
                    introspectable="0">
      <source-position filename="e-source-mail-signature.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_SIGNATURE_CLASS"
                    c:identifier="E_SOURCE_MAIL_SIGNATURE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-signature.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_SIGNATURE_GET_CLASS"
                    c:identifier="E_SOURCE_MAIL_SIGNATURE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-signature.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_SUBMISSION"
                    c:identifier="E_SOURCE_MAIL_SUBMISSION"
                    introspectable="0">
      <source-position filename="e-source-mail-submission.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_SUBMISSION_CLASS"
                    c:identifier="E_SOURCE_MAIL_SUBMISSION_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-submission.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_SUBMISSION_GET_CLASS"
                    c:identifier="E_SOURCE_MAIL_SUBMISSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-submission.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_TRANSPORT"
                    c:identifier="E_SOURCE_MAIL_TRANSPORT"
                    introspectable="0">
      <source-position filename="e-source-mail-transport.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_TRANSPORT_CLASS"
                    c:identifier="E_SOURCE_MAIL_TRANSPORT_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-transport.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MAIL_TRANSPORT_GET_CLASS"
                    c:identifier="E_SOURCE_MAIL_TRANSPORT_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mail-transport.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MDN"
                    c:identifier="E_SOURCE_MDN"
                    introspectable="0">
      <source-position filename="e-source-mdn.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MDN_CLASS"
                    c:identifier="E_SOURCE_MDN_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mdn.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MDN_GET_CLASS"
                    c:identifier="E_SOURCE_MDN_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-mdn.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MEMO_LIST"
                    c:identifier="E_SOURCE_MEMO_LIST"
                    introspectable="0">
      <source-position filename="e-source-memo-list.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MEMO_LIST_CLASS"
                    c:identifier="E_SOURCE_MEMO_LIST_CLASS"
                    introspectable="0">
      <source-position filename="e-source-memo-list.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_MEMO_LIST_GET_CLASS"
                    c:identifier="E_SOURCE_MEMO_LIST_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-memo-list.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_OFFLINE"
                    c:identifier="E_SOURCE_OFFLINE"
                    introspectable="0">
      <source-position filename="e-source-offline.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_OFFLINE_CLASS"
                    c:identifier="E_SOURCE_OFFLINE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-offline.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_OFFLINE_GET_CLASS"
                    c:identifier="E_SOURCE_OFFLINE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-offline.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_OPENPGP"
                    c:identifier="E_SOURCE_OPENPGP"
                    introspectable="0">
      <source-position filename="e-source-openpgp.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_OPENPGP_CLASS"
                    c:identifier="E_SOURCE_OPENPGP_CLASS"
                    introspectable="0">
      <source-position filename="e-source-openpgp.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_OPENPGP_GET_CLASS"
                    c:identifier="E_SOURCE_OPENPGP_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-openpgp.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="SOURCE_PARAM_SETTING"
              value="1"
              c:type="E_SOURCE_PARAM_SETTING"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-source.h"
           line="48">Extends #GParamFlags to indicate the #GObject property is associated
with a key file value.  Use this flag when installing #GObject properties
in #ESourceExtension subclasses.</doc>
      <source-position filename="e-source.h" line="56"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="SOURCE_PROXY"
                    c:identifier="E_SOURCE_PROXY"
                    introspectable="0">
      <source-position filename="e-source-proxy.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_PROXY_CLASS"
                    c:identifier="E_SOURCE_PROXY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-proxy.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_PROXY_GET_CLASS"
                    c:identifier="E_SOURCE_PROXY_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-proxy.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REFRESH"
                    c:identifier="E_SOURCE_REFRESH"
                    introspectable="0">
      <source-position filename="e-source-refresh.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REFRESH_CLASS"
                    c:identifier="E_SOURCE_REFRESH_CLASS"
                    introspectable="0">
      <source-position filename="e-source-refresh.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REFRESH_GET_CLASS"
                    c:identifier="E_SOURCE_REFRESH_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-refresh.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REGISTRY"
                    c:identifier="E_SOURCE_REGISTRY"
                    introspectable="0">
      <source-position filename="e-source-registry.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REGISTRY_CLASS"
                    c:identifier="E_SOURCE_REGISTRY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-registry.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REGISTRY_GET_CLASS"
                    c:identifier="E_SOURCE_REGISTRY_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-registry.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REGISTRY_WATCHER"
                    c:identifier="E_SOURCE_REGISTRY_WATCHER"
                    introspectable="0">
      <source-position filename="e-source-registry-watcher.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REGISTRY_WATCHER_CLASS"
                    c:identifier="E_SOURCE_REGISTRY_WATCHER_CLASS"
                    introspectable="0">
      <source-position filename="e-source-registry-watcher.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REGISTRY_WATCHER_GET_CLASS"
                    c:identifier="E_SOURCE_REGISTRY_WATCHER_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-registry-watcher.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_RESOURCE"
                    c:identifier="E_SOURCE_RESOURCE"
                    introspectable="0">
      <source-position filename="e-source-resource.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_RESOURCE_CLASS"
                    c:identifier="E_SOURCE_RESOURCE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-resource.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_RESOURCE_GET_CLASS"
                    c:identifier="E_SOURCE_RESOURCE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-resource.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REVISION_GUARDS"
                    c:identifier="E_SOURCE_REVISION_GUARDS"
                    introspectable="0">
      <source-position filename="e-source-revision-guards.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REVISION_GUARDS_CLASS"
                    c:identifier="E_SOURCE_REVISION_GUARDS_CLASS"
                    introspectable="0">
      <source-position filename="e-source-revision-guards.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_REVISION_GUARDS_GET_CLASS"
                    c:identifier="E_SOURCE_REVISION_GUARDS_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-revision-guards.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SECURITY"
                    c:identifier="E_SOURCE_SECURITY"
                    introspectable="0">
      <source-position filename="e-source-security.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SECURITY_CLASS"
                    c:identifier="E_SOURCE_SECURITY_CLASS"
                    introspectable="0">
      <source-position filename="e-source-security.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SECURITY_GET_CLASS"
                    c:identifier="E_SOURCE_SECURITY_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-security.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SELECTABLE"
                    c:identifier="E_SOURCE_SELECTABLE"
                    introspectable="0">
      <source-position filename="e-source-selectable.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SELECTABLE_CLASS"
                    c:identifier="E_SOURCE_SELECTABLE_CLASS"
                    introspectable="0">
      <source-position filename="e-source-selectable.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SELECTABLE_GET_CLASS"
                    c:identifier="E_SOURCE_SELECTABLE_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-selectable.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SMIME"
                    c:identifier="E_SOURCE_SMIME"
                    introspectable="0">
      <source-position filename="e-source-smime.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SMIME_CLASS"
                    c:identifier="E_SOURCE_SMIME_CLASS"
                    introspectable="0">
      <source-position filename="e-source-smime.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_SMIME_GET_CLASS"
                    c:identifier="E_SOURCE_SMIME_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-smime.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_TASK_LIST"
                    c:identifier="E_SOURCE_TASK_LIST"
                    introspectable="0">
      <source-position filename="e-source-task-list.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_TASK_LIST_CLASS"
                    c:identifier="E_SOURCE_TASK_LIST_CLASS"
                    introspectable="0">
      <source-position filename="e-source-task-list.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_TASK_LIST_GET_CLASS"
                    c:identifier="E_SOURCE_TASK_LIST_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-task-list.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_UOA"
                    c:identifier="E_SOURCE_UOA"
                    introspectable="0">
      <source-position filename="e-source-uoa.h" line="29"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_UOA_CLASS"
                    c:identifier="E_SOURCE_UOA_CLASS"
                    introspectable="0">
      <source-position filename="e-source-uoa.h" line="32"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_UOA_GET_CLASS"
                    c:identifier="E_SOURCE_UOA_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-uoa.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_WEATHER"
                    c:identifier="E_SOURCE_WEATHER"
                    introspectable="0">
      <source-position filename="e-source-weather.h" line="30"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_WEATHER_CLASS"
                    c:identifier="E_SOURCE_WEATHER_CLASS"
                    introspectable="0">
      <source-position filename="e-source-weather.h" line="33"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_WEATHER_GET_CLASS"
                    c:identifier="E_SOURCE_WEATHER_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-weather.h" line="42"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_WEBDAV"
                    c:identifier="E_SOURCE_WEBDAV"
                    introspectable="0">
      <source-position filename="e-source-webdav.h" line="32"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_WEBDAV_CLASS"
                    c:identifier="E_SOURCE_WEBDAV_CLASS"
                    introspectable="0">
      <source-position filename="e-source-webdav.h" line="35"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SOURCE_WEBDAV_GET_CLASS"
                    c:identifier="E_SOURCE_WEBDAV_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-source-webdav.h" line="44"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="SoupAuthBearer"
           c:symbol-prefix="soup_auth_bearer"
           c:type="ESoupAuthBearer"
           version="3.10"
           parent="Soup.Auth"
           glib:type-name="ESoupAuthBearer"
           glib:get-type="e_soup_auth_bearer_get_type"
           glib:type-struct="SoupAuthBearerClass">
      <doc xml:space="preserve"
           filename="e-soup-auth-bearer.c"
           line="18">#ESoupAuthBearer adds libsoup support for the use of bearer tokens in
HTTP requests to access OAuth 2.0 protected resources, as defined in
&lt;ulink url="http://tools.ietf.org/html/rfc6750"&gt;RFC 6750&lt;/ulink&gt;.

An #EBackend should integrate #ESoupAuthBearer first by adding it as a
feature to a #SoupSession's #SoupAuthManager, then from a #SoupSession
#SoupSession::authenticate handler call e_source_get_oauth2_access_token()
and pass the results to e_soup_auth_bearer_set_access_token().</doc>
      <source-position filename="e-soup-auth-bearer.h" line="68"/>
      <method name="is_expired"
              c:identifier="e_soup_auth_bearer_is_expired"
              version="3.24">
        <source-position filename="e-soup-auth-bearer.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-auth-bearer.c"
               line="235">Whether the set token is expired. It is considered expired even
  if the e_soup_auth_bearer_set_access_token() was called set yet.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-auth-bearer.c"
                 line="233">an #ESoupAuthBearer</doc>
            <type name="SoupAuthBearer" c:type="ESoupAuthBearer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_access_token"
              c:identifier="e_soup_auth_bearer_set_access_token"
              version="3.10">
        <doc xml:space="preserve"
             filename="e-soup-auth-bearer.c"
             line="179">This function is analogous to soup_auth_authenticate() for "Basic" HTTP
authentication, except it takes an OAuth 2.0 access token instead of a
username and password.

If @expires_in_seconds is greater than zero, soup_auth_is_authenticated()
will return %FALSE after the given number of seconds have elapsed.</doc>
        <source-position filename="e-soup-auth-bearer.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="bearer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-auth-bearer.c"
                 line="181">an #ESoupAuthBearer</doc>
            <type name="SoupAuthBearer" c:type="ESoupAuthBearer*"/>
          </instance-parameter>
          <parameter name="access_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-auth-bearer.c"
                 line="182">an OAuth 2.0 access token</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="expires_in_seconds" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-auth-bearer.c"
                 line="183">expiry for @access_token, or 0 if unknown</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="Soup.Auth" c:type="SoupAuth"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SoupAuthBearerPrivate" c:type="ESoupAuthBearerPrivate*"/>
      </field>
    </class>
    <record name="SoupAuthBearerClass"
            c:type="ESoupAuthBearerClass"
            glib:is-gtype-struct-for="SoupAuthBearer">
      <source-position filename="e-soup-auth-bearer.h" line="68"/>
      <field name="parent_class">
        <type name="Soup.AuthClass" c:type="SoupAuthClass"/>
      </field>
    </record>
    <record name="SoupAuthBearerPrivate"
            c:type="ESoupAuthBearerPrivate"
            disguised="1">
      <source-position filename="e-soup-auth-bearer.h" line="50"/>
    </record>
    <class name="SoupSession"
           c:symbol-prefix="soup_session"
           c:type="ESoupSession"
           version="3.26"
           parent="Soup.Session"
           glib:type-name="ESoupSession"
           glib:get-type="e_soup_session_get_type"
           glib:type-struct="SoupSessionClass">
      <doc xml:space="preserve"
           filename="e-soup-session.c"
           line="18">The #ESoupSession is a #SoupSession descendant, which hides common
tasks related to the way evolution-data-server works.</doc>
      <source-position filename="e-soup-session.h" line="75"/>
      <constructor name="new" c:identifier="e_soup_session_new" version="3.26">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="538">Creates a new #ESoupSession associated with given @source.
The @source can be used to store and read SSL trust settings, but only if
it already contains an #ESourceWebdav extension. Otherwise the SSL trust
settings are ignored.</doc>
        <source-position filename="e-soup-session.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="547">a new #ESoupSession; free it with g_object_unref(),
   when no longer needed.</doc>
          <type name="SoupSession" c:type="ESoupSession*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="540">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="util_normalize_uri_path"
                c:identifier="e_soup_session_util_normalize_uri_path"
                version="3.38">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="1253">Normalizes the path of the @suri, aka encodes characters, which should
be encoded, if needed. Returns, whether any change had been made to the path.
It doesn't touch other parts of the @suri.</doc>
        <source-position filename="e-soup-session.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="1261">whether made any changes</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="suri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="1255">a #SoupURI to normalize the path for</doc>
            <type name="Soup.URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_status_to_string"
                c:identifier="e_soup_session_util_status_to_string"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="1206">Returns the @reason_phrase, if it's non-%NULL and non-empty, a static string
corresponding to @status_code. In case neither that can be found a localized
"Unknown error" message is returned.</doc>
        <source-position filename="e-soup-session.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="1215">Error text based on given arguments. The returned
   value is valid as long as @reason_phrase is not freed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="status_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="1208">an HTTP status code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="reason_phrase"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="1209">preferred string to use for the message, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="check_result"
              c:identifier="e_soup_session_check_result"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="910">Checks result of the @request and sets the @error if it failed.
When it failed and the @read_bytes is provided, then these are
set to @request's message response_body, thus it can be used
later.</doc>
        <source-position filename="e-soup-session.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="923">Whether succeeded, aka %TRUE, when no error recognized
   and %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="912">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="913">a #SoupRequestHTTP</doc>
            <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
          </parameter>
          <parameter name="read_bytes"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="914">optional bytes which had been read from the stream, or %NULL</doc>
            <type name="gpointer" c:type="gconstpointer"/>
          </parameter>
          <parameter name="bytes_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="915">how many bytes had been read; ignored when @read_bytes is %NULL</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_credentials"
              c:identifier="e_soup_session_dup_credentials"
              version="3.26">
        <source-position filename="e-soup-session.h" line="88"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="679">A copy of the credentials being
   previously set with e_soup_session_set_credentials(), or %NULL when
   none are set. Free the returned pointer with e_named_parameters_free(),
   when no longer needed.</doc>
          <type name="NamedParameters" c:type="ENamedParameters*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="677">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_authentication_requires_credentials"
              c:identifier="e_soup_session_get_authentication_requires_credentials"
              version="3.28">
        <source-position filename="e-soup-session.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="709">Whether the last connection attempt required any credentials.
   Authentications like OAuth2 do not want extra credentials to work.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="707">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_log_level"
              c:identifier="e_soup_session_get_log_level"
              version="3.26">
        <source-position filename="e-soup-session.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="613">Current log level, as #SoupLoggerLogLevel</doc>
          <type name="Soup.LoggerLogLevel" c:type="SoupLoggerLogLevel"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="611">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_source"
              c:identifier="e_soup_session_get_source"
              version="3.26">
        <source-position filename="e-soup-session.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="629">Associated #ESource with the @session.</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="627">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssl_error_details"
              c:identifier="e_soup_session_get_ssl_error_details"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="722">Populates @out_certificate_pem and @out_certificate_errors with the last values
returned on #SOUP_STATUS_SSL_FAILED error.</doc>
        <source-position filename="e-soup-session.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="733">Whether the information was available and set to the out parameters.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="724">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="out_certificate_pem"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="725">return location for a server TLS/SSL certificate
  in PEM format, when the last operation failed with a TLS/SSL error</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_certificate_errors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="727">return location for a #GTlsCertificateFlags,
  with certificate error flags when the the operation failed with a TLS/SSL error</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_request"
              c:identifier="e_soup_session_new_request"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="783">Creates a new #SoupRequestHTTP, similar to soup_session_request_http(),
but also presets request headers with "User-Agent" to be "Evolution/version"
and with "Connection" to be "close".

See also e_soup_session_new_request_uri().</doc>
        <source-position filename="e-soup-session.h" line="95"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="796">a new #SoupRequestHTTP, or %NULL on error</doc>
          <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="785">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="786">an HTTP method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uri_string" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="787">a URI string to use for the request</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_request_uri"
              c:identifier="e_soup_session_new_request_uri"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="819">Creates a new #SoupRequestHTTP, similar to soup_session_request_http_uri(),
but also presets request headers with "User-Agent" to be "Evolution/version"
and with "Connection" to be "close".

See also e_soup_session_new_request().</doc>
        <source-position filename="e-soup-session.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="832">a new #SoupRequestHTTP, or %NULL on error</doc>
          <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="821">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="822">an HTTP method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="823">a #SoupURI to use for the request</doc>
            <type name="Soup.URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_request_simple_sync"
              c:identifier="e_soup_session_send_request_simple_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="1139">Similar to e_soup_session_send_request_sync(), except it reads
whole response content into memory and returns it as a #GByteArray.
Use e_soup_session_send_request_sync() when you want to have
more control on the content read.

The function prints read content to stdout when
e_soup_session_get_log_level() returns #SOUP_LOGGER_LOG_BODY.</doc>
        <source-position filename="e-soup-session.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="1154">A newly allocated #GByteArray,
   which contains whole content from the URI pointed to by @request.</doc>
          <array name="GLib.ByteArray" c:type="GByteArray*">
            <type name="guint8" c:type="guint8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="1141">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="1142">a #SoupRequestHTTP to send</doc>
            <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="1143">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_request_sync"
              c:identifier="e_soup_session_send_request_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="977">Synchronously sends prepared request and returns #GInputStream
that can be used to read its contents.

This calls soup_request_send() internally, but it also setups
the request according to #ESoupSession:source authentication
settings. It also extracts information about used certificate,
in case of SOUP_STATUS_SSL_FAILED error and keeps it for later use
by e_soup_session_get_ssl_error_details().

Use e_soup_session_send_request_simple_sync() to read whole
content into a #GByteArray.

Note that SoupSession doesn't log content read from GInputStream,
thus the caller may print the read content on its own when needed.

Note the @request is fully filled only after there is anything
read from the resulting #GInputStream, thus use
e_soup_session_check_result() to verify that the receive had
been finished properly.</doc>
        <source-position filename="e-soup-session.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-soup-session.c"
               line="1004">A newly allocated #GInputStream,
   that can be used to read from the URI pointed to by @request.
   Free it with g_object_unref(), when no longer needed.</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="979">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="980">a #SoupRequestHTTP to send</doc>
            <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="981">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_credentials"
              c:identifier="e_soup_session_set_credentials"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="641">Sets credentials to use for connection. Using %NULL for @credentials
unsets previous value.</doc>
        <source-position filename="e-soup-session.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="643">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="credentials"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="644">an #ENamedParameters with credentials to use, or %NULL</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
        </parameters>
      </method>
      <method name="setup_logging"
              c:identifier="e_soup_session_setup_logging"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="562">Setups logging for the @session. The @logging_level can be one of:
"all" - log whole raw communication;
"body" - the same as "all";
"headers" - log the headers only;
"min" - minimal logging;
"1" - the same as "all".
Any other value, including %NULL, disables logging.

Use e_soup_session_get_log_level() to get current log level.</doc>
        <source-position filename="e-soup-session.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="session" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="564">an #ESoupSession</doc>
            <type name="SoupSession" c:type="ESoupSession*"/>
          </instance-parameter>
          <parameter name="logging_level"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-soup-session.c"
                 line="565">logging level to setup, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="credentials"
                version="3.26"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="494">The #ENamedParameters containing login credentials.</doc>
        <type name="NamedParameters"/>
      </property>
      <property name="source"
                version="3.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-soup-session.c"
             line="475">The #ESource being used for this soup session.</doc>
        <type name="Source"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="Soup.Session" c:type="SoupSession"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SoupSessionPrivate" c:type="ESoupSessionPrivate*"/>
      </field>
    </class>
    <record name="SoupSessionClass"
            c:type="ESoupSessionClass"
            glib:is-gtype-struct-for="SoupSession">
      <source-position filename="e-soup-session.h" line="75"/>
      <field name="parent_class">
        <type name="Soup.SessionClass" c:type="SoupSessionClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="SoupSessionPrivate"
            c:type="ESoupSessionPrivate"
            disguised="1">
      <source-position filename="e-soup-session.h" line="54"/>
    </record>
    <class name="Source"
           c:symbol-prefix="source"
           c:type="ESource"
           version="3.6"
           parent="GObject.Object"
           glib:type-name="ESource"
           glib:get-type="e_source_get_type"
           glib:type-struct="SourceClass">
      <doc xml:space="preserve"
           filename="e-source.c"
           line="18">An #ESource (or "data source") is a description of a file or network
location where data can be obtained (such as a mail account), or a
description of a resource at that location (such as a mail folder).

In more concrete terms, it's an interface for a key file.  All such
key files have a main group named [Data Source].  The keys in a
[Data Source] group map to #GObject properties in an #ESource.

Additional groups in the key file are referred to as "extensions".
#ESourceExtension serves as the base class for writing interfaces
for these additional key file groups.  The keys in one of these
key file groups map to #GObject properties in some custom subclass
of #ESourceExtension which was written specifically for that key
file group.  For example, a key file might include a group named
[Calendar], whose keys map to #GObject properties in an extension
class named #ESourceCalendar.

Each #ESource contains an internal dictionary of extension objects,
accessible by their key file group name.  e_source_get_extension()
can look up extension objects by name.

An #ESource is identified by a unique identifier string, or "UID",
which is also the basename of the corresponding key file.  Additional
files related to the #ESource, such as cache files, are usually kept
in a directory named after the UID of the #ESource.  Similarly, the
password for an account described by an #ESource is kept in GNOME
Keyring under the UID of the #ESource.  This makes finding these
additional resources simple.

Several extensions for common information such as authentication
details are built into libedataserver (#ESourceAuthentication, for
example).  Backend modules may also define their own extensions for
information and settings unique to the backend.  #ESourceExtension
subclasses written for specific backends are generally not available
to applications and shared libraries.  This is by design, to try and
keep backend-specific knowledge from creeping into places it doesn't
belong.

As of 3.12, an #ESource with an #ESourceProxy extension can serve as a
#GProxyResolver.  Calling g_proxy_resolver_is_supported() on an #ESource
will reflect this constraint.  Attempting a proxy lookup operation on an
#ESource for which g_proxy_resolver_is_supported() returns %FALSE will
fail with %G_IO_ERROR_NOT_SUPPORTED.</doc>
      <source-position filename="e-source.h" line="218"/>
      <implements name="Gio.Initable"/>
      <implements name="Gio.ProxyResolver"/>
      <constructor name="new"
                   c:identifier="e_source_new"
                   version="3.6"
                   throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2495">Creates a new #ESource instance.

The #ESource::changed signal will be emitted from @main_context if given,
or else from the thread-default #GMainContext at the time this function is
called.

The only time the function should be called outside of #ESourceRegistry
is to create a so-called "scratch" #ESource for editing in a Properties
window or an account setup assistant.

FIXME: Elaborate on scratch sources.</doc>
        <source-position filename="e-source.h" line="221"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2513">a new #ESource, or %NULL on error</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <parameter name="dbus_object"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2497">a #GDBusObject or %NULL</doc>
            <type name="Gio.DBusObject" c:type="GDBusObject*"/>
          </parameter>
          <parameter name="main_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2498">a #GMainContext or %NULL</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_with_uid"
                   c:identifier="e_source_new_with_uid"
                   version="3.6"
                   throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2532">Creates a new "scratch" #ESource with a predetermined unique identifier.

The #ESource::changed signal will be emitted from @main_context if given,
or else from the thread-default #GMainContext at the time this function is
called.</doc>
        <source-position filename="e-source.h" line="224"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2544">a new scratch #ESource, or %NULL on error</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2534">a new unique identifier string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="main_context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2535">a #GMainContext or %NULL</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="parameter_to_key"
                c:identifier="e_source_parameter_to_key"
                version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3452">Converts a #GParamSpec name (e.g. "foo-bar" or "foo_bar")
to "CamelCase" for use as a #GKeyFile key (e.g. "FooBar").

This function is made public only to aid in account migration.
Applications should not need to use this.</doc>
        <source-position filename="e-source.h" line="260"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="param_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3454">a #GParamSpec name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="authenticate">
        <source-position filename="e-source.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="credentials" transfer-ownership="none">
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="changed" invoker="changed" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2615">Emits the #ESource::changed signal from an idle callback in
@source's #ESource:main-context.

This function is primarily intended for use by #ESourceExtension
when emitting a #GObject::notify signal on one of its properties.</doc>
        <source-position filename="e-source.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2617">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="credentials_required">
        <source-position filename="e-source.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
          <parameter name="op_error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_oauth2_access_token"
                      invoker="get_oauth2_access_token"
                      version="3.8">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3997">Asynchronously obtains the OAuth 2.0 access token for @source along
with its expiry in seconds from the current time (or 0 if unknown).

When the operation is finished, @callback will be called.  You can then
call e_source_get_oauth2_access_token_finish() to get the result of the
operation.</doc>
        <source-position filename="e-source.h" line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3999">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4000">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4001">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4003">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_oauth2_access_token_finish"
                      invoker="get_oauth2_access_token_finish"
                      version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4032">Finishes the operation started with e_source_get_oauth2_access_token().

Free the returned access token with g_free() when finished with it.
If an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="189"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4047">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4034">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4035">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4036">return location for the access token,
                   or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4038">return location for the token expiry,
                 or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="get_oauth2_access_token_sync"
                      invoker="get_oauth2_access_token_sync"
                      version="3.8"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3958">Obtains the OAuth 2.0 access token for @source along with its expiry
in seconds from the current time (or 0 if unknown).

Free the returned access token with g_free() when finished with it.
If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="178"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3974">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3960">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3961">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3962">return location for the access token,
                   or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3964">return location for the token expiry,
                 or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="invoke_authenticate_impl" throws="1">
        <source-position filename="e-source.h" line="205"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="dbus_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="arg_credentials" transfer-ownership="none">
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="invoke_credentials_required_impl" throws="1">
        <source-position filename="e-source.h" line="195"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="dbus_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="arg_reason" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_certificate_pem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_certificate_errors" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dbus_error_name" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arg_dbus_error_message" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remote_create"
                      invoker="remote_create"
                      version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3788">Asynchronously creates a new remote resource by picking out relevant
details from @scratch_source.  The @scratch_source must be an #ESource
with no #GDBusObject.  The @source must be #ESource:remote-creatable.

The details required to create the resource vary by #ECollectionBackend,
but in most cases the @scratch_source need only define the resource type
(address book, calendar, etc.), a display name for the resource, and
possibly a server-side path or ID for the resource.

When the operation is finished, @callback will be called.  You can then
call e_source_remote_create_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="160"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3790">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="scratch_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3791">an #ESource describing the resource to create</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3792">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3793">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3795">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remote_create_finish"
                      invoker="remote_create_finish"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3832">Finishes the operation started with e_source_remote_create().  If
an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="165"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3841">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3834">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3835">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remote_create_sync"
                      invoker="remote_create_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3747">Creates a new remote resource by picking out relevant details from
@scratch_source.  The @scratch_source must be an #ESource with no
#GDBusObject.  The @source must be #ESource:remote-creatable.

The details required to create the resource vary by #ECollectionBackend,
but in most cases the @scratch_source need only define the resource type
(address book, calendar, etc.), a display name for the resource, and
possibly a server-side path or ID for the resource.

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3765">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3749">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="scratch_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3750">an #ESource describing the resource to create</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3751">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remote_delete"
                      invoker="remote_delete"
                      version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3894">Asynchronously deletes the resource represented by @source from a remote
server.  The @source must be #ESource:remote-deletable.  This will also
delete the key file for @source and broadcast its removal to all clients,
similar to e_source_remove().

When the operation is finished, @callback will be called.  You can then
call e_source_remote_delete_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="171"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3896">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3897">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3898">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3900">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remote_delete_finish"
                      invoker="remote_delete_finish"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3929">Finishes the operation started with e_source_remote_delete().  If
an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="175"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3938">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3931">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3932">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remote_delete_sync"
                      invoker="remote_delete_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3861">Deletes the resource represented by @source from a remote server.
The @source must be #ESource:remote-deletable.  This will also delete
the key file for @source and broadcast its removal to all clients,
similar to e_source_remove_sync().

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="168"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3874">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3863">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3864">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove" invoker="remove" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3587">Asynchronously requests the D-Bus service to delete the key files for
@source and all of its descendants and broadcast their removal to all
clients.  The @source must be #ESource:removable.

When the operation is finished, @callback will be called.  You can then
call e_source_remove_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3589">the #ESource to be removed</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3590">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3591">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3593">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_finish"
                      invoker="remove_finish"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3621">Finishes the operation started with e_source_remove().  If an
error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="143"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3630">%TRUE on success, %FALSE of failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3623">the #ESource to be removed</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3624">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="remove_sync"
                      invoker="remove_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3555">Requests the D-Bus service to delete the key files for @source and all of
its descendants and broadcast their removal to all clients.  The @source
must be #ESource:removable.

If an error occurs, the functon will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3567">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3557">the #ESource to be removed</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3558">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unset_last_credentials_required_arguments_impl"
                      throws="1">
        <source-position filename="e-source.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write" invoker="write" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3683">Asynchronously submits the current contents of @source to the D-Bus
service to be written to disk and broadcast to other clients.  The
@source must be #ESource:writable.

When the operation is finished, @callback will be called.  You can then
call e_source_write_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3685">a writable #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3686">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3687">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3689">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write_finish"
                      invoker="write_finish"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3717">Finishes the operation started with e_source_write().  If an
error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3726">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3719">a writable #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3720">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="write_sync"
                      invoker="write_sync"
                      version="3.6"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3651">Submits the current contents of @source to the D-Bus service to be
written to disk and broadcast to other clients.  The @source must
be #ESource:writable.

If an error occurs, the functon will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3663">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3653">a writable #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3654">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="camel_configure_service"
              c:identifier="e_source_camel_configure_service"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-camel.c"
             line="813">This function essentially glues together @source and @serivce so their
configuration settings stay synchronized.  The glue itself is a shared
#CamelSettings instance.

Call this function immediately after creating a new #CamelService with
camel_session_add_service().</doc>
        <source-position filename="e-source-camel.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="815">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="816">a #CamelService</doc>
            <type name="Camel.Service" c:type="CamelService*"/>
          </parameter>
        </parameters>
      </method>
      <method name="changed" c:identifier="e_source_changed" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2615">Emits the #ESource::changed signal from an idle callback in
@source's #ESource:main-context.

This function is primarily intended for use by #ESourceExtension
when emitting a #GObject::notify signal on one of its properties.</doc>
        <source-position filename="e-source.h" line="230"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2617">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="compare_by_display_name"
              c:identifier="e_source_compare_by_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3379">Compares two #ESource instances by their display names.  Useful for
ordering sources in a user interface.</doc>
        <source-position filename="e-source.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3387">a negative value if @source1 compares before @source2, zero if
         they compare equal, or a positive value if @source1 compares
         after @source2</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="source1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3381">the first #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="source2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3382">the second #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_password"
              c:identifier="e_source_delete_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4424">Asynchronously deletes the password for @source from either the default
keyring or session keyring.  This operation does not rely on the registry
service and therefore works for any #ESource -- registered or "scratch".

When the operation is finished, @callback will be called.  You can then
call e_source_delete_password_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="355"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4426">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4427">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4428">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4429">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_password_finish"
              c:identifier="e_source_delete_password_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4458">Finishes the operation started with e_source_delete_password().

Note the boolean return value indicates whether the delete operation
itself completed successfully, not whether a password was found and
deleted.  If no password was found, the function will still return
%TRUE.  If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="359"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4471">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4460">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4461">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_password_sync"
              c:identifier="e_source_delete_password_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4370">Deletes the password for @source from either the default keyring or
session keyring.  This operation does not rely on the registry service
and therefore works for any #ESource -- registered or "scratch".

Note the boolean return value indicates whether the delete operation
itself completed successfully, not whether a password was found and
deleted.  If no password was found, the function will still return
%TRUE.  If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="352"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4385">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4372">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4373">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_display_name"
              c:identifier="e_source_dup_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3185">Thread-safe variation of e_source_get_display_name().
Use this function when accessing @source from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source.h" line="251"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3194">a newly-allocated copy of #ESource:display-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3187">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_parent"
              c:identifier="e_source_dup_parent"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2718">Thread-safe variation of e_source_get_parent().
Use this function when accessing @source from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source.h" line="234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2727">a newly-allocated copy of #ESource:parent</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2720">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_secret_label"
              c:identifier="e_source_dup_secret_label"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3260">Creates a label string based on @source's #ESource:display-name for use
with #SecretItem.</doc>
        <source-position filename="e-source.h" line="254"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3267">a newly-allocated secret label</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3262">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_uid" c:identifier="e_source_dup_uid" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2666">Thread-safe variation of e_source_get_uid().
Use this function when accessing @source from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source.h" line="232"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2675">a newly-allocated copy of #ESource:uid</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2668">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="emit_credentials_required"
              c:identifier="e_source_emit_credentials_required"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4910">Emits localy (in this process only) the ESource::credentials-required
signal with given parameters. That's the difference with e_source_invoke_credentials_required(),
which calls the signal globally, within each client.</doc>
        <source-position filename="e-source.h" line="397"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4912">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4913">an #ESourceCredentialsReason, why the credentials are required</doc>
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4914">PEM-encoded secure connection certificate, or an empty string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4915">a bit-or of #GTlsCertificateFlags for secure connection certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
          <parameter name="op_error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4916">a #GError with a description of the previous credentials error, or %NULL</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </method>
      <method name="equal" c:identifier="e_source_equal" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2585">Checks two #ESource instances for equality.  #ESource instances are
equal if their unique identifier strings are equal.</doc>
        <source-position filename="e-source.h" line="228"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2593">%TRUE if @source1 and @source2 are equal</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source1" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2587">the first #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="source2" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2588">the second #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connection_status"
              c:identifier="e_source_get_connection_status"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3488">Obtain current connection status of the @source.</doc>
        <source-position filename="e-source.h" line="262"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3494">Current connection status of the @source.</doc>
          <type name="SourceConnectionStatus"
                c:type="ESourceConnectionStatus"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3490">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="e_source_get_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3166">Returns the display name for @source.  Use the display name to
represent the #ESource in a user interface.</doc>
        <source-position filename="e-source.h" line="250"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3173">the display name for @source</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3168">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="e_source_get_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2784">Returns %TRUE if @source is enabled.

An application should try to honor this setting if at all possible,
even if it does not provide a way to change the setting through its
user interface.  Disabled data sources should generally be hidden.

&lt;note&gt;&lt;para&gt;
  This function does not take into account @source's ancestors in the
  #ESource hierarchy, each of which have their own enabled state.  If
  any of @source's ancestors are disabled, then @source itself should
  be treated as disabled.  Use e_source_registry_check_enabled() to
  easily check for this.
&lt;/para&gt;&lt;/note&gt;</doc>
        <source-position filename="e-source.h" line="237"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2802">whether @source is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2786">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_extension"
              c:identifier="e_source_get_extension"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2984">Returns an instance of some #ESourceExtension subclass which registered
itself under @extension_name.  If no such instance exists within @source,
one will be created.  It is the caller's responsibility to know which
subclass is being returned.

If you just want to test for the existence of an extension within @source
without creating it, use e_source_has_extension().

Extension instances are owned by their #ESource and should not be
referenced directly.  Instead, reference the #ESource instance and
use this function to fetch the extension instance as needed.</doc>
        <source-position filename="e-source.h" line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3001">an instance of some
#ESourceExtension subclass</doc>
          <type name="SourceExtension" c:type="gpointer"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2986">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="extension_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2987">an extension name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_credentials_required_arguments"
              c:identifier="e_source_get_last_credentials_required_arguments"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="5055">Asynchronously calls the GetLastCredentialsRequiredArguments method
on the server side, to get the last values used for the 'credentials-required'
signal. See e_source_get_last_credentials_required_arguments_sync() for
more information.

When the operation is finished, @callback will be called. You can then
call e_source_get_last_credentials_required_arguments_finish() to get
the result of the operation.</doc>
        <source-position filename="e-source.h" line="411"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5057">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5058">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5059">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5060">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_credentials_required_arguments_finish"
              c:identifier="e_source_get_last_credentials_required_arguments_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="5091">Finishes the operation started with e_source_get_last_credentials_required_arguments().
See e_source_get_last_credentials_required_arguments_sync() for more information
about the output arguments.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="416"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="5107">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5093">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5094">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5095">an #ESourceCredentialsReason, why the credentials are required</doc>
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason*"/>
          </parameter>
          <parameter name="out_certificate_pem"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5096">PEM-encoded secure connection certificate, or an empty string</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_certificate_errors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5097">a bit-or of #GTlsCertificateFlags for secure connection certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags*"/>
          </parameter>
          <parameter name="out_op_error"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5098">a #GError with a description of the previous credentials error</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_credentials_required_arguments_sync"
              c:identifier="e_source_get_last_credentials_required_arguments_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4936">Retrieves the last used arguments of the 'credentials-required' signal emission.
If there was none emitted yet, or a corresponding 'authenitcate' had been emitted
already, then the @out_reason is set to #E_SOURCE_CREDENTIALS_REASON_UNKNOWN
and the value of other 'out' arguments is set to no values.

If an error occurs, the function sets @error and returns %FALSE. The result gchar
values should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source.h" line="403"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4954">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4938">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="out_reason"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4939">an #ESourceCredentialsReason, why the credentials are required</doc>
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason*"/>
          </parameter>
          <parameter name="out_certificate_pem"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4940">PEM-encoded secure connection certificate, or an empty string</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_certificate_errors"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4941">a bit-or of #GTlsCertificateFlags for secure connection certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags*"/>
          </parameter>
          <parameter name="out_op_error"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4942">a #GError with a description of the previous credentials error</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4943">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_oauth2_access_token"
              c:identifier="e_source_get_oauth2_access_token"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3997">Asynchronously obtains the OAuth 2.0 access token for @source along
with its expiry in seconds from the current time (or 0 if unknown).

When the operation is finished, @callback will be called.  You can then
call e_source_get_oauth2_access_token_finish() to get the result of the
operation.</doc>
        <source-position filename="e-source.h" line="313"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3999">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4000">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4001">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4003">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_oauth2_access_token_finish"
              c:identifier="e_source_get_oauth2_access_token_finish"
              version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4032">Finishes the operation started with e_source_get_oauth2_access_token().

Free the returned access token with g_free() when finished with it.
If an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="318"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4047">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4034">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4035">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4036">return location for the access token,
                   or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4038">return location for the token expiry,
                 or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_oauth2_access_token_sync"
              c:identifier="e_source_get_oauth2_access_token_sync"
              version="3.8"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3958">Obtains the OAuth 2.0 access token for @source along with its expiry
in seconds from the current time (or 0 if unknown).

Free the returned access token with g_free() when finished with it.
If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="307"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3974">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3960">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3961">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="out_access_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3962">return location for the access token,
                   or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_expires_in"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3964">return location for the token expiry,
                 or %NULL</doc>
            <type name="gint" c:type="gint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_parent"
              c:identifier="e_source_get_parent"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2700">Returns the unique identifier string of the parent #ESource.</doc>
        <source-position filename="e-source.h" line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2706">the UID of the parent #ESource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2702">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_creatable"
              c:identifier="e_source_get_remote_creatable"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2907">Returns whether new resources can be created on a remote server by
calling e_source_remote_create() on @source.

Generally this is only %TRUE if @source has an #ESourceCollection
extension, which means there is an #ECollectionBackend in the D-Bus
service that can handle create requests.  If @source does not have
this capability, calls to e_source_remote_create() will fail.</doc>
        <source-position filename="e-source.h" line="242"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2919">whether @source can create remote resources</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2909">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remote_deletable"
              c:identifier="e_source_get_remote_deletable"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2945">Returns whether the resource represented by @source can be deleted
from a remote server by calling e_source_remote_delete().

Generally this is only %TRUE if @source is a child of an #ESource
which has an #ESourceCollection extension, which means there is an
#ECollectionBackend in the D-Bus service that can handle delete
requests.  If @source does not have this capability, calls to
e_source_remote_delete() will fail.</doc>
        <source-position filename="e-source.h" line="243"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2958">whether @source can delete remote resources</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2947">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_removable"
              c:identifier="e_source_get_removable"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2874">Returns whether the D-Bus service will allow @source to be removed.
If @source is not writable, calls to e_source_remove() will fail.</doc>
        <source-position filename="e-source.h" line="241"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2881">whether @source is removable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2876">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uid" c:identifier="e_source_get_uid" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2648">Returns the unique identifier string for @source.</doc>
        <source-position filename="e-source.h" line="231"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2654">the UID for @source</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2650">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_writable"
              c:identifier="e_source_get_writable"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2841">Returns whether the D-Bus service will accept changes to @source.
If @source is not writable, calls to e_source_write() will fail.</doc>
        <source-position filename="e-source.h" line="240"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2848">whether @source is writable</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2843">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="has_extension"
              c:identifier="e_source_has_extension"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3066">Checks whether @source has an #ESourceExtension with the given name.</doc>
        <source-position filename="e-source.h" line="246"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3073">%TRUE if @source has such an extension, %FALSE if not</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3068">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="extension_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3069">an extension name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="hash" c:identifier="e_source_hash" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2561">Generates a hash value for @source.  This function is intended for
easily hashing an #ESource to add to a #GHashTable or similar data
structure.</doc>
        <source-position filename="e-source.h" line="227"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="2569">a hash value for @source.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2563">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="invoke_authenticate"
              c:identifier="e_source_invoke_authenticate"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4840">Asynchronously calls the InvokeAuthenticate method on the server side,
thus the backend knows what credentials to use to connect to its (possibly
remote) data store.

When the operation is finished, @callback will be called. You can then
call e_source_invoke_authenticate_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="388"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4842">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="credentials"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4843">an #ENamedParameters structure with credentials to use; can be %NULL
   to use those from the last call</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4845">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4846">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4847">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="invoke_authenticate_finish"
              c:identifier="e_source_invoke_authenticate_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4881">Finishes the operation started with e_source_invoke_authenticate().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="393"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4891">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4883">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4884">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invoke_authenticate_sync"
              c:identifier="e_source_invoke_authenticate_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4733">Calls the InvokeAuthenticate method on the server side, thus the backend
knows what credentials to use to connect to its (possibly remote) data store.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4746">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4735">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="credentials"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4736">an #ENamedParameters structure with credentials to use; can be %NULL
   to use those from the last call</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4738">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invoke_credentials_required"
              c:identifier="e_source_invoke_credentials_required"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4655">Asynchronously calls the InvokeCredentialsRequired method on the server side,
to inform clients that credentials are required.

When the operation is finished, @callback will be called. You can then
call e_source_invoke_credentials_required_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="370"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4657">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4658">an #ESourceCredentialsReason, why the credentials are required</doc>
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4659">PEM-encoded secure connection certificate, or an empty string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4660">a bit-or of #GTlsCertificateFlags for secure connection certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
          <parameter name="op_error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4661">a #GError with a description of the previous credentials error, or %NULL</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4662">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="6">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4663">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4664">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="invoke_credentials_required_finish"
              c:identifier="e_source_invoke_credentials_required_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4704">Finishes the operation started with e_source_invoke_credentials_required().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="379"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4714">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4706">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4707">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="invoke_credentials_required_sync"
              c:identifier="e_source_invoke_credentials_required_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4490">Let's the client-side know that credentials are required. The @reason defines which
parameters are used. The client passed the credentials with an e_source_invoke_authenticate()
call.

The %E_SOURCE_CREDENTIALS_REASON_REQUIRED is used for the first credentials prompt,
when the client can return credentials as stored from the previous success login.

The %E_SOURCE_CREDENTIALS_REASON_REJECTED is used when the previously used credentials
had been rejected by the server. That usually means that the user should be asked
to provide/correct the credentials.

The %E_SOURCE_CREDENTIALS_REASON_SSL_FAILED is used when a secured connection failed
due to some server-side certificate issues.

The %E_SOURCE_CREDENTIALS_REASON_ERROR is used when the server returned an error.
It is not possible to connect to it at the moment usually.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="362"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4519">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4492">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4493">an #ESourceCredentialsReason, why the credentials are required</doc>
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4494">PEM-encoded secure connection certificate, or an empty string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4495">a bit-or of #GTlsCertificateFlags for secure connection certificate</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
          <parameter name="op_error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4496">a #GError with a description of the previous credentials error, or %NULL</doc>
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4497">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_password"
              c:identifier="e_source_lookup_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4282">Asynchronously looks up a password for @source.  Both the default and
session keyrings are queried.  This operation does not rely on the
registry service and therefore works for any #ESource -- registered
or "scratch".

When the operation is finished, @callback will be called.  You can then
call e_source_lookup_password_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="344"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4284">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4285">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4286">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4287">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_password_finish"
              c:identifier="e_source_lookup_password_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4324">Finishes the operation started with e_source_lookup_password().

Note the boolean return value indicates whether the lookup operation
itself completed successfully, not whether a password was found.  If
no password was found, the function will set @out_password to %NULL
but still return %TRUE.  If an error occurs, the function sets @error
and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="348"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4339">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4326">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4327">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_password"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4328">return location for the password, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_password_sync"
              c:identifier="e_source_lookup_password_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4220">Looks up a password for @source.  Both the default and session keyrings
are queried.  This operation does not rely on the registry service and
therefore works for any #ESource -- registered or "scratch".

Note the boolean return value indicates whether the lookup operation
itself completed successfully, not whether a password was found.  If
no password was found, the function will set @out_password to %NULL
but still return %TRUE.  If an error occurs, the function sets @error
and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="340"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4237">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4222">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4223">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="out_password"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4224">return location for the password, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_load"
              c:identifier="e_source_mail_signature_load"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="559">Asynchronously loads a signature from the signature file for @source,
which is given by e_source_mail_signature_get_file().

If the signature file is executable, it will be executed and its output
captured as the email signature content.  If the signature file is not
executable, the email signature content is read directly from the file.

When the operation is finished, @callback will be called.  You can
then call e_source_mail_signature_load_finish() to get the result of
the operation.</doc>
        <source-position filename="e-source-mail-signature.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="561">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="562">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="563">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="564">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="566">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_load_finish"
              c:identifier="e_source_mail_signature_load_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="611">Finishes an operation started with e_source_mail_signature_load().  The
signature file contents are placed in @contents, and @length is set to
the size of the @contents string.  The @contents string should be freed
with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-signature.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="625">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="613">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="614">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="contents"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="615">return location for the signature content</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="616">return location for the length of the signature
         content, or %NULL if the length is not needed</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_load_sync"
              c:identifier="e_source_mail_signature_load_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="368">Loads a signature from the signature file for @source, which is
given by e_source_mail_signature_get_file().  The signature contents
are placed in @contents, and @length is set to the size of the @contents
string.  The @contents string should be freed with g_free() when no
longer needed.

If the signature file is executable, it will be executed and its output
captured as the email signature content.  If the signature file is not
executable, the email signature content is read directly from the file.</doc>
        <source-position filename="e-source-mail-signature.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="387">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="370">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="contents"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="371">return location for the signature content</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="372">return location for the length of the signature
         content, or %NULL if the length is not needed</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="374">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_replace"
              c:identifier="e_source_mail_signature_replace"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="724">Asynchrously replaces the signature file for @source with the given
@contents of @length bytes.  The signature file for @source is given
by e_source_mail_signature_get_file().

When the operation is finished, @callback will be called.  You can
then call e_source_mail_signature_replace_finish() to get the result
of the operation.</doc>
        <source-position filename="e-source-mail-signature.h" line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="726">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="contents" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="727">the signature contents</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="728">the length of @contents in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="729">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="730">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="731">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="733">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_replace_finish"
              c:identifier="e_source_mail_signature_replace_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="780">Finishes an operation started with e_source_mail_signature_replace().</doc>
        <source-position filename="e-source-mail-signature.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="788">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="782">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="783">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_replace_sync"
              c:identifier="e_source_mail_signature_replace_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="684">Replaces the signature file for @source with the given @contents
of @length bytes.  The signature file for @source is given by
e_source_mail_signature_get_file().</doc>
        <source-position filename="e-source-mail-signature.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="696">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="686">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="contents" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="687">the signature contents</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="688">the length of @contents in bytes</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="689">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_symlink"
              c:identifier="e_source_mail_signature_symlink"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="875">Asynchronously replaces the signature file for @source with a symbolic
link to @symlink_target, which should be an executable file that prints
a mail signature to standard output.  The signature file for @source
is given by e_source_mail_signature_get_file().

When the operation is finished, @callback will be called.  You can
then call e_source_mail_signature_symlink_finish() to get the result
of the operation.</doc>
        <source-position filename="e-source-mail-signature.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="877">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="symlink_target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="878">executable filename to link to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="io_priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="879">the I/O priority of the request</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="880">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="881">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="883">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_symlink_finish"
              c:identifier="e_source_mail_signature_symlink_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="929">Finishes an operation started with e_source_mail_signature_symlink().</doc>
        <source-position filename="e-source-mail-signature.h" line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="937">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="931">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="932">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mail_signature_symlink_sync"
              c:identifier="e_source_mail_signature_symlink_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="832">Replaces the signature file for @source with a symbolic link to
@symlink_target, which should be an executable file that prints
a mail signature to standard output.  The signature file for
@source is given by e_source_mail_signature_get_file().</doc>
        <source-position filename="e-source-mail-signature.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="844">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="834">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="symlink_target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="835">executable filename to link to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="836">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="proxy_lookup"
              c:identifier="e_source_proxy_lookup"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1783">Asynchronously determines what proxy, if any, to use to connect to @uri.
See e_source_proxy_lookup_sync() for more details.

When the operation is finished, @callback will be called.  You can then
call e_source_proxy_lookup_finish() to get the result of the operation.</doc>
        <source-position filename="e-source-proxy.h" line="149"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1785">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1786">a URI representing the destination to connect to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1787">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1788">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1790">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="proxy_lookup_finish"
              c:identifier="e_source_proxy_lookup_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1832">Finishes the operation started with e_source_proxy_lookup().

Free the returned proxy URIs with g_strfreev() when finished with them.</doc>
        <source-position filename="e-source-proxy.h" line="154"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1842">a %NULL-terminated array of proxy URIs, or %NULL</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1834">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1835">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="proxy_lookup_sync"
              c:identifier="e_source_proxy_lookup_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1593">Looks into @source's #ESourceProxy extension to determine what proxy,
if any, to use to connect to @uri.  The returned proxy URIs are of the
same form described by g_proxy_resolver_lookup().

The proxy extension's #ESourceProxy:method controls how proxy URIs are
determined:

When using @E_PROXY_METHOD_DEFAULT, the function will defer to the
#GProxyResolver returned by g_proxy_resolver_get_default().

When using @E_PROXY_METHOD_MANUAL, the function will configure a
#GSimpleProxyResolver from the HTTP, HTTPS, FTP and SOCKS properties,
as well as #ESourceProxy:ignore-hosts.

When using @E_PROXY_METHOD_AUTO, the function will execute a proxy
auto-config (PAC) file at #ESourceProxy:autoconfig-url.

When using @E_PROXY_METHOD_NONE, the function will only return
&lt;literal&gt;direct://&lt;/literal&gt;.

If @source does not have an #ESourceProxy extension, the function sets
@error to @G_IO_ERROR_NOT_SUPPORTED and returns %NULL.

Free the returned proxy URIs with g_strfreev() when finished with them.</doc>
        <source-position filename="e-source-proxy.h" line="145"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1625">a %NULL-terminated array of proxy URIs, or %NULL</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1595">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1596">a URI representing the destination to connect to</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1597">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_dbus_object"
              c:identifier="e_source_ref_dbus_object"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3114">Returns the #GDBusObject that was passed to e_source_new().

The returned #GDBusObject is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source.h" line="248"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3123">the #GDBusObject for @source, or %NULL</doc>
          <type name="Gio.DBusObject" c:type="GDBusObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3116">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_main_context"
              c:identifier="e_source_ref_main_context"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3144">Returns the #GMainContext on which event sources for @source are to
be attached.

The returned #GMainContext is referenced for thread-safety and must be
unreferenced with g_main_context_unref() when finished with it.</doc>
        <source-position filename="e-source.h" line="249"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3154">a #GMainContext</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3146">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh_add_timeout"
              c:identifier="e_source_refresh_add_timeout"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="479">This is a simple way to schedule a periodic data source refresh.

Adds a timeout #GSource to @context and handles all the bookkeeping
if @source's refresh #ESourceRefresh:enabled state or its refresh
#ESourceRefresh:interval-minutes value changes.  The @callback is
expected to dispatch an asynchronous job to connect to and fetch
updates from a remote server.

The returned ID can be passed to e_source_refresh_remove_timeout() to
remove the timeout from @context.  Note the ID is a private handle and
cannot be passed to g_source_remove().</doc>
        <source-position filename="e-source-refresh.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-refresh.c"
               line="501">a refresh timeout ID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="481">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="context"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="482">a #GMainContext, or %NULL (if %NULL, the default
          context will be used)</doc>
            <type name="GLib.MainContext" c:type="GMainContext*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2"
                     destroy="3">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="484">function to call on each timeout</doc>
            <type name="SourceRefreshFunc" c:type="ESourceRefreshFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="485">data to pass to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="486">function to call when the timeout is removed,
         or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_force_timeout"
              c:identifier="e_source_refresh_force_timeout"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="541">For all timeouts added with e_source_refresh_add_timeout(), invokes
the #ESourceRefreshFunc callback immediately and then, if the refresh
#ESourceRefresh:enabled state is TRUE, reschedules the timeout.

This function is called automatically when the #ESource switches from
disabled to enabled, but can also be useful when a network connection
becomes available or when waking up from hibernation or suspend.</doc>
        <source-position filename="e-source-refresh.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="543">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh_remove_timeout"
              c:identifier="e_source_refresh_remove_timeout"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="569">Removes a timeout #GSource added by e_source_refresh_add_timeout().</doc>
        <source-position filename="e-source-refresh.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-refresh.c"
               line="576">%TRUE if the timeout was found and removed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="571">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="refresh_timeout_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="572">a refresh timeout ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_remove_timeouts_by_data"
              c:identifier="e_source_refresh_remove_timeouts_by_data"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="605">Removes all timeout #GSource's added by e_source_refresh_add_timeout()
whose callback data pointer matches @user_data.</doc>
        <source-position filename="e-source-refresh.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-refresh.c"
               line="613">the number of timeouts found and removed</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="607">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="608">user data to match against timeout callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remote_create"
              c:identifier="e_source_remote_create"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3788">Asynchronously creates a new remote resource by picking out relevant
details from @scratch_source.  The @scratch_source must be an #ESource
with no #GDBusObject.  The @source must be #ESource:remote-creatable.

The details required to create the resource vary by #ECollectionBackend,
but in most cases the @scratch_source need only define the resource type
(address book, calendar, etc.), a display name for the resource, and
possibly a server-side path or ID for the resource.

When the operation is finished, @callback will be called.  You can then
call e_source_remote_create_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="289"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3790">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="scratch_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3791">an #ESource describing the resource to create</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3792">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3793">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3795">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remote_create_finish"
              c:identifier="e_source_remote_create_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3832">Finishes the operation started with e_source_remote_create().  If
an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="294"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3841">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3834">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3835">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remote_create_sync"
              c:identifier="e_source_remote_create_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3747">Creates a new remote resource by picking out relevant details from
@scratch_source.  The @scratch_source must be an #ESource with no
#GDBusObject.  The @source must be #ESource:remote-creatable.

The details required to create the resource vary by #ECollectionBackend,
but in most cases the @scratch_source need only define the resource type
(address book, calendar, etc.), a display name for the resource, and
possibly a server-side path or ID for the resource.

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="285"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3765">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3749">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="scratch_source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3750">an #ESource describing the resource to create</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3751">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remote_delete"
              c:identifier="e_source_remote_delete"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3894">Asynchronously deletes the resource represented by @source from a remote
server.  The @source must be #ESource:remote-deletable.  This will also
delete the key file for @source and broadcast its removal to all clients,
similar to e_source_remove().

When the operation is finished, @callback will be called.  You can then
call e_source_remote_delete_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3896">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3897">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3898">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3900">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remote_delete_finish"
              c:identifier="e_source_remote_delete_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3929">Finishes the operation started with e_source_remote_delete().  If
an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3938">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3931">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3932">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remote_delete_sync"
              c:identifier="e_source_remote_delete_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3861">Deletes the resource represented by @source from a remote server.
The @source must be #ESource:remote-deletable.  This will also delete
the key file for @source and broadcast its removal to all clients,
similar to e_source_remove_sync().

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="297"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3874">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3863">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3864">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove" c:identifier="e_source_remove" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3587">Asynchronously requests the D-Bus service to delete the key files for
@source and all of its descendants and broadcast their removal to all
clients.  The @source must be #ESource:removable.

When the operation is finished, @callback will be called.  You can then
call e_source_remove_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="268"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3589">the #ESource to be removed</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3590">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3591">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3593">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_finish"
              c:identifier="e_source_remove_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3621">Finishes the operation started with e_source_remove().  If an
error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="272"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3630">%TRUE on success, %FALSE of failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3623">the #ESource to be removed</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3624">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_sync"
              c:identifier="e_source_remove_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3555">Requests the D-Bus service to delete the key files for @source and all of
its descendants and broadcast their removal to all clients.  The @source
must be #ESource:removable.

If an error occurs, the functon will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="265"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3567">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3557">the #ESource to be removed</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3558">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_connection_status"
              c:identifier="e_source_set_connection_status"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3506">Set's current connection status of the @source.</doc>
        <source-position filename="e-source.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3508">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="connection_status" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3509">one of the #ESourceConnectionStatus</doc>
            <type name="SourceConnectionStatus"
                  c:type="ESourceConnectionStatus"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="e_source_set_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3216">Sets the display name for @source.  The @display_name argument must be a
valid UTF-8 string.  Use the display name to represent the #ESource in a
user interface.

The internal copy of @display_name is automatically stripped of leading
and trailing whitespace.</doc>
        <source-position filename="e-source.h" line="252"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3218">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="display_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3219">a display name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="e_source_set_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2814">Enables or disables @source.

An application should try to honor this setting if at all possible,
even if it does not provide a way to change the setting through its
user interface.  Disabled data sources should generally be hidden.</doc>
        <source-position filename="e-source.h" line="238"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2816">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2817">whether to enable @source</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_parent"
              c:identifier="e_source_set_parent"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2749">Identifies the parent of @source by its unique identifier string.
This can only be set prior to adding @source to an #ESourceRegistry.

The internal copy of #ESource:parent is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2751">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="parent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2752">the UID of the parent #ESource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_password"
              c:identifier="e_source_store_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4141">Asynchronously stores a password for @source.  This operation does
not rely on the registry service and therefore works for any #ESource
-- registered or "scratch".

If @permanently is %TRUE, the password is stored in the default keyring.
Otherwise the password is stored in the memory-only session keyring.  If
an error occurs, the function sets @error and returns %FALSE.

When the operation is finished, @callback will be called.  You can then
call e_source_store_password_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="331"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4143">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4144">the password to store</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="permanently" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4145">store permanently or just for the session</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4146">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4147">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4148">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_password_finish"
              c:identifier="e_source_store_password_finish"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4193">Finishes the operation started with e_source_store_password().</doc>
        <source-position filename="e-source.h" line="337"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4201">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4195">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4196">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_password_sync"
              c:identifier="e_source_store_password_sync"
              version="3.12"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="4071">Stores a password for @source.  This operation does not rely on the
registry service and therefore works for any #ESource -- registered
or "scratch".

If @permanently is %TRUE, the password is stored in the default keyring.
Otherwise the password is stored in the memory-only session keyring.  If
an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="326"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="4087">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4073">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4074">the password to store</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="permanently" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4075">store permanently or just for the session</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4076">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="to_string" c:identifier="e_source_to_string" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3409">Outputs the current contents of @source as a key file string.
Free the returned string with g_free().</doc>
        <source-position filename="e-source.h" line="258"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3418">a newly-allocated string</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3411">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="length"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3412">return location for the length of the returned
         string, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_last_credentials_required_arguments"
              c:identifier="e_source_unset_last_credentials_required_arguments"
              version="3.18">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="5195">Asynchronously calls the UnsetLastCredentialsRequiredArguments method
on the server side, to unset the last values used for the 'credentials-required'
signal.

When the operation is finished, @callback will be called. You can then
call e_source_unset_last_credentials_required_arguments_finish() to get
the result of the operation.</doc>
        <source-position filename="e-source.h" line="428"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5197">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5198">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5199">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5200">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_last_credentials_required_arguments_finish"
              c:identifier="e_source_unset_last_credentials_required_arguments_finish"
              version="3.18"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="5230">Finishes the operation started with e_source_unset_last_credentials_required_arguments().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="433"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="5240">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5232">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5233">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_last_credentials_required_arguments_sync"
              c:identifier="e_source_unset_last_credentials_required_arguments_sync"
              version="3.18"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="5147">Unsets the last used arguments of the 'credentials-required' signal emission.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source.h" line="424"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="5157">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5149">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="5150">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write" c:identifier="e_source_write" version="3.6">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3683">Asynchronously submits the current contents of @source to the D-Bus
service to be written to disk and broadcast to other clients.  The
@source must be #ESource:writable.

When the operation is finished, @callback will be called.  You can then
call e_source_write_finish() to get the result of the operation.</doc>
        <source-position filename="e-source.h" line="278"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3685">a writable #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3686">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3687">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3689">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_finish"
              c:identifier="e_source_write_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3717">Finishes the operation started with e_source_write().  If an
error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="282"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3726">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3719">a writable #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3720">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_sync"
              c:identifier="e_source_write_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="3651">Submits the current contents of @source to the D-Bus service to be
written to disk and broadcast to other clients.  The @source must
be #ESource:writable.

If an error occurs, the functon will set @error and return %FALSE.</doc>
        <source-position filename="e-source.h" line="275"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source.c"
               line="3663">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3653">a writable #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3654">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connection-status" transfer-ownership="none">
        <type name="SourceConnectionStatus"/>
      </property>
      <property name="dbus-object"
                introspectable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type/>
      </property>
      <property name="display-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="enabled"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="main-context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="GLib.MainContext"/>
      </property>
      <property name="parent" writable="1" transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="remote-creatable" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="remote-deletable" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="removable" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="uid"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="writable" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourcePrivate" c:type="ESourcePrivate*"/>
      </field>
      <glib:signal name="authenticate" when="last" no-recurse="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2360">Let's the backend know provided credentials to use to login
to (possibly remote) data store.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2363">an #ENamedParameters with provided credentials</doc>
            <type name="NamedParameters"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="changed" when="last" no-recurse="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2318">The ::changed signal is emitted when a property in @source or
one of its extension objects changes.  A common use for this
signal is to notify a #GtkTreeModel containing data collected
from #ESource&lt;!-- --&gt;s that it needs to update a row.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="credentials-required" when="last" no-recurse="1">
        <doc xml:space="preserve"
             filename="e-source.c"
             line="2335">The ::credentials-required signal is emitted when the @source
requires credentials to connect to (possibly remote)
data store. The credentials can be passed to the backend using
e_source_invoke_authenticate() function.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2338">an #ESourceCredentialsReason indicating why the credentials are requested</doc>
            <type name="SourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2339">PEM-encoded secure connection certificate for failed SSL/TLS checks</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2340">what failed with the SSL/TLS certificate</doc>
            <type name="Gio.TlsCertificateFlags"/>
          </parameter>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="2341">a text description of the error, if any</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <class name="SourceAddressBook"
           c:symbol-prefix="source_address_book"
           c:type="ESourceAddressBook"
           version="3.6"
           parent="SourceBackend"
           glib:type-name="ESourceAddressBook"
           glib:get-type="e_source_address_book_get_type"
           glib:type-struct="SourceAddressBookClass">
      <doc xml:space="preserve"
           filename="e-source-address-book.c"
           line="18">The #ESourceAddressBook extension identifies the #ESource as an
address book.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceAddressBook *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_ADDRESS_BOOK);
]|</doc>
      <source-position filename="e-source-address-book.h" line="78"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceBackend" c:type="ESourceBackend"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceAddressBookPrivate"
              c:type="ESourceAddressBookPrivate*"/>
      </field>
    </class>
    <record name="SourceAddressBookClass"
            c:type="ESourceAddressBookClass"
            glib:is-gtype-struct-for="SourceAddressBook">
      <source-position filename="e-source-address-book.h" line="78"/>
      <field name="parent_class">
        <type name="SourceBackendClass" c:type="ESourceBackendClass"/>
      </field>
    </record>
    <record name="SourceAddressBookPrivate"
            c:type="ESourceAddressBookPrivate"
            disguised="1">
      <source-position filename="e-source-address-book.h" line="60"/>
    </record>
    <class name="SourceAlarms"
           c:symbol-prefix="source_alarms"
           c:type="ESourceAlarms"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceAlarms"
           glib:get-type="e_source_alarms_get_type"
           glib:type-struct="SourceAlarmsClass">
      <doc xml:space="preserve"
           filename="e-source-alarms.c"
           line="18">The #ESourceAlarms extension tracks alarm state for a calendar.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceAlarms *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_ALARMS);
]|</doc>
      <source-position filename="e-source-alarms.h" line="78"/>
      <method name="dup_last_notified"
              c:identifier="e_source_alarms_dup_last_notified"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-alarms.c"
             line="234">Thread-safe variation of e_source_alarms_get_last_notified().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-alarms.h" line="86"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-alarms.c"
               line="243">a newly-allocated copy of #ESourceAlarms:last-notified</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="236">an #ESourceAlarms</doc>
            <type name="SourceAlarms" c:type="ESourceAlarms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_include_me"
              c:identifier="e_source_alarms_get_include_me"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-alarms.c"
             line="164">Returns whether the user should be alerted about upcoming appointments
in the calendar described by the #ESource to which @extension belongs.

Alarm daemons such as evolution-alarm-notify can use this property to
decide which calendars to query for upcoming appointments.</doc>
        <source-position filename="e-source-alarms.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-alarms.c"
               line="174">whether to show alarms for upcoming appointments</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="166">an #ESourceAlarms</doc>
            <type name="SourceAlarms" c:type="ESourceAlarms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_notified"
              c:identifier="e_source_alarms_get_last_notified"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-alarms.c"
             line="213">Returns an ISO 8601 formatted timestamp of when the user was last
alerted about an upcoming appointment in the calendar described by
the #ESource to which @extension belongs.  If no valid timestamp
has been set, the function will return %NULL.</doc>
        <source-position filename="e-source-alarms.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-alarms.c"
               line="222">an ISO 8601 timestamp, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="215">an #ESourceAlarms</doc>
            <type name="SourceAlarms" c:type="ESourceAlarms*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_include_me"
              c:identifier="e_source_alarms_set_include_me"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-alarms.c"
             line="186">Sets whether the user should be alerted about upcoming appointments in
the calendar described by the #ESource to which @extension belongs.

Alarm daemons such as evolution-alarm-notify can use this property to
decide which calendars to query for upcoming appointments.</doc>
        <source-position filename="e-source-alarms.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="188">an #ESourceAlarms</doc>
            <type name="SourceAlarms" c:type="ESourceAlarms*"/>
          </instance-parameter>
          <parameter name="include_me" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="189">whether to show alarms for upcoming appointments</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_last_notified"
              c:identifier="e_source_alarms_set_last_notified"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-alarms.c"
             line="265">Sets an ISO 8601 formatted timestamp of when the user was last
alerted about an upcoming appointment in the calendar described
by the #ESource to which @extension belongs.

If @last_notified is non-%NULL, the function will validate the
timestamp before setting the #ESourceAlarms:last-notified property.
Invalid timestamps are discarded with a runtime warning.

Generally, this function should only be called by an alarm daemon
such as evolution-alarm-notify.</doc>
        <source-position filename="e-source-alarms.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="267">an #ESourceAlarms</doc>
            <type name="SourceAlarms" c:type="ESourceAlarms*"/>
          </instance-parameter>
          <parameter name="last_notified"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-alarms.c"
                 line="268">an ISO 8601 timestamp, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="include-me"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="last-notified"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceAlarmsPrivate" c:type="ESourceAlarmsPrivate*"/>
      </field>
    </class>
    <record name="SourceAlarmsClass"
            c:type="ESourceAlarmsClass"
            glib:is-gtype-struct-for="SourceAlarms">
      <source-position filename="e-source-alarms.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceAlarmsPrivate"
            c:type="ESourceAlarmsPrivate"
            disguised="1">
      <source-position filename="e-source-alarms.h" line="60"/>
    </record>
    <class name="SourceAuthentication"
           c:symbol-prefix="source_authentication"
           c:type="ESourceAuthentication"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceAuthentication"
           glib:get-type="e_source_authentication_get_type"
           glib:type-struct="SourceAuthenticationClass">
      <doc xml:space="preserve"
           filename="e-source-authentication.c"
           line="18">The #ESourceAuthentication extension tracks authentication settings
for a user account on a remote server.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceAuthentication *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_AUTHENTICATION);
]|</doc>
      <source-position filename="e-source-authentication.h" line="78"/>
      <method name="dup_credential_name"
              c:identifier="e_source_authentication_dup_credential_name"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="925">Thread-safe variation of e_source_authentication_get_credential_name().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-authentication.h" line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="934">a newly-allocated copy of #ESourceAuthentication:credential-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="927">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_host"
              c:identifier="e_source_authentication_dup_host"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="482">Thread-safe variation of e_source_authentication_get_host().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-authentication.h" line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="491">a newly-allocated copy of #ESourceAuthentication:host</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="484">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_method"
              c:identifier="e_source_authentication_dup_method"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="573">Thread-safe variation of e_source_authentication_get_method().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-authentication.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="582">a newly-allocated copy of #ESourceAuthentication:method</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="575">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_proxy_uid"
              c:identifier="e_source_authentication_dup_proxy_uid"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="713">Thread-safe variation of e_source_authentication_get_proxy_uid().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-authentication.h" line="108"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="722">a newly-allocated copy of #ESourceAuthentication:proxy-uid</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="715">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_user"
              c:identifier="e_source_authentication_dup_user"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="839">Thread-safe variation of e_source_authentication_get_user().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-authentication.h" line="120"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="848">a newly-allocated copy of #ESourceAuthentication:user</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="841">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_credential_name"
              c:identifier="e_source_authentication_get_credential_name"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="904">Returns the credential name used to pass the stored or gathered credential
(like password) into the e_source_invoke_authenticate(). This is
a counterpart of the authentication method. The %NULL means to use
the default name, which is #E_SOURCE_CREDENTIAL_PASSWORD.</doc>
        <source-position filename="e-source-authentication.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="913">the credential name to use for authentication, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="906">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_host"
              c:identifier="e_source_authentication_get_host"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="464">Returns the host name used to authenticate to a remote account.</doc>
        <source-position filename="e-source-authentication.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="470">the host name of a remote account</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="466">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_external"
              c:identifier="e_source_authentication_get_is_external"
              version="3.36">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="993">Get if the authentication is done by an external application such as a
Single Sign On application (e.g. GNOME Online Accounts)</doc>
        <source-position filename="e-source-authentication.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="1000">%TRUE if the authentication is done by an external application,
%FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="995">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method"
              c:identifier="e_source_authentication_get_method"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="552">Returns the authentication method for a remote account.  There are
no pre-defined method names; backends are free to set this however
they wish.  If authentication is not required for a remote account,
the convention is to set #ESourceAuthentication:method to "none".</doc>
        <source-position filename="e-source-authentication.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="561">the authentication method for a remote account</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="554">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="e_source_authentication_get_port"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="642">Returns the port number used to authenticate to a remote account.</doc>
        <source-position filename="e-source-authentication.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="648">the port number of a remote account</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="644">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_proxy_uid"
              c:identifier="e_source_authentication_get_proxy_uid"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="694">Returns the #ESource:uid of the #ESource that holds network proxy
settings for use when connecting to a remote account.</doc>
        <source-position filename="e-source-authentication.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="701">the proxy profile #ESource:uid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="696">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_remember_password"
              c:identifier="e_source_authentication_get_remember_password"
              version="3.10">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="776">Returns whether to offer to remember the provided password by default
in password prompts.  This way, if the user unchecks the option it will
be unchecked by default in future password prompts.</doc>
        <source-position filename="e-source-authentication.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="784">whether to offer to remember the password by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="778">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_user"
              c:identifier="e_source_authentication_get_user"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="821">Returns the user name used to authenticate to a remote account.</doc>
        <source-position filename="e-source-authentication.h" line="118"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="827">the user name of a remote account</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="823">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_connectable"
              c:identifier="e_source_authentication_ref_connectable"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="432">Returns a #GSocketConnectable instance constructed from @extension's
#ESourceAuthentication:host and #ESourceAuthentication:port properties,
or %NULL if the #ESourceAuthentication:host is not set.

The returned #GSocketConnectable is referenced for thread-safety and must
be unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-authentication.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="443">a #GSocketConnectable, or %NULL</doc>
          <type name="Gio.SocketConnectable" c:type="GSocketConnectable*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="434">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="required"
              c:identifier="e_source_authentication_required"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="406">This is a convenience function which returns whether authentication
is required at all, regardless of the method used.  This relies on
the convention of setting #ESourceAuthentication:method to "none"
when authentication is &lt;emphasis&gt;not&lt;/emphasis&gt; required.</doc>
        <source-position filename="e-source-authentication.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-authentication.c"
               line="415">whether authentication is required at all</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="408">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_credential_name"
              c:identifier="e_source_authentication_set_credential_name"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="956">Sets the credential name used to pass the stored or gathered credential
(like password) into the e_source_invoke_authenticate(). This is
a counterpart of the authentication method. The %NULL means to use
the default name, which is #E_SOURCE_CREDENTIAL_PASSWORD.

The internal copy of @credential_name is automatically stripped
of leading and trailing whitespace. If the resulting string is
empty, %NULL is set instead.</doc>
        <source-position filename="e-source-authentication.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="958">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="credential_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="959">a credential name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_host"
              c:identifier="e_source_authentication_set_host"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="513">Sets the host name used to authenticate to a remote account.

The internal copy of @host is automatically stripped of leading and
trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-authentication.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="515">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="host"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="516">a host name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_is_external"
              c:identifier="e_source_authentication_set_is_external"
              version="3.36">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="1013">Set if the authentication is done by an external application such as a
Single Sign On application (e.g. GNOME Online Accounts)</doc>
        <source-position filename="e-source-authentication.h" line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="1015">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="is_external" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="1016">%TRUE if the authentication is done using an external
application, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_method"
              c:identifier="e_source_authentication_set_method"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="604">Sets the authentication method for a remote account.  There are no
pre-defined method names; backends are free to set this however they
wish.  If authentication is not required for a remote account, the
convention is to set the method to "none".  In keeping with that
convention, #ESourceAuthentication:method will be set to "none" if
@method is %NULL or an empty string.</doc>
        <source-position filename="e-source-authentication.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="606">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="607">authentication method, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port"
              c:identifier="e_source_authentication_set_port"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="660">Sets the port number used to authenticate to a remote account.</doc>
        <source-position filename="e-source-authentication.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="662">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="663">a port number</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_proxy_uid"
              c:identifier="e_source_authentication_set_proxy_uid"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="744">Sets the #ESource:uid of the #ESource that holds network proxy settings
for use when connecting to a remote account.</doc>
        <source-position filename="e-source-authentication.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="746">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="proxy_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="747">the proxy profile #ESource:uid</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_remember_password"
              c:identifier="e_source_authentication_set_remember_password"
              version="3.10">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="796">Sets whether to offer to remember the provided password by default in
password prompts.  This way, if the user unchecks the option it will be
unchecked by default in future password prompts.</doc>
        <source-position filename="e-source-authentication.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="798">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="remember_password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="799">whether to offer to remember the password by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_user"
              c:identifier="e_source_authentication_set_user"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-authentication.c"
             line="870">Sets the user name used to authenticate to a remote account.

The internal copy of @user is automatically stripped of leading and
trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-authentication.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="872">an #ESourceAuthentication</doc>
            <type name="SourceAuthentication" c:type="ESourceAuthentication*"/>
          </instance-parameter>
          <parameter name="user"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-authentication.c"
                 line="873">a user name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="connectable" transfer-ownership="none">
        <type name="Gio.SocketConnectable"/>
      </property>
      <property name="credential-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="host"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="is-external"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="method"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="proxy-uid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="remember-password"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="user"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceAuthenticationPrivate"
              c:type="ESourceAuthenticationPrivate*"/>
      </field>
    </class>
    <record name="SourceAuthenticationClass"
            c:type="ESourceAuthenticationClass"
            glib:is-gtype-struct-for="SourceAuthentication">
      <source-position filename="e-source-authentication.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceAuthenticationPrivate"
            c:type="ESourceAuthenticationPrivate"
            disguised="1">
      <source-position filename="e-source-authentication.h" line="60"/>
    </record>
    <enumeration name="SourceAuthenticationResult"
                 version="3.6"
                 glib:type-name="ESourceAuthenticationResult"
                 glib:get-type="e_source_authentication_result_get_type"
                 c:type="ESourceAuthenticationResult">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="68">Status codes used by the #EBackend authentication wrapper.</doc>
      <member name="unknown"
              value="-1"
              c:identifier="E_SOURCE_AUTHENTICATION_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="70">Unknown error occurred while authenticating. Since: 3.26</doc>
      </member>
      <member name="error"
              value="0"
              c:identifier="E_SOURCE_AUTHENTICATION_ERROR"
              glib:nick="error">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="72">An error occurred while authenticating.</doc>
      </member>
      <member name="error_ssl_failed"
              value="1"
              c:identifier="E_SOURCE_AUTHENTICATION_ERROR_SSL_FAILED"
              glib:nick="error-ssl-failed">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="74">An SSL certificate check failed. Since: 3.16.</doc>
      </member>
      <member name="accepted"
              value="2"
              c:identifier="E_SOURCE_AUTHENTICATION_ACCEPTED"
              glib:nick="accepted">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="76">Server requesting authentication accepted password.</doc>
      </member>
      <member name="rejected"
              value="3"
              c:identifier="E_SOURCE_AUTHENTICATION_REJECTED"
              glib:nick="rejected">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="78">Server requesting authentication rejected password.</doc>
      </member>
      <member name="required"
              value="4"
              c:identifier="E_SOURCE_AUTHENTICATION_REQUIRED"
              glib:nick="required">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="80">Server requesting authentication, but none was given.</doc>
      </member>
    </enumeration>
    <class name="SourceAutocomplete"
           c:symbol-prefix="source_autocomplete"
           c:type="ESourceAutocomplete"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceAutocomplete"
           glib:get-type="e_source_autocomplete_get_type"
           glib:type-struct="SourceAutocompleteClass">
      <doc xml:space="preserve"
           filename="e-source-autocomplete.c"
           line="18">The #ESourceAutocomplete extension tracks contact autocompletion
settings for an address book.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceAutocomplete *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_AUTOCOMPLETE);
]|</doc>
      <source-position filename="e-source-autocomplete.h" line="78"/>
      <method name="get_include_me"
              c:identifier="e_source_autocomplete_get_include_me"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-autocomplete.c"
             line="122">Returns whether the address book described by the #ESource to which
@extension belongs should be queried when the user inputs a partial
contact name or email address.</doc>
        <source-position filename="e-source-autocomplete.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-autocomplete.c"
               line="130">whether to use the autocomplete feature</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autocomplete.c"
                 line="124">an #ESourceAutocomplete</doc>
            <type name="SourceAutocomplete" c:type="ESourceAutocomplete*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_include_me"
              c:identifier="e_source_autocomplete_set_include_me"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-autocomplete.c"
             line="142">Sets whether the address book described by the #ESource to which
@extension belongs should be queried when the user inputs a partial
contact name or email address.</doc>
        <source-position filename="e-source-autocomplete.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autocomplete.c"
                 line="144">an #ESourceAutocomplete</doc>
            <type name="SourceAutocomplete" c:type="ESourceAutocomplete*"/>
          </instance-parameter>
          <parameter name="include_me" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autocomplete.c"
                 line="145">whether to use the autocomplete feature</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="include-me"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceAutocompletePrivate"
              c:type="ESourceAutocompletePrivate*"/>
      </field>
    </class>
    <record name="SourceAutocompleteClass"
            c:type="ESourceAutocompleteClass"
            glib:is-gtype-struct-for="SourceAutocomplete">
      <source-position filename="e-source-autocomplete.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceAutocompletePrivate"
            c:type="ESourceAutocompletePrivate"
            disguised="1">
      <source-position filename="e-source-autocomplete.h" line="60"/>
    </record>
    <class name="SourceAutoconfig"
           c:symbol-prefix="source_autoconfig"
           c:type="ESourceAutoconfig"
           version="3.24"
           parent="SourceExtension"
           glib:type-name="ESourceAutoconfig"
           glib:get-type="e_source_autoconfig_get_type"
           glib:type-struct="SourceAutoconfigClass">
      <doc xml:space="preserve"
           filename="e-source-autoconfig.c"
           line="18">The #ESourceAutoconfig extension keeps a mapping between user-specific
sources and system-wide ones.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceAutoconfig *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_AUTOCONFIG);
]|</doc>
      <source-position filename="e-source-autoconfig.h" line="78"/>
      <method name="dup_revision"
              c:identifier="e_source_autoconfig_dup_revision"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-autoconfig.c"
             line="161">Thread-safe variation of e_source_autoconfig_get_revision().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-autoconfig.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-autoconfig.c"
               line="170">a newly-allocated copy of #ESourceAutoconfig:revision</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autoconfig.c"
                 line="163">an #ESourceAutoconfig</doc>
            <type name="SourceAutoconfig" c:type="ESourceAutoconfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_revision"
              c:identifier="e_source_autoconfig_get_revision"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-autoconfig.c"
             line="136">Returns the revision of a data source. This maps a particular version of a
system-wide source to a user-specific source.

If doesn't match, the system-wide source will be copied to the user-specific
evolution config directory, preserving the already present fields that are
not defined by the system-wide source.

If it matches, no copying is done.</doc>
        <source-position filename="e-source-autoconfig.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-autoconfig.c"
               line="149">revision of the data source</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autoconfig.c"
                 line="138">an #ESourceAutoconfig</doc>
            <type name="SourceAutoconfig" c:type="ESourceAutoconfig*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_revision"
              c:identifier="e_source_autoconfig_set_revision"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-autoconfig.c"
             line="192">Sets the revision used to map a particular version of a system-wide source
to a user-specific source.

If doesn't match, the system-wide source will be copied to the user-specific
evolution config directory, preserving the already present fields that are
not defined by the system-wide source.

If it matches, no copying is done.

The internal copy of @revision is automatically stripped of leading and
trailing whitespace.</doc>
        <source-position filename="e-source-autoconfig.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autoconfig.c"
                 line="194">an #ESourceAutoconfig</doc>
            <type name="SourceAutoconfig" c:type="ESourceAutoconfig*"/>
          </instance-parameter>
          <parameter name="revision" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-autoconfig.c"
                 line="195">a revision</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="revision"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceAutoconfigPrivate"
              c:type="ESourceAutoconfigPrivate*"/>
      </field>
    </class>
    <record name="SourceAutoconfigClass"
            c:type="ESourceAutoconfigClass"
            glib:is-gtype-struct-for="SourceAutoconfig">
      <source-position filename="e-source-autoconfig.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceAutoconfigPrivate"
            c:type="ESourceAutoconfigPrivate"
            disguised="1">
      <source-position filename="e-source-autoconfig.h" line="60"/>
    </record>
    <class name="SourceBackend"
           c:symbol-prefix="source_backend"
           c:type="ESourceBackend"
           version="3.6"
           parent="SourceExtension"
           abstract="1"
           glib:type-name="ESourceBackend"
           glib:get-type="e_source_backend_get_type"
           glib:type-struct="SourceBackendClass">
      <doc xml:space="preserve"
           filename="e-source-backend.c"
           line="18">#ESourceBackend is an abstract base class for data sources requiring
an associated backend to function.  The extension merely records the
name of the backend the data source should be paired with.</doc>
      <source-position filename="e-source-backend.h" line="68"/>
      <method name="dup_backend_name"
              c:identifier="e_source_backend_dup_backend_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-backend.c"
             line="146">Thread-safe variation of e_source_backend_get_backend_name().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-backend.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-backend.c"
               line="155">a newly-allocated copy of #ESourceBackend:backend-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-backend.c"
                 line="148">an #ESourceBackend</doc>
            <type name="SourceBackend" c:type="ESourceBackend*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_backend_name"
              c:identifier="e_source_backend_get_backend_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-backend.c"
             line="128">Returns the backend name for @extension.</doc>
        <source-position filename="e-source-backend.h" line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-backend.c"
               line="134">the backend name for @extension</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-backend.c"
                 line="130">an #ESourceBackend</doc>
            <type name="SourceBackend" c:type="ESourceBackend*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_backend_name"
              c:identifier="e_source_backend_set_backend_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-backend.c"
             line="177">Sets the backend name for @extension.

The internal copy of @backend_name is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-backend.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-backend.c"
                 line="179">an #ESourceBackend</doc>
            <type name="SourceBackend" c:type="ESourceBackend*"/>
          </instance-parameter>
          <parameter name="backend_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-backend.c"
                 line="180">a backend name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="backend-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceBackendPrivate" c:type="ESourceBackendPrivate*"/>
      </field>
    </class>
    <record name="SourceBackendClass"
            c:type="ESourceBackendClass"
            glib:is-gtype-struct-for="SourceBackend">
      <source-position filename="e-source-backend.h" line="68"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceBackendPrivate"
            c:type="ESourceBackendPrivate"
            disguised="1">
      <source-position filename="e-source-backend.h" line="50"/>
    </record>
    <class name="SourceCalendar"
           c:symbol-prefix="source_calendar"
           c:type="ESourceCalendar"
           version="3.6"
           parent="SourceSelectable"
           glib:type-name="ESourceCalendar"
           glib:get-type="e_source_calendar_get_type"
           glib:type-struct="SourceCalendarClass">
      <doc xml:space="preserve"
           filename="e-source-calendar.c"
           line="18">The #ESourceCalendar extension identifies the #ESource as a calendar.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceCalendar *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_CALENDAR);
]|</doc>
      <source-position filename="e-source-calendar.h" line="77"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceSelectable" c:type="ESourceSelectable"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCalendarPrivate" c:type="ESourceCalendarPrivate*"/>
      </field>
    </class>
    <record name="SourceCalendarClass"
            c:type="ESourceCalendarClass"
            glib:is-gtype-struct-for="SourceCalendar">
      <source-position filename="e-source-calendar.h" line="77"/>
      <field name="parent_class">
        <type name="SourceSelectableClass" c:type="ESourceSelectableClass"/>
      </field>
    </record>
    <record name="SourceCalendarPrivate"
            c:type="ESourceCalendarPrivate"
            disguised="1">
      <source-position filename="e-source-calendar.h" line="59"/>
    </record>
    <class name="SourceCamel"
           c:symbol-prefix="source_camel"
           c:type="ESourceCamel"
           version="3.6"
           parent="SourceExtension"
           abstract="1"
           glib:type-name="ESourceCamel"
           glib:get-type="e_source_camel_get_type"
           glib:type-struct="SourceCamelClass">
      <doc xml:space="preserve"
           filename="e-source-camel.c"
           line="18">#ESourceCamel itself is abstract.  Its sole function is to
bridge #GObject properties from the #CamelSettings framework to the
#ESource framework.  It does this by procedurally registering an
#ESourceCamel subtype for each available #CamelService subtype,
and then registering #GObject properties to proxy the properties in the
corresponding #CamelSettings subtype.  The #ESourceCamel owns an
instance of the appropriate #CamelSettings subtype, and redirects all
get/set operations on its own #GObject properties to its #CamelSettings
instance.  The #CamelSettings instance, now fully initialized from a key
file, can then be inserted into a new #CamelService instance using
camel_service_set_settings().

Ultimately, this is all just implementation detail for glueing two
unrelated class hierarchies together.  If you need to access provider
specific settings, use the #CamelSettings API, not this.</doc>
      <source-position filename="e-source-camel.h" line="72"/>
      <function name="generate_subtype"
                c:identifier="e_source_camel_generate_subtype"
                version="3.6">
        <doc xml:space="preserve"
             filename="e-source-camel.c"
             line="659">Generates a custom #ESourceCamel subtype for @protocol.  Instances of the
new subtype will contain a #CamelSettings instance of type @settings_type.

This function is called as part of e_source_camel_register_types() and
should not be called explicitly, except by some groupware packages that
need to share package-specific settings across their mail, calendar and
address book components.  In that case the groupware package may choose
to subclass #CamelSettings rather than #ESourceExtension since libcamel
is the lowest common denominator across all components.  This function
provides a way for the calendar and address book components of such a
package to generate an #ESourceCamel subtype for its #CamelSettings
subtype without having to load all available #CamelProvider modules.</doc>
        <source-position filename="e-source-camel.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-camel.c"
               line="677">the #GType of the generated #ESourceCamel subtype</doc>
          <type name="GType" c:type="GType"/>
        </return-value>
        <parameters>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="661">a #CamelProvider protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="settings_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="662">a subtype of #CamelSettings</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_extension_name"
                c:identifier="e_source_camel_get_extension_name"
                version="3.6">
        <doc xml:space="preserve"
             filename="e-source-camel.c"
             line="780">Returns the extension name for the #ESourceCamel subtype for @protocol.
The extension name can then be passed to e_source_get_extension() to
obtain an instance of the #ESourceCamel subtype.

For example, given a protocol named "imap" the function would return
"Imap Backend".</doc>
        <source-position filename="e-source-camel.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-camel.c"
               line="791">the #ESourceCamel extension name for @protocol</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="782">a #CamelProvider protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="get_type_name"
                c:identifier="e_source_camel_get_type_name"
                version="3.6">
        <doc xml:space="preserve"
             filename="e-source-camel.c"
             line="750">Returns the #GType name of the registered #ESourceCamel subtype for
@protocol.

For example, given a protocol named "imap" the function would return
"ESourceCamelImap".</doc>
        <source-position filename="e-source-camel.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-camel.c"
               line="760">the #ESourceCamel type name for @protocol</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <parameter name="protocol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="752">a #CamelProvider protocol</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </function>
      <function name="register_types"
                c:identifier="e_source_camel_register_types"
                version="3.6">
        <doc xml:space="preserve"
             filename="e-source-camel.c"
             line="642">Creates and registers subclasses of #ESourceCamel for each available
#CamelProvider.  This function should be called once during application
or library initialization.</doc>
        <source-position filename="e-source-camel.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </function>
      <method name="get_settings"
              c:identifier="e_source_camel_get_settings"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-camel.c"
             line="726">Returns @extension's #ESourceCamel:settings instance, pre-configured
from the #ESource to which @extension belongs.  Changes to the #ESource
will automatically propagate to the #ESourceCamel:settings instance and
vice versa.

This is essentially the glue that binds #ESource to #CamelService.
See e_source_camel_configure_service().</doc>
        <source-position filename="e-source-camel.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-camel.c"
               line="738">a configured #CamelSettings instance</doc>
          <type name="Camel.Settings" c:type="CamelSettings*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-camel.c"
                 line="728">an #ESourceCamel</doc>
            <type name="SourceCamel" c:type="ESourceCamel*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="settings" transfer-ownership="none">
        <type name="Camel.Settings"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCamelPrivate" c:type="ESourceCamelPrivate*"/>
      </field>
    </class>
    <record name="SourceCamelClass"
            c:type="ESourceCamelClass"
            glib:is-gtype-struct-for="SourceCamel">
      <source-position filename="e-source-camel.h" line="72"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
      <field name="settings_type">
        <type name="GType" c:type="GType"/>
      </field>
    </record>
    <record name="SourceCamelPrivate"
            c:type="ESourceCamelPrivate"
            disguised="1">
      <source-position filename="e-source-camel.h" line="51"/>
    </record>
    <record name="SourceClass"
            c:type="ESourceClass"
            glib:is-gtype-struct-for="Source">
      <source-position filename="e-source.h" line="218"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="changed">
        <callback name="changed">
          <source-position filename="e-source.h" line="126"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="2617">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="credentials_required">
        <callback name="credentials_required">
          <source-position filename="e-source.h" line="127"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="SourceCredentialsReason"
                    c:type="ESourceCredentialsReason"/>
            </parameter>
            <parameter name="certificate_pem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="certificate_errors" transfer-ownership="none">
              <type name="Gio.TlsCertificateFlags"
                    c:type="GTlsCertificateFlags"/>
            </parameter>
            <parameter name="op_error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="authenticate">
        <callback name="authenticate">
          <source-position filename="e-source.h" line="132"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="credentials" transfer-ownership="none">
              <type name="NamedParameters" c:type="const ENamedParameters*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_sync">
        <callback name="remove_sync" throws="1">
          <source-position filename="e-source.h" line="136"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3567">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3557">the #ESource to be removed</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3558">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove">
        <callback name="remove">
          <source-position filename="e-source.h" line="139"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3589">the #ESource to be removed</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3590">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3591">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3593">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remove_finish">
        <callback name="remove_finish" throws="1">
          <source-position filename="e-source.h" line="143"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3630">%TRUE on success, %FALSE of failure</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3623">the #ESource to be removed</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3624">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write_sync">
        <callback name="write_sync" throws="1">
          <source-position filename="e-source.h" line="146"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3663">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3653">a writable #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3654">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write">
        <callback name="write">
          <source-position filename="e-source.h" line="149"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3685">a writable #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3686">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3687">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3689">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="write_finish">
        <callback name="write_finish" throws="1">
          <source-position filename="e-source.h" line="153"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3726">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3719">a writable #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3720">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remote_create_sync">
        <callback name="remote_create_sync" throws="1">
          <source-position filename="e-source.h" line="156"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3765">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3749">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="scratch_source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3750">an #ESource describing the resource to create</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3751">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remote_create">
        <callback name="remote_create">
          <source-position filename="e-source.h" line="160"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3790">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="scratch_source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3791">an #ESource describing the resource to create</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3792">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="4">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3793">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="4">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3795">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remote_create_finish">
        <callback name="remote_create_finish" throws="1">
          <source-position filename="e-source.h" line="165"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3841">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3834">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3835">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remote_delete_sync">
        <callback name="remote_delete_sync" throws="1">
          <source-position filename="e-source.h" line="168"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3874">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3863">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3864">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remote_delete">
        <callback name="remote_delete">
          <source-position filename="e-source.h" line="171"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3896">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3897">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3898">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3900">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="remote_delete_finish">
        <callback name="remote_delete_finish" throws="1">
          <source-position filename="e-source.h" line="175"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3938">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3931">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3932">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_oauth2_access_token_sync">
        <callback name="get_oauth2_access_token_sync" throws="1">
          <source-position filename="e-source.h" line="178"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="3974">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3960">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3961">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="out_access_token"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3962">return location for the access token,
                   or %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="out_expires_in"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3964">return location for the token expiry,
                 or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_oauth2_access_token">
        <callback name="get_oauth2_access_token">
          <source-position filename="e-source.h" line="184"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="3999">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4000">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4001">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="3">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4003">data to pass to the callback function</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="get_oauth2_access_token_finish">
        <callback name="get_oauth2_access_token_finish" throws="1">
          <source-position filename="e-source.h" line="189"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source.c"
                 line="4047">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4034">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="result" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4035">a #GAsyncResult</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
            <parameter name="out_access_token"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4036">return location for the access token,
                   or %NULL</doc>
              <type name="utf8" c:type="gchar**"/>
            </parameter>
            <parameter name="out_expires_in"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full"
                       optional="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source.c"
                   line="4038">return location for the token expiry,
                 or %NULL</doc>
              <type name="gint" c:type="gint*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="invoke_credentials_required_impl">
        <callback name="invoke_credentials_required_impl" throws="1">
          <source-position filename="e-source.h" line="195"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="dbus_source"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="arg_reason" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_certificate_pem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_certificate_errors" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_dbus_error_name" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="arg_dbus_error_message" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="invoke_authenticate_impl">
        <callback name="invoke_authenticate_impl" throws="1">
          <source-position filename="e-source.h" line="205"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="dbus_source"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
            <parameter name="arg_credentials" transfer-ownership="none">
              <type name="utf8" c:type="const gchar* const*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unset_last_credentials_required_arguments_impl">
        <callback name="unset_last_credentials_required_arguments_impl"
                  throws="1">
          <source-position filename="e-source.h" line="211"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="6">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="SourceCollection"
           c:symbol-prefix="source_collection"
           c:type="ESourceCollection"
           version="3.6"
           parent="SourceBackend"
           glib:type-name="ESourceCollection"
           glib:get-type="e_source_collection_get_type"
           glib:type-struct="SourceCollectionClass">
      <doc xml:space="preserve"
           filename="e-source-collection.c"
           line="18">The #ESourceCollection extension identifies the #ESource as the root
of a data source collection.

Access the extension as follows:

|[
   #include &lt;libedataserver/libedataserver.h&gt;

   ESourceCollection *extension;

   extension = e_source_get_extension (source, E_SOURCE_EXTENSION_COLLECTION);
]|</doc>
      <source-position filename="e-source-collection.h" line="78"/>
      <method name="dup_calendar_url"
              c:identifier="e_source_collection_dup_calendar_url"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="586">Thread-safe variation of e_source_collection_get_calendar_url().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-collection.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="595">a newly-allocated copy of #ESourceCollection:calendar-url</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="588">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_contacts_url"
              c:identifier="e_source_collection_dup_contacts_url"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="669">Thread-safe variation of e_source_collection_get_contacts_url().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-collection.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="678">a newly-allocated copy of #ESourceCollection:contacts-url</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="671">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_identity"
              c:identifier="e_source_collection_dup_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="341">Thread-safe variation of e_source_collection_get_identity().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-collection.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="350">a newly-allocated copy of #ESourceCollection:identity</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="343">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_allow_sources_rename"
              c:identifier="e_source_collection_get_allow_sources_rename"
              version="3.36">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="734">Returns whether the collection backend allows a user to rename child
sources. It is meant mainly for GUI. The default is %FALSE.</doc>
        <source-position filename="e-source-collection.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="741">whether the collection backend allows a user to rename child sources</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="736">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_calendar_enabled"
              c:identifier="e_source_collection_get_calendar_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="407">Returns whether calendar sources within the collection should be
enabled.

An #ECollectionBackend running within the registry D-Bus service will
automatically synchronize any calendar sources it maintains with the
#ESourceCollection:calendar-enabled property.</doc>
        <source-position filename="e-source-collection.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="418">whether calendar sources should be enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="409">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_calendar_url"
              c:identifier="e_source_collection_get_calendar_url"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="568">Returns the calendar top URL string, that is, where to search for calendar sources.</doc>
        <source-position filename="e-source-collection.h" line="103"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="574">the calendar top URL, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="570">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contacts_enabled"
              c:identifier="e_source_collection_get_contacts_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="461">Returns whether address book sources within the collection should be
enabled.

An #ECollectionBackend running within the registry D-Bus service will
automatically synchronize any address book sources it maintains with
the #ESourceCollection:contacts-enabled property.</doc>
        <source-position filename="e-source-collection.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="472">whether address book sources should be enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="463">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contacts_url"
              c:identifier="e_source_collection_get_contacts_url"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="651">Returns the contacts top URL string, that is, where to search for contact sources.</doc>
        <source-position filename="e-source-collection.h" line="110"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="657">the contacts top URL, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="653">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identity"
              c:identifier="e_source_collection_get_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="322">Returns the string used to uniquely identify the user account at
the service provider.  Often this is an email address or user name.</doc>
        <source-position filename="e-source-collection.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="329">the collection identity</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="324">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mail_enabled"
              c:identifier="e_source_collection_get_mail_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="515">Returns whether mail sources within the collection should be enabled.

An #ECollectionBackend running within the registry D-Bus service will
automatically synchronize any mail sources it maintains with the
#ESourceCollection:mail-enabled property.</doc>
        <source-position filename="e-source-collection.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-collection.c"
               line="525">whether mail sources should be enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="517">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_allow_sources_rename"
              c:identifier="e_source_collection_set_allow_sources_rename"
              version="3.36">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="753">Sets whether the collection backend allows a user to rename child
sources. It is meant mainly for GUI. The default is %FALSE.</doc>
        <source-position filename="e-source-collection.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="755">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="allow_sources_rename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="756">whether mail sources should be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calendar_enabled"
              c:identifier="e_source_collection_set_calendar_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="430">Sets whether calendar sources within the collection should be enabled.

An #ECollectionBackend running within the registry D-Bus service will
automatically synchronize any calendar sources it maintains with the
#ESourceCollection:calendar-enabled property.

Calling this function from a registry service client has no effect until
the change is submitted to the registry service through e_source_write(),
but there should rarely be any need for clients to call this.</doc>
        <source-position filename="e-source-collection.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="432">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="calendar_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="433">whether calendar sources should be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calendar_url"
              c:identifier="e_source_collection_set_calendar_url"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="617">Sets the calendar top URL, that is, where to search for calendar sources.

The internal copy of @calendar_url is automatically stripped of leading
and trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-collection.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="619">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="calendar_url"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="620">calendar top URL, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contacts_enabled"
              c:identifier="e_source_collection_set_contacts_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="484">Sets whether address book sources within the collection should be enabled.

An #ECollectionBackend running within the registry D-Bus service will
automatically synchronize any address book sources it maintains with
the #ESourceCollection:contacts-enabled property.

Calling this function from a registry service client has no effect until
the change is submitted to the registry service through e_source_write(),
but there should rarely be any need for clients to call this.</doc>
        <source-position filename="e-source-collection.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="486">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="contacts_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="487">whether address book sources should be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contacts_url"
              c:identifier="e_source_collection_set_contacts_url"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="700">Sets the contacts top URL, that is, where to search for contact sources.

The internal copy of @contacts_url is automatically stripped of leading
and trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-collection.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="702">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="contacts_url"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="703">contacts top URL, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_identity"
              c:identifier="e_source_collection_set_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="372">Sets the string used to uniquely identify the user account at the
service provider.  Often this is an email address or user name.

The internal copy of @identity is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is
set instead.</doc>
        <source-position filename="e-source-collection.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="374">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="identity"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="375">the collection identity, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mail_enabled"
              c:identifier="e_source_collection_set_mail_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-collection.c"
             line="537">Sets whether mail sources within the collection should be enabled.

An #ECollectionBackend running within the registry D-Bus service will
automatically synchronize any mail sources it maintains with the
#ESourceCollection:mail-enabled property.

Calling this function from a registry service client has no effect until
the changes is submitted to the registry service through e_source_write(),
but there should rarely be any need for clients to call this.</doc>
        <source-position filename="e-source-collection.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="539">an #ESourceCollection</doc>
            <type name="SourceCollection" c:type="ESourceCollection*"/>
          </instance-parameter>
          <parameter name="mail_enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-collection.c"
                 line="540">whether mail sources should be enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="allow-sources-rename"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calendar-enabled"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calendar-url"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="contacts-enabled"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="contacts-url"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="identity"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mail-enabled"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceBackend" c:type="ESourceBackend"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCollectionPrivate"
              c:type="ESourceCollectionPrivate*"/>
      </field>
    </class>
    <record name="SourceCollectionClass"
            c:type="ESourceCollectionClass"
            glib:is-gtype-struct-for="SourceCollection">
      <source-position filename="e-source-collection.h" line="78"/>
      <field name="parent_class">
        <type name="SourceBackendClass" c:type="ESourceBackendClass"/>
      </field>
    </record>
    <record name="SourceCollectionPrivate"
            c:type="ESourceCollectionPrivate"
            disguised="1">
      <source-position filename="e-source-collection.h" line="60"/>
    </record>
    <enumeration name="SourceConnectionStatus"
                 version="3.16"
                 glib:type-name="ESourceConnectionStatus"
                 glib:get-type="e_source_connection_status_get_type"
                 c:type="ESourceConnectionStatus">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="116">Connection status codes used by the #ESource to indicate its connection state.
This is used in combination with authentication of the ESource. For example,
if there are multiple clients asking for a password and a user enters the password
in one of them, then the status will change into 'connecting', which is a signal
do close the password prompt in the other client, because the credentials had
been already provided.</doc>
      <member name="disconnected"
              value="0"
              c:identifier="E_SOURCE_CONNECTION_STATUS_DISCONNECTED"
              glib:nick="disconnected">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="118">The source is currently disconnected from its (possibly remote) data store.</doc>
      </member>
      <member name="awaiting_credentials"
              value="1"
              c:identifier="E_SOURCE_CONNECTION_STATUS_AWAITING_CREDENTIALS"
              glib:nick="awaiting-credentials">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="120">The source asked for credentials with a 'credentials-required' signal and
  is currently awaiting for them.</doc>
      </member>
      <member name="ssl_failed"
              value="2"
              c:identifier="E_SOURCE_CONNECTION_STATUS_SSL_FAILED"
              glib:nick="ssl-failed">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="123">A user rejected SSL certificate trust for the connection.</doc>
      </member>
      <member name="connecting"
              value="3"
              c:identifier="E_SOURCE_CONNECTION_STATUS_CONNECTING"
              glib:nick="connecting">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="125">The source is currently connecting to its (possibly remote) data store.</doc>
      </member>
      <member name="connected"
              value="4"
              c:identifier="E_SOURCE_CONNECTION_STATUS_CONNECTED"
              glib:nick="connected">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="127">The source is currently connected to its (possibly remote) data store.</doc>
      </member>
    </enumeration>
    <class name="SourceContacts"
           c:symbol-prefix="source_contacts"
           c:type="ESourceContacts"
           parent="SourceExtension"
           glib:type-name="ESourceContacts"
           glib:get-type="e_source_contacts_get_type"
           glib:type-struct="SourceContactsClass">
      <source-position filename="e-source-contacts.h" line="70"/>
      <method name="get_include_me"
              c:identifier="e_source_contacts_get_include_me">
        <source-position filename="e-source-contacts.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceContacts" c:type="ESourceContacts*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_include_me"
              c:identifier="e_source_contacts_set_include_me">
        <source-position filename="e-source-contacts.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceContacts" c:type="ESourceContacts*"/>
          </instance-parameter>
          <parameter name="include_me" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="include-me" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceContactsPrivate" c:type="ESourceContactsPrivate*"/>
      </field>
    </class>
    <record name="SourceContactsClass"
            c:type="ESourceContactsClass"
            glib:is-gtype-struct-for="SourceContacts">
      <source-position filename="e-source-contacts.h" line="70"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceContactsPrivate"
            c:type="ESourceContactsPrivate"
            disguised="1">
      <source-position filename="e-source-contacts.h" line="60"/>
    </record>
    <class name="SourceCredentialsProvider"
           c:symbol-prefix="source_credentials_provider"
           c:type="ESourceCredentialsProvider"
           version="3.16"
           parent="GObject.Object"
           glib:type-name="ESourceCredentialsProvider"
           glib:get-type="e_source_credentials_provider_get_type"
           glib:type-struct="SourceCredentialsProviderClass">
      <doc xml:space="preserve"
           filename="e-source-credentials-provider.h"
           line="59">Contains only private data that should be read and manipulated using the
functions below.</doc>
      <source-position filename="e-source-credentials-provider.h" line="78"/>
      <implements name="Extensible"/>
      <constructor name="new"
                   c:identifier="e_source_credentials_provider_new"
                   version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="263">Creates a new #ESourceCredentialsProvider, which is meant to abstract
credential management for #ESource&lt;!-- --&gt;-s.</doc>
        <source-position filename="e-source-credentials-provider.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="270">a new #ESourceCredentialsProvider</doc>
          <type name="SourceCredentialsProvider"
                c:type="ESourceCredentialsProvider*"/>
        </return-value>
        <parameters>
          <parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="265">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="ref_source" invoker="ref_source" version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="371">Returns referenced #ESource with the given @uid, or %NULL, when it could not be found.</doc>
        <source-position filename="e-source-credentials-provider.h" line="76"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="378">Referenced #ESource with the given @uid, or %NULL, when it
   could not be found. Unref the returned #ESource with g_object_unref(), when no longer needed.</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="373">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="374">an #ESource UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_prompt"
              c:identifier="e_source_credentials_provider_can_prompt"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="481">Returns whether a credentials prompt can be shown for the @source.</doc>
        <source-position filename="e-source-credentials-provider.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="488">%TRUE, when a credentials prompt can be shown for @source, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="483">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="484">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_store"
              c:identifier="e_source_credentials_provider_can_store"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="448">Returns whether the @source can store its credentials. When %FALSE is returned,
an attempt to call e_source_credentials_provider_store() or
e_source_credentials_provider_store_sync() will fail for this @source.</doc>
        <source-position filename="e-source-credentials-provider.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="457">%TRUE, when the credentials storing for @source is possible, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="450">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="451">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete"
              c:identifier="e_source_credentials_provider_delete"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="913">Asynchronously deletes any previously stored credentials for @source.

When the operation is finished, @callback will be called. You can then
call e_source_credentials_provider_delete_finish() to get the result
of the operation.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="915">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="916">an #ESource, to lookup credentials for</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="917">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="918">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="919">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="e_source_credentials_provider_delete_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="960">Finishes the operation started with e_source_credentials_provider_delete().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="970">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="962">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="963">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_sync"
              c:identifier="e_source_credentials_provider_delete_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="853">Deletes any previously stored credentials for @source.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="864">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="855">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="856">an #ESource, to store credentials for</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="857">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup"
              c:identifier="e_source_credentials_provider_lookup"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="612">Asynchronously looks up for credentials for @source.

When the operation is finished, @callback will be called. You can then
call e_source_credentials_provider_lookup_finish() to get the result
of the operation.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="614">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="615">an #ESource, to lookup credentials for</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="616">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="617">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="618">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_finish"
              c:identifier="e_source_credentials_provider_lookup_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="659">Finishes the operation started with e_source_credentials_provider_lookup().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="670">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="661">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="662">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
          <parameter name="out_credentials"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="663">return location for the credentials</doc>
            <type name="NamedParameters" c:type="ENamedParameters**"/>
          </parameter>
        </parameters>
      </method>
      <method name="lookup_sync"
              c:identifier="e_source_credentials_provider_lookup_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="546">Looks up the credentials for @source.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="558">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="548">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="549">an #ESource, to lookup credentials for</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="550">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="out_credentials"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="551">return location for the credentials</doc>
            <type name="NamedParameters" c:type="ENamedParameters**"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_credentials_source"
              c:identifier="e_source_credentials_provider_ref_credentials_source"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="399">Returns a referenced parent #ESource, which holds the credentials for
the given @source. This is useful for collections, where the credentials
are usually stored on the collection source, thus shared between child
sources. When ther eis no such parent source, a %NULL is returned, which
means the @source holds credentials for itself.</doc>
        <source-position filename="e-source-credentials-provider.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="410">referenced parent #ESource, which holds credentials, or %NULL. Unref
   the returned non-NULL #ESource with g_object_unref(), when no longer needed.</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="401">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="402">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_registry"
              c:identifier="e_source_credentials_provider_ref_registry"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="284">Returns refenrenced registry associated with this @provider.</doc>
        <source-position filename="e-source-credentials-provider.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="290">Reference registry associated with this @provider. Unref it
   with g_object_unref() when no longer needed.</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="286">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_source"
              c:identifier="e_source_credentials_provider_ref_source"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="371">Returns referenced #ESource with the given @uid, or %NULL, when it could not be found.</doc>
        <source-position filename="e-source-credentials-provider.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="378">Referenced #ESource with the given @uid, or %NULL, when it
   could not be found. Unref the returned #ESource with g_object_unref(), when no longer needed.</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="373">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="374">an #ESource UID</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_impl"
              c:identifier="e_source_credentials_provider_register_impl"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="303">Registers a credentials provider implementation and adds its own reference on
the @provider_impl.</doc>
        <source-position filename="e-source-credentials-provider.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="311">%TRUE on success, %FALSE on failure, like when there is
   the @provider_impl already registered.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="305">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="306">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store"
              c:identifier="e_source_credentials_provider_store"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="771">Asynchronously stores the @credentials for @source. Note the actual stored
values can differ for each storage. In other words, not all named parameters
are stored for each @source.

When the operation is finished, @callback will be called. You can then
call e_source_credentials_provider_store_finish() to get the result
of the operation.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="773">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="774">an #ESource, to lookup credentials for</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="775">an #ENamedParameters with credentials to store</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
          <parameter name="permanently" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="776">store permanently or just for the session</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="777">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="778">a #GAsyncReadyCallback to call when the request is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="779">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_finish"
              c:identifier="e_source_credentials_provider_store_finish"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="824">Finishes the operation started with e_source_credentials_provider_store().

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="834">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="826">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="827">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_sync"
              c:identifier="e_source_credentials_provider_store_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="700">Stores the @credentials for @source. Note the actual stored values
can differ for each storage. In other words, not all named parameters
are stored for each @source.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider.c"
               line="715">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="702">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="703">an #ESource, to store credentials for</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="704">an #ENamedParameters with credentials to store</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
          <parameter name="permanently" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="705">store permanently or just for the session</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="706">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_impl"
              c:identifier="e_source_credentials_provider_unregister_impl"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="347">Unregisters previously registered @provider_impl with
e_source_credentials_provider_register_impl(). Function does nothing,
when the @provider_impl is not registered.</doc>
        <source-position filename="e-source-credentials-provider.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="349">an #ESourceCredentialsProvider</doc>
            <type name="SourceCredentialsProvider"
                  c:type="ESourceCredentialsProvider*"/>
          </instance-parameter>
          <parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="350">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </parameter>
        </parameters>
      </method>
      <property name="registry"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider.c"
             line="183">The Source Registry object, which can be either #ESourceregistry or #ESourceRegistryServer.</doc>
        <type name="GObject.Object"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCredentialsProviderPrivate"
              c:type="ESourceCredentialsProviderPrivate*"/>
      </field>
    </class>
    <record name="SourceCredentialsProviderClass"
            c:type="ESourceCredentialsProviderClass"
            glib:is-gtype-struct-for="SourceCredentialsProvider">
      <source-position filename="e-source-credentials-provider.h" line="78"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="ref_source">
        <callback name="ref_source">
          <source-position filename="e-source-credentials-provider.h"
                           line="76"/>
          <return-value transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider.c"
                 line="378">Referenced #ESource with the given @uid, or %NULL, when it
   could not be found. Unref the returned #ESource with g_object_unref(), when no longer needed.</doc>
            <type name="Source" c:type="ESource*"/>
          </return-value>
          <parameters>
            <parameter name="provider" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider.c"
                   line="373">an #ESourceCredentialsProvider</doc>
              <type name="SourceCredentialsProvider"
                    c:type="ESourceCredentialsProvider*"/>
            </parameter>
            <parameter name="uid" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider.c"
                   line="374">an #ESource UID</doc>
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SourceCredentialsProviderImpl"
           c:symbol-prefix="source_credentials_provider_impl"
           c:type="ESourceCredentialsProviderImpl"
           version="3.16"
           parent="Extension"
           abstract="1"
           glib:type-name="ESourceCredentialsProviderImpl"
           glib:get-type="e_source_credentials_provider_impl_get_type"
           glib:type-struct="SourceCredentialsProviderImplClass">
      <doc xml:space="preserve"
           filename="e-source-credentials-provider-impl.h"
           line="58">Credentials provider implementation base structure. The descendants
implement the virtual methods. The descendants are automatically
registered into an #ESourceCredentialsProvider.</doc>
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="95"/>
      <virtual-method name="can_process" invoker="can_process" version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="131">Returns whether the @provider_impl can process credentials for the @source.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="138">Whether the @provider_impl can process credentials for the @source.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="133">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="134">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="can_prompt" invoker="can_prompt" version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="182">Returns whether credential prompt can be done for the @provider_impl.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="188">Whether credential prompt can be done for the @provider_impl.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="184">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="can_store" invoker="can_store" version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="158">Returns whether the @provider_impl can store credentials.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="164">Whether the @provider_impl can store credentials.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="160">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="delete_sync"
                      invoker="delete_sync"
                      version="3.16"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="287">Asks @provider_impl to delete any stored credentials for @source.

Default implementation returns %FALSE and sets #G_IO_ERROR_NOT_SUPPORTED error.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="300">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="289">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="290">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="291">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="lookup_sync"
                      invoker="lookup_sync"
                      version="3.16"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="206">Asks @provider_impl to lookup for stored credentials for @source.
The @out_credentials is populated with them. If the result is not
%NULL, then it should be freed with e_named_parameters_free() when
no longer needed.

Default implementation returns %FALSE and sets #G_IO_ERROR_NOT_SUPPORTED error.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="223">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="208">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="209">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="210">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="out_credentials"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="211">an #ENamedParameters to be set with stored credentials</doc>
            <type name="NamedParameters" c:type="ENamedParameters**"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="store_sync"
                      invoker="store_sync"
                      version="3.16"
                      throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="247">Asks @provider_impl to store @credentials for @source.

Default implementation returns %FALSE and sets #G_IO_ERROR_NOT_SUPPORTED error.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="262">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="249">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="250">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="251">an #ENamedParameters containing credentials to store</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
          <parameter name="permanently" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="252">whether to store credentials permanently, or for the current session only</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="253">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_process"
              c:identifier="e_source_credentials_provider_impl_can_process"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="131">Returns whether the @provider_impl can process credentials for the @source.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="138">Whether the @provider_impl can process credentials for the @source.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="133">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="134">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="can_prompt"
              c:identifier="e_source_credentials_provider_impl_can_prompt"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="182">Returns whether credential prompt can be done for the @provider_impl.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="188">Whether credential prompt can be done for the @provider_impl.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="184">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="can_store"
              c:identifier="e_source_credentials_provider_impl_can_store"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="158">Returns whether the @provider_impl can store credentials.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="164">Whether the @provider_impl can store credentials.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="160">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="delete_sync"
              c:identifier="e_source_credentials_provider_impl_delete_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="287">Asks @provider_impl to delete any stored credentials for @source.

Default implementation returns %FALSE and sets #G_IO_ERROR_NOT_SUPPORTED error.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="300">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="289">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="290">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="291">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_provider"
              c:identifier="e_source_credentials_provider_impl_get_provider"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="107">Returns an #ESourceCredentialsProvider with which the @provider_impl is associated.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="99"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="113">an #ESourceCredentialsProvider</doc>
          <type name="gpointer" c:type="_ESourceCredentialsProvider*"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="109">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="lookup_sync"
              c:identifier="e_source_credentials_provider_impl_lookup_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="206">Asks @provider_impl to lookup for stored credentials for @source.
The @out_credentials is populated with them. If the result is not
%NULL, then it should be freed with e_named_parameters_free() when
no longer needed.

Default implementation returns %FALSE and sets #G_IO_ERROR_NOT_SUPPORTED error.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="223">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="208">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="209">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="210">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="out_credentials"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="211">an #ENamedParameters to be set with stored credentials</doc>
            <type name="NamedParameters" c:type="ENamedParameters**"/>
          </parameter>
        </parameters>
      </method>
      <method name="store_sync"
              c:identifier="e_source_credentials_provider_impl_store_sync"
              version="3.16"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-credentials-provider-impl.c"
             line="247">Asks @provider_impl to store @credentials for @source.

Default implementation returns %FALSE and sets #G_IO_ERROR_NOT_SUPPORTED error.

If an error occurs, the function sets @error and returns %FALSE.</doc>
        <source-position filename="e-source-credentials-provider-impl.h"
                         line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-credentials-provider-impl.c"
               line="262">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="provider_impl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="249">an #ESourceCredentialsProviderImpl</doc>
            <type name="SourceCredentialsProviderImpl"
                  c:type="ESourceCredentialsProviderImpl*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="250">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="credentials" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="251">an #ENamedParameters containing credentials to store</doc>
            <type name="NamedParameters" c:type="const ENamedParameters*"/>
          </parameter>
          <parameter name="permanently" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="252">whether to store credentials permanently, or for the current session only</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="253">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="Extension" c:type="EExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCredentialsProviderImplPrivate"
              c:type="ESourceCredentialsProviderImplPrivate*"/>
      </field>
    </class>
    <record name="SourceCredentialsProviderImplClass"
            c:type="ESourceCredentialsProviderImplClass"
            glib:is-gtype-struct-for="SourceCredentialsProviderImpl">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="95"/>
      <field name="parent_class">
        <type name="ExtensionClass" c:type="EExtensionClass"/>
      </field>
      <field name="can_process">
        <callback name="can_process">
          <source-position filename="e-source-credentials-provider-impl.h"
                           line="76"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="138">Whether the @provider_impl can process credentials for the @source.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider_impl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="133">an #ESourceCredentialsProviderImpl</doc>
              <type name="SourceCredentialsProviderImpl"
                    c:type="ESourceCredentialsProviderImpl*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="134">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_store">
        <callback name="can_store">
          <source-position filename="e-source-credentials-provider-impl.h"
                           line="78"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="164">Whether the @provider_impl can store credentials.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider_impl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="160">an #ESourceCredentialsProviderImpl</doc>
              <type name="SourceCredentialsProviderImpl"
                    c:type="ESourceCredentialsProviderImpl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_prompt">
        <callback name="can_prompt">
          <source-position filename="e-source-credentials-provider-impl.h"
                           line="79"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="188">Whether credential prompt can be done for the @provider_impl.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider_impl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="184">an #ESourceCredentialsProviderImpl</doc>
              <type name="SourceCredentialsProviderImpl"
                    c:type="ESourceCredentialsProviderImpl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="lookup_sync">
        <callback name="lookup_sync" throws="1">
          <source-position filename="e-source-credentials-provider-impl.h"
                           line="80"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="223">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider_impl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="208">an #ESourceCredentialsProviderImpl</doc>
              <type name="SourceCredentialsProviderImpl"
                    c:type="ESourceCredentialsProviderImpl*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="209">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="210">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="out_credentials"
                       direction="out"
                       caller-allocates="0"
                       transfer-ownership="full">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="211">an #ENamedParameters to be set with stored credentials</doc>
              <type name="NamedParameters" c:type="ENamedParameters**"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="store_sync">
        <callback name="store_sync" throws="1">
          <source-position filename="e-source-credentials-provider-impl.h"
                           line="85"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="262">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider_impl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="249">an #ESourceCredentialsProviderImpl</doc>
              <type name="SourceCredentialsProviderImpl"
                    c:type="ESourceCredentialsProviderImpl*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="250">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="credentials" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="251">an #ENamedParameters containing credentials to store</doc>
              <type name="NamedParameters" c:type="const ENamedParameters*"/>
            </parameter>
            <parameter name="permanently" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="252">whether to store credentials permanently, or for the current session only</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="253">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="delete_sync">
        <callback name="delete_sync" throws="1">
          <source-position filename="e-source-credentials-provider-impl.h"
                           line="91"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-credentials-provider-impl.c"
                 line="300">%TRUE on success, %FALSE on error</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="provider_impl" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="289">an #ESourceCredentialsProviderImpl</doc>
              <type name="SourceCredentialsProviderImpl"
                    c:type="ESourceCredentialsProviderImpl*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="290">an #ESource</doc>
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="e-source-credentials-provider-impl.c"
                   line="291">optional #GCancellable object, or %NULL</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <class name="SourceCredentialsProviderImplOAuth2"
           c:symbol-prefix="source_credentials_provider_impl_oauth2"
           c:type="ESourceCredentialsProviderImplOAuth2"
           version="3.28"
           parent="SourceCredentialsProviderImpl"
           glib:type-name="ESourceCredentialsProviderImplOAuth2"
           glib:get-type="e_source_credentials_provider_impl_oauth2_get_type"
           glib:type-struct="SourceCredentialsProviderImplOAuth2Class">
      <doc xml:space="preserve"
           filename="e-source-credentials-provider-impl-oauth2.h"
           line="57">OAuth2 based credentials provider implementation.</doc>
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="72"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceCredentialsProviderImpl"
              c:type="ESourceCredentialsProviderImpl"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCredentialsProviderImplOAuth2Private"
              c:type="ESourceCredentialsProviderImplOAuth2Private*"/>
      </field>
    </class>
    <record name="SourceCredentialsProviderImplOAuth2Class"
            c:type="ESourceCredentialsProviderImplOAuth2Class"
            glib:is-gtype-struct-for="SourceCredentialsProviderImplOAuth2">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="72"/>
      <field name="parent_class">
        <type name="SourceCredentialsProviderImplClass"
              c:type="ESourceCredentialsProviderImplClass"/>
      </field>
    </record>
    <record name="SourceCredentialsProviderImplOAuth2Private"
            c:type="ESourceCredentialsProviderImplOAuth2Private"
            disguised="1">
      <source-position filename="e-source-credentials-provider-impl-oauth2.h"
                       line="55"/>
    </record>
    <class name="SourceCredentialsProviderImplPassword"
           c:symbol-prefix="source_credentials_provider_impl_password"
           c:type="ESourceCredentialsProviderImplPassword"
           version="3.16"
           parent="SourceCredentialsProviderImpl"
           glib:type-name="ESourceCredentialsProviderImplPassword"
           glib:get-type="e_source_credentials_provider_impl_password_get_type"
           glib:type-struct="SourceCredentialsProviderImplPasswordClass">
      <doc xml:space="preserve"
           filename="e-source-credentials-provider-impl-password.h"
           line="55">Password based credentials provider implementation.</doc>
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="70"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceCredentialsProviderImpl"
              c:type="ESourceCredentialsProviderImpl"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceCredentialsProviderImplPasswordPrivate"
              c:type="ESourceCredentialsProviderImplPasswordPrivate*"/>
      </field>
    </class>
    <record name="SourceCredentialsProviderImplPasswordClass"
            c:type="ESourceCredentialsProviderImplPasswordClass"
            glib:is-gtype-struct-for="SourceCredentialsProviderImplPassword">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="70"/>
      <field name="parent_class">
        <type name="SourceCredentialsProviderImplClass"
              c:type="ESourceCredentialsProviderImplClass"/>
      </field>
    </record>
    <record name="SourceCredentialsProviderImplPasswordPrivate"
            c:type="ESourceCredentialsProviderImplPasswordPrivate"
            disguised="1">
      <source-position filename="e-source-credentials-provider-impl-password.h"
                       line="53"/>
    </record>
    <record name="SourceCredentialsProviderImplPrivate"
            c:type="ESourceCredentialsProviderImplPrivate"
            disguised="1">
      <source-position filename="e-source-credentials-provider-impl.h"
                       line="54"/>
    </record>
    <record name="SourceCredentialsProviderPrivate"
            c:type="ESourceCredentialsProviderPrivate"
            disguised="1">
      <source-position filename="e-source-credentials-provider.h" line="57"/>
    </record>
    <enumeration name="SourceCredentialsReason"
                 version="3.16"
                 glib:type-name="ESourceCredentialsReason"
                 glib:get-type="e_source_credentials_reason_get_type"
                 c:type="ESourceCredentialsReason">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="147">An ESource's authentication reason, used by an ESource::CredentialsRequired method.</doc>
      <member name="unknown"
              value="0"
              c:identifier="E_SOURCE_CREDENTIALS_REASON_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="149">A return value when there was no 'credentials-required' signal emitted yet,
  or a pair 'authenticate' signal had been received. This value should not
  be used in the call of 'credentials-required'.</doc>
      </member>
      <member name="required"
              value="1"
              c:identifier="E_SOURCE_CREDENTIALS_REASON_REQUIRED"
              glib:nick="required">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="153">This is the first attempt to get credentials for the source. It's usually
  used right after the source is opened and the authentication continues with
  a stored credentials, if any.</doc>
      </member>
      <member name="rejected"
              value="2"
              c:identifier="E_SOURCE_CREDENTIALS_REASON_REJECTED"
              glib:nick="rejected">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="157">The previously used credentials had been rejected by the server. That
  usually means that the user should be asked to provide/correct the credentials.</doc>
      </member>
      <member name="ssl_failed"
              value="3"
              c:identifier="E_SOURCE_CREDENTIALS_REASON_SSL_FAILED"
              glib:nick="ssl-failed">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="160">A secured connection failed due to some server-side certificate issues.</doc>
      </member>
      <member name="error"
              value="4"
              c:identifier="E_SOURCE_CREDENTIALS_REASON_ERROR"
              glib:nick="error">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="162">The server returned an error. It is not possible to connect to it
  at the moment usually.</doc>
      </member>
    </enumeration>
    <class name="SourceExtension"
           c:symbol-prefix="source_extension"
           c:type="ESourceExtension"
           version="3.6"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="ESourceExtension"
           glib:get-type="e_source_extension_get_type"
           glib:type-struct="SourceExtensionClass">
      <doc xml:space="preserve"
           filename="e-source-extension.c"
           line="18">#ESourceExtension is an abstract base class for #ESource extension
objects.  An #ESourceExtension object basically just maps the keys in
a key file group to a set of #GObject properties.  The name of the key
file group doubles as the name of the #ESourceExtension object.

#ESourceExtension objects are accessed through e_source_get_extension().</doc>
      <source-position filename="e-source-extension.h" line="70"/>
      <method name="get_source"
              c:identifier="e_source_extension_get_source"
              version="3.6"
              deprecated="1"
              deprecated-version="3.8">
        <doc xml:space="preserve"
             filename="e-source-extension.c"
             line="189">Returns the #ESource instance to which @extension belongs.

Note this function is not thread-safe.  The returned #ESource could
be finalized by another thread while the caller is still using it.</doc>
        <doc-deprecated xml:space="preserve">Use e_source_extension_ref_source() instead.</doc-deprecated>
        <source-position filename="e-source-extension.h" line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-extension.c"
               line="198">the #ESource instance</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-extension.c"
                 line="191">an #ESourceExtension</doc>
            <type name="SourceExtension" c:type="ESourceExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="property_lock"
              c:identifier="e_source_extension_property_lock"
              version="3.18">
        <doc xml:space="preserve"
             filename="e-source-extension.c"
             line="222">Acquires a property lock, thus no other thread can change properties
of the @extension until the lock is released.</doc>
        <source-position filename="e-source-extension.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-extension.c"
                 line="224">an #ESourceExtension</doc>
            <type name="SourceExtension" c:type="ESourceExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="property_unlock"
              c:identifier="e_source_extension_property_unlock"
              version="3.18">
        <doc xml:space="preserve"
             filename="e-source-extension.c"
             line="239">Releases a property lock, previously acquired with e_source_extension_property_lock(),
thus other threads can change properties of the @extension.</doc>
        <source-position filename="e-source-extension.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-extension.c"
                 line="241">an #ESourceExtension</doc>
            <type name="SourceExtension" c:type="ESourceExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_source"
              c:identifier="e_source_extension_ref_source"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-extension.c"
             line="168">Returns the #ESource instance to which the @extension belongs.

The returned #ESource is referenced for thread-safety.  Unreference
the #ESource with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-extension.h" line="73"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-extension.c"
               line="177">the #ESource instance</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-extension.c"
                 line="170">an #ESourceExtension</doc>
            <type name="SourceExtension" c:type="ESourceExtension*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="source"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Source"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceExtensionPrivate" c:type="ESourceExtensionPrivate*"/>
      </field>
    </class>
    <record name="SourceExtensionClass"
            c:type="ESourceExtensionClass"
            glib:is-gtype-struct-for="SourceExtension">
      <source-position filename="e-source-extension.h" line="70"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="name">
        <type name="utf8" c:type="const gchar*"/>
      </field>
    </record>
    <record name="SourceExtensionPrivate"
            c:type="ESourceExtensionPrivate"
            disguised="1">
      <source-position filename="e-source-extension.h" line="50"/>
    </record>
    <class name="SourceGoa"
           c:symbol-prefix="source_goa"
           c:type="ESourceGoa"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceGoa"
           glib:get-type="e_source_goa_get_type"
           glib:type-struct="SourceGoaClass">
      <doc xml:space="preserve"
           filename="e-source-goa.c"
           line="18">The #ESourceGoa extension associates an #ESource with a #GoaAccount.
This extension is usually found in a top-level #ESource, with various
mail, calendar and address book data sources as children.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceGoa *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_GOA);
]|</doc>
      <source-position filename="e-source-goa.h" line="78"/>
      <method name="dup_account_id"
              c:identifier="e_source_goa_dup_account_id"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="278">Thread-safe variation of e_source_goa_get_account_id().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-goa.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="287">a newly-allocated copy of #ESourceGoa:account-id</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="280">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_address"
              c:identifier="e_source_goa_dup_address"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="624">Thread-safe variation of e_source_goa_get_address().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-goa.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="633">a newly-allocated copy of #ESourceGoa:address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="626">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_calendar_url"
              c:identifier="e_source_goa_dup_calendar_url"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="364">Thread-safe variation of e_source_goa_get_calendar_url().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-goa.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="373">a newly-allocated copy of #ESourceGoa:calendar-url</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="366">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_contacts_url"
              c:identifier="e_source_goa_dup_contacts_url"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="451">Thread-safe variation of e_source_goa_get_contacts_url().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-goa.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="460">a newly-allocated copy of #ESourceGoa:contacts-url</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="453">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="e_source_goa_dup_name"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="538">Thread-safe variation of e_source_goa_get_name().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-goa.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="547">a newly-allocated copy of #ESourceGoa:name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="540">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_account_id"
              c:identifier="e_source_goa_get_account_id"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="259">Returns the identifier string of the GNOME Online Account associated
with the #ESource to which @extension belongs.</doc>
        <source-position filename="e-source-goa.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="266">the associated GNOME Online Account ID</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="261">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="e_source_goa_get_address"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="604">Returns the original Address of the GNOME Online Account associated
with the #ESource to which @extension belongs. Can be %NULL or an empty
string when not filled.</doc>
        <source-position filename="e-source-goa.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="612">the associated GNOME Online Account's Address</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="606">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_calendar_url"
              c:identifier="e_source_goa_get_calendar_url"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="344">Returns the calendar URL string of the GNOME Online Account associated
with the #ESource to which @extension belongs. Can be %NULL or an empty
string for accounts not supporting this property.</doc>
        <source-position filename="e-source-goa.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="352">the associated GNOME Online Account calendar URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="346">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_contacts_url"
              c:identifier="e_source_goa_get_contacts_url"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="431">Returns the contacts URL string of the GNOME Online Account associated
with the #ESource to which @extension belongs. Can be %NULL or an empty
string for accounts not supporting this property.</doc>
        <source-position filename="e-source-goa.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="439">the associated GNOME Online Account contacts URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="433">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="e_source_goa_get_name"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="518">Returns the original Name of the GNOME Online Account associated
with the #ESource to which @extension belongs. Can be %NULL or an empty
string when not filled.</doc>
        <source-position filename="e-source-goa.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-goa.c"
               line="526">the associated GNOME Online Account's Name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="520">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_account_id"
              c:identifier="e_source_goa_set_account_id"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="309">Sets the identifier string of the GNOME Online Account associated
with the #ESource to which @extension belongs.

The internal copy of @account_id is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-goa.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="311">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
          <parameter name="account_id"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="312">the associated GNOME Online Account ID, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="e_source_goa_set_address"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="655">Sets the Address of the GNOME Online Account associated
with the #ESource to which @extension belongs.

The internal copy of @address is automatically stripped of leading
and trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-goa.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="657">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
          <parameter name="address"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="658">the associated GNOME Online Account's Address, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calendar_url"
              c:identifier="e_source_goa_set_calendar_url"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="395">Sets the calendar URL of the GNOME Online Account associated
with the #ESource to which @extension belongs.

The internal copy of @calendar_url is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-goa.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="397">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
          <parameter name="calendar_url"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="398">the associated GNOME Online Account
               calendar URL, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_contacts_url"
              c:identifier="e_source_goa_set_contacts_url"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="482">Sets the contacts URL of the GNOME Online Account associated
with the #ESource to which @extension belongs.

The internal copy of @contacts_url is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-goa.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="484">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
          <parameter name="contacts_url"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="485">the associated GNOME Online Account
               contacts URL, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="e_source_goa_set_name"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-goa.c"
             line="569">Sets the Name of the GNOME Online Account associated
with the #ESource to which @extension belongs.

The internal copy of @name is automatically stripped of leading
and trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-goa.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="571">an #ESourceGoa</doc>
            <type name="SourceGoa" c:type="ESourceGoa*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-goa.c"
                 line="572">the associated GNOME Online Account's Name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="account-id"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="address"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="calendar-url"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="contacts-url"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceGoaPrivate" c:type="ESourceGoaPrivate*"/>
      </field>
    </class>
    <record name="SourceGoaClass"
            c:type="ESourceGoaClass"
            glib:is-gtype-struct-for="SourceGoa">
      <source-position filename="e-source-goa.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceGoaPrivate" c:type="ESourceGoaPrivate" disguised="1">
      <source-position filename="e-source-goa.h" line="60"/>
    </record>
    <class name="SourceLDAP"
           c:symbol-prefix="source_ldap"
           c:type="ESourceLDAP"
           parent="SourceExtension"
           glib:type-name="ESourceLDAP"
           glib:get-type="e_source_ldap_get_type"
           glib:type-struct="SourceLDAPClass">
      <source-position filename="e-source-ldap.h" line="71"/>
      <method name="dup_filter" c:identifier="e_source_ldap_dup_filter">
        <source-position filename="e-source-ldap.h" line="84"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_root_dn" c:identifier="e_source_ldap_dup_root_dn">
        <source-position filename="e-source-ldap.h" line="91"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_authentication"
              c:identifier="e_source_ldap_get_authentication">
        <source-position filename="e-source-ldap.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="SourceLDAPAuthentication"
                c:type="ESourceLDAPAuthentication"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_can_browse"
              c:identifier="e_source_ldap_get_can_browse">
        <source-position filename="e-source-ldap.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_filter" c:identifier="e_source_ldap_get_filter">
        <source-position filename="e-source-ldap.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_limit" c:identifier="e_source_ldap_get_limit">
        <source-position filename="e-source-ldap.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_root_dn" c:identifier="e_source_ldap_get_root_dn">
        <source-position filename="e-source-ldap.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scope" c:identifier="e_source_ldap_get_scope">
        <source-position filename="e-source-ldap.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="SourceLDAPScope" c:type="ESourceLDAPScope"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_security" c:identifier="e_source_ldap_get_security">
        <source-position filename="e-source-ldap.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="SourceLDAPSecurity" c:type="ESourceLDAPSecurity"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_authentication"
              c:identifier="e_source_ldap_set_authentication">
        <source-position filename="e-source-ldap.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="authentication" transfer-ownership="none">
            <type name="SourceLDAPAuthentication"
                  c:type="ESourceLDAPAuthentication"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_can_browse"
              c:identifier="e_source_ldap_set_can_browse">
        <source-position filename="e-source-ldap.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="can_browse" transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_filter" c:identifier="e_source_ldap_set_filter">
        <source-position filename="e-source-ldap.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="filter" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_limit" c:identifier="e_source_ldap_set_limit">
        <source-position filename="e-source-ldap.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="limit" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_root_dn" c:identifier="e_source_ldap_set_root_dn">
        <source-position filename="e-source-ldap.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="root_dn" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_scope" c:identifier="e_source_ldap_set_scope">
        <source-position filename="e-source-ldap.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="scope" transfer-ownership="none">
            <type name="SourceLDAPScope" c:type="ESourceLDAPScope"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_security" c:identifier="e_source_ldap_set_security">
        <source-position filename="e-source-ldap.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceLDAP" c:type="ESourceLDAP*"/>
          </instance-parameter>
          <parameter name="security" transfer-ownership="none">
            <type name="SourceLDAPSecurity" c:type="ESourceLDAPSecurity"/>
          </parameter>
        </parameters>
      </method>
      <property name="authentication" writable="1" transfer-ownership="none">
        <type name="SourceLDAPAuthentication"/>
      </property>
      <property name="can-browse"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="filter"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="limit"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="root-dn"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="scope"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="SourceLDAPScope"/>
      </property>
      <property name="security" writable="1" transfer-ownership="none">
        <type name="SourceLDAPSecurity"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceLDAPPrivate" c:type="ESourceLDAPPrivate*"/>
      </field>
    </class>
    <enumeration name="SourceLDAPAuthentication"
                 version="3.18"
                 glib:type-name="ESourceLDAPAuthentication"
                 glib:get-type="e_source_ldap_authentication_get_type"
                 c:type="ESourceLDAPAuthentication">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="178">Defines authentication types for LDAP sources.</doc>
      <member name="none"
              value="0"
              c:identifier="E_SOURCE_LDAP_AUTHENTICATION_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="180">Use none authentication type.</doc>
      </member>
      <member name="email"
              value="1"
              c:identifier="E_SOURCE_LDAP_AUTHENTICATION_EMAIL"
              glib:nick="email">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="182">Use an email address for authentication.</doc>
      </member>
      <member name="binddn"
              value="2"
              c:identifier="E_SOURCE_LDAP_AUTHENTICATION_BINDDN"
              glib:nick="binddn">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="184">Use a bind DN for authentication.</doc>
      </member>
    </enumeration>
    <record name="SourceLDAPClass"
            c:type="ESourceLDAPClass"
            glib:is-gtype-struct-for="SourceLDAP">
      <source-position filename="e-source-ldap.h" line="71"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceLDAPPrivate" c:type="ESourceLDAPPrivate" disguised="1">
      <source-position filename="e-source-ldap.h" line="61"/>
    </record>
    <enumeration name="SourceLDAPScope"
                 version="3.18"
                 glib:type-name="ESourceLDAPScope"
                 glib:get-type="e_source_ldap_scope_get_type"
                 c:type="ESourceLDAPScope">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="197">Defines search scope for LDAP sources.</doc>
      <member name="onelevel"
              value="0"
              c:identifier="E_SOURCE_LDAP_SCOPE_ONELEVEL"
              glib:nick="onelevel">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="199">One level search scope.</doc>
      </member>
      <member name="subtree"
              value="1"
              c:identifier="E_SOURCE_LDAP_SCOPE_SUBTREE"
              glib:nick="subtree">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="201">Sub-tree search scope.</doc>
      </member>
    </enumeration>
    <enumeration name="SourceLDAPSecurity"
                 version="3.18"
                 glib:type-name="ESourceLDAPSecurity"
                 glib:get-type="e_source_ldap_security_get_type"
                 c:type="ESourceLDAPSecurity">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="213">Defines what connection security should be used for LDAP sources.</doc>
      <member name="none"
              value="0"
              c:identifier="E_SOURCE_LDAP_SECURITY_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="215">Connect insecurely.</doc>
      </member>
      <member name="ldaps"
              value="1"
              c:identifier="E_SOURCE_LDAP_SECURITY_LDAPS"
              glib:nick="ldaps">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="217">Connect using secure LDAP (LDAPS).</doc>
      </member>
      <member name="starttls"
              value="2"
              c:identifier="E_SOURCE_LDAP_SECURITY_STARTTLS"
              glib:nick="starttls">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="219">Connect using STARTTLS.</doc>
      </member>
    </enumeration>
    <class name="SourceLocal"
           c:symbol-prefix="source_local"
           c:type="ESourceLocal"
           parent="SourceExtension"
           glib:type-name="ESourceLocal"
           glib:get-type="e_source_local_get_type"
           glib:type-struct="SourceLocalClass">
      <source-position filename="e-source-local.h" line="70"/>
      <method name="dup_custom_file"
              c:identifier="e_source_local_dup_custom_file">
        <doc xml:space="preserve"
             filename="e-source-local.c"
             line="168">A thread safe variant to get a custom file being set on the @extension.
Free the returned #GFile, if not %NULL, with g_object_unref(),
when no longer needed.</doc>
        <source-position filename="e-source-local.h" line="74"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-local.c"
               line="176">the #GFile instance, or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="170">an #ESourceLocal</doc>
            <type name="SourceLocal" c:type="ESourceLocal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_custom_file"
              c:identifier="e_source_local_get_custom_file">
        <doc xml:space="preserve"
             filename="e-source-local.c"
             line="149">Get the custom file being set on the @extension.
The returned #GFile is owned by the @extension.

For thread safety use e_source_local_dup_custom_file().</doc>
        <source-position filename="e-source-local.h" line="73"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-local.c"
               line="158">the #GFile instance, or %NULL</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="151">an #ESourceLocal</doc>
            <type name="SourceLocal" c:type="ESourceLocal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_writable"
              c:identifier="e_source_local_get_writable"
              version="3.34">
        <doc xml:space="preserve"
             filename="e-source-local.c"
             line="226">Returns whether the backend should prefer to open the file
in writable mode. The default is %TRUE. The file can be still
opened for read-only, for example when the access to the file
is read-only.</doc>
        <source-position filename="e-source-local.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-local.c"
               line="235">whether prefer to pen the file in writable mode</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="228">an #ESourceLocal</doc>
            <type name="SourceLocal" c:type="ESourceLocal*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_custom_file"
              c:identifier="e_source_local_set_custom_file">
        <doc xml:space="preserve"
             filename="e-source-local.c"
             line="196">Set, or unset, when using %NULL, the custom file for the @extension.</doc>
        <source-position filename="e-source-local.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="198">an #ESourceLocal</doc>
            <type name="SourceLocal" c:type="ESourceLocal*"/>
          </instance-parameter>
          <parameter name="custom_file"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="199">a #GFile, or %NULL</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_writable"
              c:identifier="e_source_local_set_writable"
              version="3.34">
        <doc xml:space="preserve"
             filename="e-source-local.c"
             line="247">Set whether the custom file should be opened in writable mode.
The default is %TRUE. The file can be still opened for read-only,
for example when the access to the file is read-only.</doc>
        <source-position filename="e-source-local.h" line="78"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="249">an #ESourceLocal</doc>
            <type name="SourceLocal" c:type="ESourceLocal*"/>
          </instance-parameter>
          <parameter name="writable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-local.c"
                 line="250">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="custom-file"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="writable"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceLocalPrivate" c:type="ESourceLocalPrivate*"/>
      </field>
    </class>
    <record name="SourceLocalClass"
            c:type="ESourceLocalClass"
            glib:is-gtype-struct-for="SourceLocal">
      <source-position filename="e-source-local.h" line="70"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceLocalPrivate"
            c:type="ESourceLocalPrivate"
            disguised="1">
      <source-position filename="e-source-local.h" line="60"/>
    </record>
    <class name="SourceMDN"
           c:symbol-prefix="source_mdn"
           c:type="ESourceMDN"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceMDN"
           glib:get-type="e_source_mdn_get_type"
           glib:type-struct="SourceMDNClass">
      <doc xml:space="preserve"
           filename="e-source-mdn.c"
           line="18">The #ESourceMDN extension tracks Message Disposition Notification
settings for a mail account.  See RFC 2298 for more information about
Message Disposition Notification.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMDN *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MDN);
]|</doc>
      <source-position filename="e-source-mdn.h" line="79"/>
      <method name="get_response_policy"
              c:identifier="e_source_mdn_get_response_policy"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mdn.c"
             line="126">Returns the policy for this mail account on responding to Message
Disposition Notification requests when receiving mail messages.</doc>
        <source-position filename="e-source-mdn.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mdn.c"
               line="133">the #EMdnResponsePolicy for this account</doc>
          <type name="MdnResponsePolicy" c:type="EMdnResponsePolicy"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mdn.c"
                 line="128">an #ESourceMDN</doc>
            <type name="SourceMDN" c:type="ESourceMDN*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_response_policy"
              c:identifier="e_source_mdn_set_response_policy"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mdn.c"
             line="147">Sets the policy for this mail account on responding to Message
Disposition Notification requests when receiving mail messages.</doc>
        <source-position filename="e-source-mdn.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mdn.c"
                 line="149">an #ESourceMDN</doc>
            <type name="SourceMDN" c:type="ESourceMDN*"/>
          </instance-parameter>
          <parameter name="response_policy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mdn.c"
                 line="150">the #EMdnResponsePolicy</doc>
            <type name="MdnResponsePolicy" c:type="EMdnResponsePolicy"/>
          </parameter>
        </parameters>
      </method>
      <property name="response-policy"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="MdnResponsePolicy"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMDNPrivate" c:type="ESourceMDNPrivate*"/>
      </field>
    </class>
    <record name="SourceMDNClass"
            c:type="ESourceMDNClass"
            glib:is-gtype-struct-for="SourceMDN">
      <source-position filename="e-source-mdn.h" line="79"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceMDNPrivate" c:type="ESourceMDNPrivate" disguised="1">
      <source-position filename="e-source-mdn.h" line="61"/>
    </record>
    <class name="SourceMailAccount"
           c:symbol-prefix="source_mail_account"
           c:type="ESourceMailAccount"
           version="3.6"
           parent="SourceBackend"
           glib:type-name="ESourceMailAccount"
           glib:get-type="e_source_mail_account_get_type"
           glib:type-struct="SourceMailAccountClass">
      <doc xml:space="preserve"
           filename="e-source-mail-account.c"
           line="18">The #ESourceMailAccount extension identifies the #ESource as a
mail account and also links to a default "mail identity" to use.
See #ESourceMailIdentity for more information about identities.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMailAccount *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MAIL_ACCOUNT);
]|</doc>
      <source-position filename="e-source-mail-account.h" line="79"/>
      <method name="dup_archive_folder"
              c:identifier="e_source_mail_account_dup_archive_folder"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="359">Thread-safe variation of e_source_mail_account_get_archive_folder().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-account.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="368">a newly-allocated copy of #ESourceMailAccount:archive-folder</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="361">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_identity_uid"
              c:identifier="e_source_mail_account_dup_identity_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="278">Thread-safe variation of e_source_mail_account_get_identity_uid().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-account.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="287">a newly-allocated copy of #ESourceMailAccount:identity-uid</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="280">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_archive_folder"
              c:identifier="e_source_mail_account_get_archive_folder"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="340">Returns a string identifying the archive folder.
The format of the identifier string is defined by the client application.</doc>
        <source-position filename="e-source-mail-account.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="347">an identifier of the archive folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="342">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identity_uid"
              c:identifier="e_source_mail_account_get_identity_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="259">Returns the #ESource:uid of the #ESource that describes the mail
identity to be used for this account.</doc>
        <source-position filename="e-source-mail-account.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="266">the mail identity #ESource:uid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="261">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mark_seen"
              c:identifier="e_source_mail_account_get_mark_seen"
              version="3.32">
        <source-position filename="e-source-mail-account.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="470">an #EThreeState, whether messages in this account
   should be marked as seen automatically.</doc>
          <type name="ThreeState" c:type="EThreeState"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="468">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mark_seen_timeout"
              c:identifier="e_source_mail_account_get_mark_seen_timeout"
              version="3.32">
        <source-position filename="e-source-mail-account.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="512">timeout in milliseconds for marking messages
   as seen in this account</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="510">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_needs_initial_setup"
              c:identifier="e_source_mail_account_get_needs_initial_setup"
              version="3.20">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="425">Check whether the mail account needs to do its initial setup.</doc>
        <source-position filename="e-source-mail-account.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-account.c"
               line="431">%TRUE, when the account needs to run its initial setup</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="427">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_archive_folder"
              c:identifier="e_source_mail_account_set_archive_folder"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="390">Sets the folder for sent messages by an identifier string.
The format of the identifier string is defined by the client application.

The internal copy of @archive_folder is automatically stripped of leading
and trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-mail-account.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="392">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
          <parameter name="archive_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="393">an identifier for the archive folder, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_identity_uid"
              c:identifier="e_source_mail_account_set_identity_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="309">Sets the #ESource:uid of the #ESource that describes the mail
identity to be used for this account.</doc>
        <source-position filename="e-source-mail-account.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="311">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
          <parameter name="identity_uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="312">the mail identity #ESource:uid, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mark_seen"
              c:identifier="e_source_mail_account_set_mark_seen"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="483">Sets whether the messages in this account should be marked
as seen automatically. An inconsistent state means to use
global option.</doc>
        <source-position filename="e-source-mail-account.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="485">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
          <parameter name="mark_seen" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="486">an #EThreeState as the value to set</doc>
            <type name="ThreeState" c:type="EThreeState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mark_seen_timeout"
              c:identifier="e_source_mail_account_set_mark_seen_timeout"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="525">Sets the @timeout in milliseconds for marking messages
as seen in this account. Whether the timeout is used
depends on e_source_mail_account_get_mark_seen().</doc>
        <source-position filename="e-source-mail-account.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="527">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="528">a timeout in milliseconds</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_needs_initial_setup"
              c:identifier="e_source_mail_account_set_needs_initial_setup"
              version="3.20">
        <doc xml:space="preserve"
             filename="e-source-mail-account.c"
             line="443">Sets whether the account needs to run its initial setup.</doc>
        <source-position filename="e-source-mail-account.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="445">an #ESourceMailAccount</doc>
            <type name="SourceMailAccount" c:type="ESourceMailAccount*"/>
          </instance-parameter>
          <parameter name="needs_initial_setup" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-account.c"
                 line="446">value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="archive-folder"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="identity-uid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="mark-seen"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ThreeState"/>
      </property>
      <property name="mark-seen-timeout"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </property>
      <property name="needs-initial-setup"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceBackend" c:type="ESourceBackend"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMailAccountPrivate"
              c:type="ESourceMailAccountPrivate*"/>
      </field>
    </class>
    <record name="SourceMailAccountClass"
            c:type="ESourceMailAccountClass"
            glib:is-gtype-struct-for="SourceMailAccount">
      <source-position filename="e-source-mail-account.h" line="79"/>
      <field name="parent_class">
        <type name="SourceBackendClass" c:type="ESourceBackendClass"/>
      </field>
    </record>
    <record name="SourceMailAccountPrivate"
            c:type="ESourceMailAccountPrivate"
            disguised="1">
      <source-position filename="e-source-mail-account.h" line="61"/>
    </record>
    <class name="SourceMailComposition"
           c:symbol-prefix="source_mail_composition"
           c:type="ESourceMailComposition"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceMailComposition"
           glib:get-type="e_source_mail_composition_get_type"
           glib:type-struct="SourceMailCompositionClass">
      <doc xml:space="preserve"
           filename="e-source-mail-composition.c"
           line="18">The #ESourceMailComposition extension tracks settings to be applied
when composing a new mail message.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMailComposition *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MAIL_COMPOSITION);
]|</doc>
      <source-position filename="e-source-mail-composition.h" line="79"/>
      <method name="dup_bcc"
              c:identifier="e_source_mail_composition_dup_bcc"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="403">Thread-safe variation of e_source_mail_composition_get_bcc().
Use this function when accessing @extension from multiple threads.

The returned string array should be freed with g_strfreev() when no
longer needed.</doc>
        <source-position filename="e-source-mail-composition.h" line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="413">a newly-allocated copy of
#ESourceMailComposition:bcc</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="405">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_cc"
              c:identifier="e_source_mail_composition_dup_cc"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="491">Thread-safe variation of e_source_mail_composition_get_cc().
Use this function when accessing @extension from multiple threads.

The returned string array should be freed with g_strfreev() when no
longer needed.</doc>
        <source-position filename="e-source-mail-composition.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="501">a newly-allocated copy of
#ESourceMailComposition:cc</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="493">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_drafts_folder"
              c:identifier="e_source_mail_composition_dup_drafts_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="576">Thread-safe variation of e_source_mail_composition_get_drafts_folder().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-composition.h" line="101"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="585">a newly-allocated copy of #ESourceMailComposition:drafts-folder</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="578">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_language"
              c:identifier="e_source_mail_composition_dup_language"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="926">Thread-safe variation of e_source_mail_composition_get_language().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-composition.h" line="136"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="935">a newly-allocated copy of #ESourceMailComposition:language</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="928">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_templates_folder"
              c:identifier="e_source_mail_composition_dup_templates_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="707">Thread-safe variation of e_source_mail_composition_get_templates_folder().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-composition.h" line="113"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="716">a newly-allocated copy of #ESourceMailComposition:templates-folder</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="709">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_bcc"
              c:identifier="e_source_mail_composition_get_bcc"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="381">Returns a %NULL-terminated string array of recipients which should
automatically be added to the blind carbon-copy (Bcc) list when
composing a new mail message.  The recipient strings should be of
the form "Full Name &amp;lt;email-address&amp;gt;".  The returned array is
owned by @extension and should not be modified or freed.</doc>
        <source-position filename="e-source-mail-composition.h" line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="391">a %NULL-terminated string array of Bcc recipients</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="383">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_cc"
              c:identifier="e_source_mail_composition_get_cc"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="469">Returns a %NULL-terminated string array of recipients which should
automatically be added to the carbon-copy (Cc) list when composing a
new mail message.  The recipient strings should be of the form "Full
Name &lt;email-address&gt;".  The returned array is owned by @extension and
should not be modified or freed.</doc>
        <source-position filename="e-source-mail-composition.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="479">a %NULL-terminated string array of Cc recipients</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="471">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_drafts_folder"
              c:identifier="e_source_mail_composition_get_drafts_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="557">Returns a string identifying the preferred folder for draft messages.
The format of the identifier string is defined by the client application.</doc>
        <source-position filename="e-source-mail-composition.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="564">an identifier for the preferred drafts folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="559">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_language"
              c:identifier="e_source_mail_composition_get_language"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="908">Returns a string identifying the preferred language, like "en_US".</doc>
        <source-position filename="e-source-mail-composition.h" line="134"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="914">an identifier for the preferred language, or %NULL for none</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="910">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reply_style"
              c:identifier="e_source_mail_composition_get_reply_style"
              version="3.20">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="774">Returns preferred reply style to be used when replying
using the associated account. If no preference is set,
the %E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DEFAULT is returned.</doc>
        <source-position filename="e-source-mail-composition.h" line="119"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="782">reply style preference</doc>
          <type name="SourceMailCompositionReplyStyle"
                c:type="ESourceMailCompositionReplyStyle"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="776">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sign_imip"
              c:identifier="e_source_mail_composition_get_sign_imip"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="643">Returns whether outgoing iMIP messages such as meeting requests should
also be signed.  This is primarily intended as a workaround for certain
versions of Microsoft Outlook which can't handle signed iMIP messages.</doc>
        <source-position filename="e-source-mail-composition.h" line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="651">whether outgoing iMIP messages should be signed</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="645">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start_bottom"
              c:identifier="e_source_mail_composition_get_start_bottom"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="820">Returns whether start at bottom when replying or forwarding
using the associated account. If no preference is set,
the %E_THREE_STATE_INCONSISTENT is returned.</doc>
        <source-position filename="e-source-mail-composition.h" line="124"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="828">start bottom on reply or forward preference</doc>
          <type name="ThreeState" c:type="EThreeState"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="822">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_templates_folder"
              c:identifier="e_source_mail_composition_get_templates_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="688">Returns a string identifying the preferred folder for message templates.
The format of the identifier string is defined by the client application.</doc>
        <source-position filename="e-source-mail-composition.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="695">an identifier for the preferred templates folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="690">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_top_signature"
              c:identifier="e_source_mail_composition_get_top_signature"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="864">Returns whether place signature at top when replying or forwarding
using the associated account. If no preference is set,
the %E_THREE_STATE_INCONSISTENT is returned.</doc>
        <source-position filename="e-source-mail-composition.h" line="129"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-composition.c"
               line="872">top signature on reply or forward preference</doc>
          <type name="ThreeState" c:type="EThreeState"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="866">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_bcc"
              c:identifier="e_source_mail_composition_set_bcc"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="436">Sets the recipients which should automatically be added to the blind
carbon-copy (Bcc) list when composing a new mail message.  The recipient
strings should be of the form "Full Name &amp;lt;email-address&amp;gt;".</doc>
        <source-position filename="e-source-mail-composition.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="438">an #ESource</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="bcc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="439">a %NULL-terminated string array of Bcc
   recipients</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_cc"
              c:identifier="e_source_mail_composition_set_cc"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="524">Sets the recipients which should automatically be added to the carbon
copy (Cc) list when composing a new mail message.  The recipient strings
should be of the form "Full Name &amp;lt;email-address&amp;gt;".</doc>
        <source-position filename="e-source-mail-composition.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="526">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="cc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="527">a %NULL-terminated string array of Cc
   recipients</doc>
            <array c:type="const gchar* const*">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="set_drafts_folder"
              c:identifier="e_source_mail_composition_set_drafts_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="607">Sets the preferred folder for draft messages by an identifier string.
The format of the identifier string is defined by the client application.

The internal copy of @drafts_folder is automatically stripped of
leading and trailing whitespace.  If the resulting string is empty,
%NULL is set instead.</doc>
        <source-position filename="e-source-mail-composition.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="609">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="drafts_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="610">an identifier for the preferred drafts
                folder, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_language"
              c:identifier="e_source_mail_composition_set_language"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="957">Sets the preferred language by an identifier string, like "en_US".
Use %NULL to unset any previous value.

The internal copy of @language is automatically stripped of
leading and trailing whitespace.  If the resulting string is empty,
%NULL is set instead.</doc>
        <source-position filename="e-source-mail-composition.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="959">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="language"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="960">an identifier for the preferred language, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reply_style"
              c:identifier="e_source_mail_composition_set_reply_style"
              version="3.20">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="795">Sets preferred reply style to be used when replying
using the associated account. To unset the preference,
use the %E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DEFAULT.</doc>
        <source-position filename="e-source-mail-composition.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="797">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="reply_style" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="798">an #ESourceMailCompositionReplyStyle</doc>
            <type name="SourceMailCompositionReplyStyle"
                  c:type="ESourceMailCompositionReplyStyle"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sign_imip"
              c:identifier="e_source_mail_composition_set_sign_imip"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="663">Sets whether outgoing iMIP messages such as meeting requests should
also be signed.  This is primarily intended as a workaround for certain
versions of Microsoft Outlook which can't handle signed iMIP messages.</doc>
        <source-position filename="e-source-mail-composition.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="665">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="sign_imip" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="666">whether outgoing iMIP messages should be signed</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_start_bottom"
              c:identifier="e_source_mail_composition_set_start_bottom"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="840">Sets whether start bottom when replying or forwarding using the associated account.
To unset the preference, use the %E_THREE_STATE_INCONSISTENT.</doc>
        <source-position filename="e-source-mail-composition.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="842">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="start_bottom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="843">an #EThreeState</doc>
            <type name="ThreeState" c:type="EThreeState"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_templates_folder"
              c:identifier="e_source_mail_composition_set_templates_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="738">Sets the preferred folder for message templates by an identifier string.
The format of the identifier string is defined by the client application.

The internal copy of @templates_folder is automatically stripped of
leading and trailing whitespace.  If the resulting string is empty,
%NULL is set instead.</doc>
        <source-position filename="e-source-mail-composition.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="740">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="templates_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="741">an identifier for the preferred templates
                   folder, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_top_signature"
              c:identifier="e_source_mail_composition_set_top_signature"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-mail-composition.c"
             line="884">Sets whether place signature at top when replying or forwarding using the associated account.
To unset the preference, use the %E_THREE_STATE_INCONSISTENT.</doc>
        <source-position filename="e-source-mail-composition.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="886">an #ESourceMailComposition</doc>
            <type name="SourceMailComposition"
                  c:type="ESourceMailComposition*"/>
          </instance-parameter>
          <parameter name="top_signature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-composition.c"
                 line="887">an #EThreeState</doc>
            <type name="ThreeState" c:type="EThreeState"/>
          </parameter>
        </parameters>
      </method>
      <property name="bcc"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="cc" writable="1" construct="1" transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="drafts-folder"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="language"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="reply-style"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="SourceMailCompositionReplyStyle"/>
      </property>
      <property name="sign-imip"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="start-bottom"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ThreeState"/>
      </property>
      <property name="templates-folder"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="top-signature"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ThreeState"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMailCompositionPrivate"
              c:type="ESourceMailCompositionPrivate*"/>
      </field>
    </class>
    <record name="SourceMailCompositionClass"
            c:type="ESourceMailCompositionClass"
            glib:is-gtype-struct-for="SourceMailComposition">
      <source-position filename="e-source-mail-composition.h" line="79"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceMailCompositionPrivate"
            c:type="ESourceMailCompositionPrivate"
            disguised="1">
      <source-position filename="e-source-mail-composition.h" line="61"/>
    </record>
    <enumeration name="SourceMailCompositionReplyStyle"
                 version="3.20"
                 glib:type-name="ESourceMailCompositionReplyStyle"
                 glib:get-type="e_source_mail_composition_reply_style_get_type"
                 c:type="ESourceMailCompositionReplyStyle">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="251">Set of preferred reply styles for an #ESourceMailComposition extension.</doc>
      <member name="default"
              value="0"
              c:identifier="E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DEFAULT"
              glib:nick="default">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="253">Use default reply style.</doc>
      </member>
      <member name="quoted"
              value="1"
              c:identifier="E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_QUOTED"
              glib:nick="quoted">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="255">Use quoted reply style.</doc>
      </member>
      <member name="do_not_quote"
              value="2"
              c:identifier="E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_DO_NOT_QUOTE"
              glib:nick="do-not-quote">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="257">Do not quote anything in replies.</doc>
      </member>
      <member name="attach"
              value="3"
              c:identifier="E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_ATTACH"
              glib:nick="attach">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="259">Attach original message in replies.</doc>
      </member>
      <member name="outlook"
              value="4"
              c:identifier="E_SOURCE_MAIL_COMPOSITION_REPLY_STYLE_OUTLOOK"
              glib:nick="outlook">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="261">Use Outlook reply style.</doc>
      </member>
    </enumeration>
    <class name="SourceMailIdentity"
           c:symbol-prefix="source_mail_identity"
           c:type="ESourceMailIdentity"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceMailIdentity"
           glib:get-type="e_source_mail_identity_get_type"
           glib:type-struct="SourceMailIdentityClass">
      <doc xml:space="preserve"
           filename="e-source-mail-identity.c"
           line="18">The #ESourceMailIdentity extension describes an "identity" for a mail
account, which is the information that other people see when they read
your messages.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMailIdentity *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MAIL_IDENTITY);
]|</doc>
      <source-position filename="e-source-mail-identity.h" line="78"/>
      <method name="dup_address"
              c:identifier="e_source_mail_identity_dup_address"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="312">Thread-safe variation of e_source_mail_identity_get_address().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-identity.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="321">a newly-allocated copy of #ESourceMailIdentity:address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="314">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_aliases"
              c:identifier="e_source_mail_identity_dup_aliases"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="741">Thread-safe variation of e_source_mail_identity_get_aliases().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-identity.h" line="119"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="750">a newly-allocated copy of #ESourceMailIdentity:aliases</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="743">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_name"
              c:identifier="e_source_mail_identity_dup_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="395">Thread-safe variation of e_source_mail_identity_get_name().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-identity.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="404">a newly-allocated copy of #ESourceMailIdentity:name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="397">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_organization"
              c:identifier="e_source_mail_identity_dup_organization"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="477">Thread-safe variation of e_source_mail_identity_dup_organization().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-identity.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="486">a newly-allocated copy of #ESourceMailIdentity:organization</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="479">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_reply_to"
              c:identifier="e_source_mail_identity_dup_reply_to"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="561">Thread-safe variation of e_source_mail_identity_get_reply_to().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-identity.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="570">a newly-allocated copy of #ESourceMailIdentity:reply-to</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="563">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_signature_uid"
              c:identifier="e_source_mail_identity_dup_signature_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="649">Thread-safe variation of e_source_mail_identity_get_signature_uid().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-identity.h" line="112"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="658">a newly-allocated copy of #ESourceMailIdentity:signature-uid</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="651">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_address"
              c:identifier="e_source_mail_identity_get_address"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="293">Returns the email address for this identity from which to send messages.
This may be an empty string but will never be %NULL.</doc>
        <source-position filename="e-source-mail-identity.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="300">the sender's email address</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="295">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliases"
              c:identifier="e_source_mail_identity_get_aliases"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="719">Returns the email address aliases for this identity. These are comma-separated
email addresses which may or may not contain also different name.
This may be an empty string, but will never be %NULL.
There can be used camel_address_decode() on a #CamelInternetAddress
to decode the list of aliases.</doc>
        <source-position filename="e-source-mail-identity.h" line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="729">the sender's email address aliases</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="721">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliases_as_hash_table"
              c:identifier="e_source_mail_identity_get_aliases_as_hash_table"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="807">Returns a set aliases as a hash table with address as key and
name as value of the hash table. The name can be sometimes
empty or NULL, thus rather use g_hash_table_contains() when
checking for particular address. The addresses are
compared case insensitively. The same addresses with a different
name are included only once, the last variant of it. Use
e_source_mail_identity_get_aliases() if you need more fine-grained
control on the list of aliases.</doc>
        <source-position filename="e-source-mail-identity.h" line="124"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="820">A newly created
  #GHashTable will all the aliases. Returns %NULL if there are none set.
  Use g_hash_table_destroy() to free the returned hash table.</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="809">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name"
              c:identifier="e_source_mail_identity_get_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="377">Returns the sender's name for this identity.</doc>
        <source-position filename="e-source-mail-identity.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="383">the sender's name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="379">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_organization"
              c:identifier="e_source_mail_identity_get_organization"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="459">Returns the sender's organization for this identity.</doc>
        <source-position filename="e-source-mail-identity.h" line="96"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="465">the sender's organization</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="461">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_reply_to"
              c:identifier="e_source_mail_identity_get_reply_to"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="542">Returns the email address for this identity to which recipients should
send replies.</doc>
        <source-position filename="e-source-mail-identity.h" line="103"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="549">the sender's reply-to address</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="544">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signature_uid"
              c:identifier="e_source_mail_identity_get_signature_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="627">Returns the #ESource:uid of an #ESource describing a mail signature.

If the user does not want to use a signature for this identity, the
convention is to set the #ESourceMailIdentity:signature-uid property
to "none".</doc>
        <source-position filename="e-source-mail-identity.h" line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-identity.c"
               line="637">the sender's signature ID, or "none"</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="629">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_address"
              c:identifier="e_source_mail_identity_set_address"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="343">Sets the email address for this identity from which to send messages.

The internal copy of @address is automatically stripped of leading and
trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-mail-identity.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="345">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
          <parameter name="address"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="346">the sender's email address, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_aliases"
              c:identifier="e_source_mail_identity_set_aliases"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="772">Sets the email address aliases for this identity. These are comma-separated
email addresses which may or may not contain also different name.

The internal copy of @aliases is automatically stripped of leading and
trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-mail-identity.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="774">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
          <parameter name="aliases"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="775">the sender's email address aliases, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_name"
              c:identifier="e_source_mail_identity_set_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="426">Sets the sender's name for this identity.

The internal copy of @name is automatically stripped of leading and
trailing whitespace.</doc>
        <source-position filename="e-source-mail-identity.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="428">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="429">the sender's name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_organization"
              c:identifier="e_source_mail_identity_set_organization"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="508">Sets the sender's organization for this identity.

The internal copy of @organization is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-mail-identity.h" line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="510">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
          <parameter name="organization"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="511">the sender's organization, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_reply_to"
              c:identifier="e_source_mail_identity_set_reply_to"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="592">Sets the email address for this identity to which recipients should
send replies.

The internal copy of @reply_to is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is
set instead.</doc>
        <source-position filename="e-source-mail-identity.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="594">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
          <parameter name="reply_to"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="595">the sender's reply-to address, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signature_uid"
              c:identifier="e_source_mail_identity_set_signature_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-identity.c"
             line="680">Sets the #ESource:uid of an #ESource describing a mail signature.

If the user does not want to use a signature for this identity, the
convention is to set the #ESourceMailIdentity:signature-uid property
to "none".  In keeping with that convention, the property will be set
to "none" if @signature is %NULL or an empty string.</doc>
        <source-position filename="e-source-mail-identity.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="682">an #ESourceMailIdentity</doc>
            <type name="SourceMailIdentity" c:type="ESourceMailIdentity*"/>
          </instance-parameter>
          <parameter name="signature_uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-identity.c"
                 line="683">the sender's signature ID, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="address"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="aliases"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="organization"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="reply-to"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="signature-uid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMailIdentityPrivate"
              c:type="ESourceMailIdentityPrivate*"/>
      </field>
    </class>
    <record name="SourceMailIdentityClass"
            c:type="ESourceMailIdentityClass"
            glib:is-gtype-struct-for="SourceMailIdentity">
      <source-position filename="e-source-mail-identity.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceMailIdentityPrivate"
            c:type="ESourceMailIdentityPrivate"
            disguised="1">
      <source-position filename="e-source-mail-identity.h" line="60"/>
    </record>
    <class name="SourceMailSignature"
           c:symbol-prefix="source_mail_signature"
           c:type="ESourceMailSignature"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceMailSignature"
           glib:get-type="e_source_mail_signature_get_type"
           glib:type-struct="SourceMailSignatureClass">
      <doc xml:space="preserve"
           filename="e-source-mail-signature.c"
           line="18">The #ESourceMailSignature extension refers to a personalized email
signature.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMailSignature *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MAIL_SIGNATURE);
]|</doc>
      <source-position filename="e-source-mail-signature.h" line="78"/>
      <method name="dup_mime_type"
              c:identifier="e_source_mail_signature_dup_mime_type"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="276">Thread-safe variation of e_source_mail_signature_get_mime_type().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-signature.h" line="86"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="285">a newly-allocated copy of #ESourceMailSignature:mime-type,
   or %NULL</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="278">an #ESourceMailSignature</doc>
            <type name="SourceMailSignature" c:type="ESourceMailSignature*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_file"
              c:identifier="e_source_mail_signature_get_file"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="231">Returns a #GFile instance pointing to the signature file for @extension.
The signature file may be a regular file containing the static signature
content, or it may be a symbolic link to an executable file that produces
the signature content.

e_source_mail_signature_load() uses this to load the signature content.</doc>
        <source-position filename="e-source-mail-signature.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="242">a #GFile</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="233">an #ESourceMailSignature</doc>
            <type name="SourceMailSignature" c:type="ESourceMailSignature*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mime_type"
              c:identifier="e_source_mail_signature_get_mime_type"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="254">Returns the MIME type of the signature content for @extension, or %NULL
if it has not yet been determined.

e_source_mail_signature_load() sets this automatically if the MIME type
has not yet been determined.</doc>
        <source-position filename="e-source-mail-signature.h" line="84"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-mail-signature.c"
               line="264">the MIME type of the signature content, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="256">an #ESourceMailSignature</doc>
            <type name="SourceMailSignature" c:type="ESourceMailSignature*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_mime_type"
              c:identifier="e_source_mail_signature_set_mime_type"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-signature.c"
             line="308">Sets the MIME type of the signature content for @extension.

e_source_mail_signature_load() sets this automatically if the MIME type
has not yet been determined.

The internal copy of @mime_type is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is
set instead.</doc>
        <source-position filename="e-source-mail-signature.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="310">an #ESourceMailSignature</doc>
            <type name="SourceMailSignature" c:type="ESourceMailSignature*"/>
          </instance-parameter>
          <parameter name="mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-signature.c"
                 line="311">a MIME type, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="file" transfer-ownership="none">
        <type name="Gio.File"/>
      </property>
      <property name="mime-type"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMailSignaturePrivate"
              c:type="ESourceMailSignaturePrivate*"/>
      </field>
    </class>
    <record name="SourceMailSignatureClass"
            c:type="ESourceMailSignatureClass"
            glib:is-gtype-struct-for="SourceMailSignature">
      <source-position filename="e-source-mail-signature.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceMailSignaturePrivate"
            c:type="ESourceMailSignaturePrivate"
            disguised="1">
      <source-position filename="e-source-mail-signature.h" line="60"/>
    </record>
    <class name="SourceMailSubmission"
           c:symbol-prefix="source_mail_submission"
           c:type="ESourceMailSubmission"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceMailSubmission"
           glib:get-type="e_source_mail_submission_get_type"
           glib:type-struct="SourceMailSubmissionClass">
      <doc xml:space="preserve"
           filename="e-source-mail-submission.c"
           line="18">The #ESourceMailSubmission extension tracks settings to be applied
when submitting a mail message for delivery.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMailSubmission *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MAIL_SUBMISSION);
]|</doc>
      <source-position filename="e-source-mail-submission.h" line="78"/>
      <method name="dup_sent_folder"
              c:identifier="e_source_mail_submission_dup_sent_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="247">Thread-safe variation of e_source_mail_submission_get_sent_folder().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-submission.h" line="84"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-submission.c"
               line="256">a newly-allocated copy of #ESourceMailSubmission:sent-folder</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="249">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_transport_uid"
              c:identifier="e_source_mail_submission_dup_transport_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="372">Thread-safe variation of e_source_mail_submission_get_transport_uid().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-mail-submission.h" line="96"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-mail-submission.c"
               line="381">a newly-allocated copy of #ESourceMailSubmission:transport-uid</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="374">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_replies_to_origin_folder"
              c:identifier="e_source_mail_submission_get_replies_to_origin_folder"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="434">Returns whether save replies in the folder of the message
being replied to, instead of the Sent folder.</doc>
        <source-position filename="e-source-mail-submission.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-submission.c"
               line="441">whether save replies in the folder of the message being replied to</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="436">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sent_folder"
              c:identifier="e_source_mail_submission_get_sent_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="228">Returns a string identifying the preferred folder for sent messages.
The format of the identifier string is defined by the client application.</doc>
        <source-position filename="e-source-mail-submission.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-submission.c"
               line="235">an identifier for the preferred sent folder</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="230">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_transport_uid"
              c:identifier="e_source_mail_submission_get_transport_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="353">Returns the #ESource:uid of the #ESource that describes the mail
transport to be used for outgoing messages.</doc>
        <source-position filename="e-source-mail-submission.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-submission.c"
               line="360">the mail transport #ESource:uid</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="355">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_use_sent_folder"
              c:identifier="e_source_mail_submission_get_use_sent_folder"
              version="3.26">
        <source-position filename="e-source-mail-submission.h" line="89"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-mail-submission.c"
               line="318">whether save messages to the sent folder at all</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="316">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_replies_to_origin_folder"
              c:identifier="e_source_mail_submission_set_replies_to_origin_folder"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="453">Sets whether save replies in the folder of the message
being replied to, instead of the Sent folder.</doc>
        <source-position filename="e-source-mail-submission.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="455">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
          <parameter name="replies_to_origin_folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="456">new value</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sent_folder"
              c:identifier="e_source_mail_submission_set_sent_folder"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="278">Sets the preferred folder for sent messages by an identifier string.
The format of the identifier string is defined by the client application.

The internal copy of @sent_folder is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-mail-submission.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="280">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
          <parameter name="sent_folder"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="281">an identifier for the preferred sent folder,
              or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_transport_uid"
              c:identifier="e_source_mail_submission_set_transport_uid"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="403">Sets the #ESource:uid of the #ESource that describes the mail
transport to be used for outgoing messages.</doc>
        <source-position filename="e-source-mail-submission.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="405">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
          <parameter name="transport_uid"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="406">the mail transport #ESource:uid, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_use_sent_folder"
              c:identifier="e_source_mail_submission_set_use_sent_folder"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-mail-submission.c"
             line="330">Sets whether save messages to the sent folder at all.</doc>
        <source-position filename="e-source-mail-submission.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="332">an #ESourceMailSubmission</doc>
            <type name="SourceMailSubmission" c:type="ESourceMailSubmission*"/>
          </instance-parameter>
          <parameter name="use_sent_folder" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-mail-submission.c"
                 line="333">the value to set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="replies-to-origin-folder"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sent-folder"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="transport-uid"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="use-sent-folder"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMailSubmissionPrivate"
              c:type="ESourceMailSubmissionPrivate*"/>
      </field>
    </class>
    <record name="SourceMailSubmissionClass"
            c:type="ESourceMailSubmissionClass"
            glib:is-gtype-struct-for="SourceMailSubmission">
      <source-position filename="e-source-mail-submission.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceMailSubmissionPrivate"
            c:type="ESourceMailSubmissionPrivate"
            disguised="1">
      <source-position filename="e-source-mail-submission.h" line="60"/>
    </record>
    <class name="SourceMailTransport"
           c:symbol-prefix="source_mail_transport"
           c:type="ESourceMailTransport"
           version="3.6"
           parent="SourceBackend"
           glib:type-name="ESourceMailTransport"
           glib:get-type="e_source_mail_transport_get_type"
           glib:type-struct="SourceMailTransportClass">
      <doc xml:space="preserve"
           filename="e-source-mail-transport.c"
           line="18">The #ESourceMailTransport extension identifies the #ESource as a
mail transport which describes where to send outgoing messages.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceMailTransport *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MAIL_TRANSPORT);
]|</doc>
      <source-position filename="e-source-mail-transport.h" line="78"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceBackend" c:type="ESourceBackend"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMailTransportPrivate"
              c:type="ESourceMailTransportPrivate*"/>
      </field>
    </class>
    <record name="SourceMailTransportClass"
            c:type="ESourceMailTransportClass"
            glib:is-gtype-struct-for="SourceMailTransport">
      <source-position filename="e-source-mail-transport.h" line="78"/>
      <field name="parent_class">
        <type name="SourceBackendClass" c:type="ESourceBackendClass"/>
      </field>
    </record>
    <record name="SourceMailTransportPrivate"
            c:type="ESourceMailTransportPrivate"
            disguised="1">
      <source-position filename="e-source-mail-transport.h" line="60"/>
    </record>
    <class name="SourceMemoList"
           c:symbol-prefix="source_memo_list"
           c:type="ESourceMemoList"
           version="3.6"
           parent="SourceSelectable"
           glib:type-name="ESourceMemoList"
           glib:get-type="e_source_memo_list_get_type"
           glib:type-struct="SourceMemoListClass">
      <doc xml:space="preserve"
           filename="e-source-memo-list.c"
           line="18">The #ESourceCalendar extension identifies the #ESource as a memo list.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceCalendar *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_MEMO_LIST);
]|</doc>
      <source-position filename="e-source-memo-list.h" line="78"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceSelectable" c:type="ESourceSelectable"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceMemoListPrivate" c:type="ESourceMemoListPrivate*"/>
      </field>
    </class>
    <record name="SourceMemoListClass"
            c:type="ESourceMemoListClass"
            glib:is-gtype-struct-for="SourceMemoList">
      <source-position filename="e-source-memo-list.h" line="78"/>
      <field name="parent_class">
        <type name="SourceSelectableClass" c:type="ESourceSelectableClass"/>
      </field>
    </record>
    <record name="SourceMemoListPrivate"
            c:type="ESourceMemoListPrivate"
            disguised="1">
      <source-position filename="e-source-memo-list.h" line="60"/>
    </record>
    <class name="SourceOffline"
           c:symbol-prefix="source_offline"
           c:type="ESourceOffline"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceOffline"
           glib:get-type="e_source_offline_get_type"
           glib:type-struct="SourceOfflineClass">
      <doc xml:space="preserve"
           filename="e-source-offline.c"
           line="18">The #ESourceOffline extension tracks whether data from a remote
server should be cached locally for viewing while offline.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceOffline *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_OFFLINE);
]|</doc>
      <source-position filename="e-source-offline.h" line="78"/>
      <method name="get_stay_synchronized"
              c:identifier="e_source_offline_get_stay_synchronized"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-offline.c"
             line="122">Returns whether data from a remote server should be cached locally
for viewing while offline.  Backends are responsible for implementing
such caching.</doc>
        <source-position filename="e-source-offline.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-offline.c"
               line="130">whether data should be cached for offline</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-offline.c"
                 line="124">an #ESourceOffline</doc>
            <type name="SourceOffline" c:type="ESourceOffline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_stay_synchronized"
              c:identifier="e_source_offline_set_stay_synchronized"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-offline.c"
             line="142">Sets whether data from a remote server should be cached locally for
viewing while offline.  Backends are responsible for implementing
such caching.</doc>
        <source-position filename="e-source-offline.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-offline.c"
                 line="144">an #ESourceOffline</doc>
            <type name="SourceOffline" c:type="ESourceOffline*"/>
          </instance-parameter>
          <parameter name="stay_synchronized" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-offline.c"
                 line="145">whether data should be cached for offline</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="stay-synchronized"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceOfflinePrivate" c:type="ESourceOfflinePrivate*"/>
      </field>
    </class>
    <record name="SourceOfflineClass"
            c:type="ESourceOfflineClass"
            glib:is-gtype-struct-for="SourceOffline">
      <source-position filename="e-source-offline.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceOfflinePrivate"
            c:type="ESourceOfflinePrivate"
            disguised="1">
      <source-position filename="e-source-offline.h" line="60"/>
    </record>
    <class name="SourceOpenPGP"
           c:symbol-prefix="source_openpgp"
           c:type="ESourceOpenPGP"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceOpenPGP"
           glib:get-type="e_source_openpgp_get_type"
           glib:type-struct="SourceOpenPGPClass">
      <doc xml:space="preserve"
           filename="e-source-openpgp.c"
           line="18">The #ESourceOpenPGP extension tracks OpenPGP (RFC 4880) settings to be
applied to outgoing mail messages.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceOpenPGP *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_OPENPGP);
]|</doc>
      <source-position filename="e-source-openpgp.h" line="78"/>
      <method name="dup_key_id"
              c:identifier="e_source_openpgp_dup_key_id"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="416">Thread-safe variation of e_source_openpgp_get_key_id().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-openpgp.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="425">a newly-allocated copy of #ESourceOpenPGP:key-id</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="418">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_signing_algorithm"
              c:identifier="e_source_openpgp_dup_signing_algorithm"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="500">Thread-safe variation of e_source_openpgp_get_signing_algorithm().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-openpgp.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="509">a newly-allocated copy of #ESourceOpenPGP:signing-algorithm</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="502">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_always_trust"
              c:identifier="e_source_openpgp_get_always_trust"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="314">Returns whether to skip key validation and assume that used keys are
always fully trusted.</doc>
        <source-position filename="e-source-openpgp.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="321">whether used keys are always fully trusted</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="316">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypt_by_default"
              c:identifier="e_source_openpgp_get_encrypt_by_default"
              version="3.18">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="610">Returns whether to digitally encrypt outgoing messages by default using
OpenPGP-compliant software such as GNU Privacy Guard (GnuPG).</doc>
        <source-position filename="e-source-openpgp.h" line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="617">whether to encrypt outgoing messages by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="612">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypt_to_self"
              c:identifier="e_source_openpgp_get_encrypt_to_self"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="357">Returns whether to "encrypt-to-self" when sending encrypted messages.</doc>
        <source-position filename="e-source-openpgp.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="363">whether to "encrypt-to-self"</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="359">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_key_id"
              c:identifier="e_source_openpgp_get_key_id"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="398">Returns the OpenPGP key ID used to sign and encrypt messages.</doc>
        <source-position filename="e-source-openpgp.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="404">the key ID used to sign and encrypt messages</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="400">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefer_inline"
              c:identifier="e_source_openpgp_get_prefer_inline"
              version="3.20">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="653">Returns whether to prefer inline sign/encrypt of the text/plain messages.</doc>
        <source-position filename="e-source-openpgp.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="659">whether to prefer inline sign/encrypt of the text/plain messages</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="655">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sign_by_default"
              c:identifier="e_source_openpgp_get_sign_by_default"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="567">Returns whether to digitally sign outgoing messages by default using
OpenPGP-compliant software such as GNU Privacy Guard (GnuPG).</doc>
        <source-position filename="e-source-openpgp.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="574">whether to sign outgoing messages by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="569">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signing_algorithm"
              c:identifier="e_source_openpgp_get_signing_algorithm"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="481">Returns the name of the hash algorithm used to digitally sign outgoing
messages.</doc>
        <source-position filename="e-source-openpgp.h" line="95"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-openpgp.c"
               line="488">the signing algorithm for outgoing messages</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="483">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_always_trust"
              c:identifier="e_source_openpgp_set_always_trust"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="333">Sets whether to skip key validation and assume that used keys are
always fully trusted.</doc>
        <source-position filename="e-source-openpgp.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="335">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="always_trust" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="336">whether used keys are always fully trusted</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypt_by_default"
              c:identifier="e_source_openpgp_set_encrypt_by_default"
              version="3.18">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="629">Sets whether to digitally encrypt outgoing messages by default using
OpenPGP-compliant software such as GNU Privacy Guard (GnuPG).</doc>
        <source-position filename="e-source-openpgp.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="631">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="encrypt_by_default" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="632">whether to encrypt outgoing messages by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypt_to_self"
              c:identifier="e_source_openpgp_set_encrypt_to_self"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="375">Sets whether to "encrypt-to-self" when sending encrypted messages.</doc>
        <source-position filename="e-source-openpgp.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="377">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="encrypt_to_self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="378">whether to "encrypt-to-self"</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_key_id"
              c:identifier="e_source_openpgp_set_key_id"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="447">Sets the OpenPGP key ID used to sign and encrypt messages.

The internal copy of @key_id is automatically stripped of leading and
trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-openpgp.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="449">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="key_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="450">the key ID used to sign and encrypt messages</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_prefer_inline"
              c:identifier="e_source_openpgp_set_prefer_inline"
              version="3.20">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="671">Sets whether to prefer inline sign/encrypt of the text/plain messages.</doc>
        <source-position filename="e-source-openpgp.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="673">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="prefer_inline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="674">whether to prefer inline sign/encrypt of the text/plain messages</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sign_by_default"
              c:identifier="e_source_openpgp_set_sign_by_default"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="586">Sets whether to digitally sign outgoing messages by default using
OpenPGP-compliant software such as GNU Privacy Guard (GnuPG).</doc>
        <source-position filename="e-source-openpgp.h" line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="588">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="sign_by_default" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="589">whether to sign outgoing messages by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signing_algorithm"
              c:identifier="e_source_openpgp_set_signing_algorithm"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-openpgp.c"
             line="531">Sets the name of the hash algorithm used to digitally sign outgoing
messages.

The internal copy of @signing_algorithm is automatically stripped of
leading and trailing whitespace.  If the resulting string is empty,
%NULL is set instead.</doc>
        <source-position filename="e-source-openpgp.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="533">an #ESourceOpenPGP</doc>
            <type name="SourceOpenPGP" c:type="ESourceOpenPGP*"/>
          </instance-parameter>
          <parameter name="signing_algorithm" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-openpgp.c"
                 line="534">the signing algorithm for outgoing messages</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="always-trust"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="encrypt-by-default"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="encrypt-to-self"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="key-id"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="prefer-inline"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="sign-by-default"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="signing-algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceOpenPGPPrivate" c:type="ESourceOpenPGPPrivate*"/>
      </field>
    </class>
    <record name="SourceOpenPGPClass"
            c:type="ESourceOpenPGPClass"
            glib:is-gtype-struct-for="SourceOpenPGP">
      <source-position filename="e-source-openpgp.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceOpenPGPPrivate"
            c:type="ESourceOpenPGPPrivate"
            disguised="1">
      <source-position filename="e-source-openpgp.h" line="60"/>
    </record>
    <record name="SourcePrivate" c:type="ESourcePrivate" disguised="1">
      <source-position filename="e-source.h" line="106"/>
    </record>
    <class name="SourceProxy"
           c:symbol-prefix="source_proxy"
           c:type="ESourceProxy"
           version="3.12"
           parent="SourceExtension"
           glib:type-name="ESourceProxy"
           glib:get-type="e_source_proxy_get_type"
           glib:type-struct="SourceProxyClass">
      <doc xml:space="preserve"
           filename="e-source-proxy.c"
           line="18">The #ESourceProxy extension defines a network proxy profile.

An #ESource instance with this extension can serve as a #GProxyResolver.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceProxy *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_PROXY);
]|</doc>
      <source-position filename="e-source-proxy.h" line="79"/>
      <method name="dup_autoconfig_url"
              c:identifier="e_source_proxy_dup_autoconfig_url"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="721">Thread-safe variation of e_source_proxy_get_autoconfig_url().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="87"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="730">a newly-allocated copy of #ESourceProxy:autoconfig-url</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="723">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_ftp_host"
              c:identifier="e_source_proxy_dup_ftp_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="903">Thread-safe variation of e_source_proxy_get_ftp_host().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="98"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="912">a newly-allocated copy of #ESourceProxy:ftp-host</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="905">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_http_auth_password"
              c:identifier="e_source_proxy_dup_http_auth_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1283">Thread-safe variation of e_source_proxy_get_http_auth_password().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1292">a newly-allocated copy of #ESourceProxy:http-auth-password</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1285">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_http_auth_user"
              c:identifier="e_source_proxy_dup_http_auth_user"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1202">Thread-safe variation of e_source_proxy_get_http_auth_user().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1211">a newly-allocated copy of #ESourceProxy:http-auth-user</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1204">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_http_host"
              c:identifier="e_source_proxy_dup_http_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1027">Thread-safe variation of e_source_proxy_get_http_host().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="105"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1036">a newly-allocated copy of #ESourceProxy:http-host</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1029">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_https_host"
              c:identifier="e_source_proxy_dup_https_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1364">Threads-safe variation of e_source_proxy_get_https_host().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1373">a newly-allocated copy of #ESourceProxy:https-host</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1366">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_ignore_hosts"
              c:identifier="e_source_proxy_dup_ignore_hosts"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="809">Thread-safe variation of e_source_proxy_get_ignore_hosts().
Use this function when accessing @extension from multiple threads.

The returned string array should be freed with g_strfreev() when no
longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="819">a newly-allocated copy of
         #ESourceProxy:ignore-hosts</doc>
          <array c:type="gchar**">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="811">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_socks_host"
              c:identifier="e_source_proxy_dup_socks_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1488">Thread-safe variation of e_source_proxy_get_socks_host().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-proxy.h" line="138"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1497">a newly-allocated copy of #ESourceProxy:socks-host</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1490">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoconfig_url"
              c:identifier="e_source_proxy_get_autoconfig_url"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="701">Returns the URL that provides proxy configuration values.  When the
@extension's #ESourceProxy:method is @E_PROXY_METHOD_AUTO, this URL
is used to look up proxy information for all protocols.</doc>
        <source-position filename="e-source-proxy.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="709">the autoconfiguration URL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="703">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ftp_host"
              c:identifier="e_source_proxy_get_ftp_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="884">Returns the machine name to proxy FTP through when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="891">FTP proxy host name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="886">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ftp_port"
              c:identifier="e_source_proxy_get_ftp_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="965">Returns the port on the machine defined by #ESourceProxy:ftp-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="101"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="972">FTP proxy port</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="967">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_auth_password"
              c:identifier="e_source_proxy_get_http_auth_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1264">Returns the password to pass as authentication when doing HTTP proxying
and #ESourceProxy:http-use-auth is %TRUE.</doc>
        <source-position filename="e-source-proxy.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1271">HTTP proxy password</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1266">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_auth_user"
              c:identifier="e_source_proxy_get_http_auth_user"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1183">Returns the user name to pass as authentication when doing HTTP proxying
and #ESourceProxy:http-use-auth is %TRUE.</doc>
        <source-position filename="e-source-proxy.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1190">HTTP proxy username</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1185">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_host"
              c:identifier="e_source_proxy_get_http_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1008">Returns the machine name to proxy HTTP through when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="104"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1015">HTTP proxy host name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1010">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_port"
              c:identifier="e_source_proxy_get_http_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1089">Returns the port on the machine defined by #ESourceProxy:http-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1096">HTTP proxy port</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1091">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_http_use_auth"
              c:identifier="e_source_proxy_get_http_use_auth"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1132">Returns whether the HTTP proxy server at #ESourceProxy:http-host and
#ESourceProxy:http-port requires authentication.

The username/password combo is defined by #ESourceProxy:http-auth-user
and #ESourceProxy:http-auth-password, but only applies when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1143">whether to authenticate HTTP proxy connections</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1134">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_https_host"
              c:identifier="e_source_proxy_get_https_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1345">Returns the machine name to proxy secure HTTP through when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1352">secure HTTP proxy host name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1347">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_https_port"
              c:identifier="e_source_proxy_get_https_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1426">Returns the port on the machine defined by #ESourceProxy:https-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1433">secure HTTP proxy port</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1428">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ignore_hosts"
              c:identifier="e_source_proxy_get_ignore_hosts"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="784">Returns a %NULL-terminated string array of hosts which are connected to
directly, rather than via the proxy (if it is active).  The array elements
can be hostnames, domains (using an initial wildcard like *.foo.com), IP
host addresses (both IPv4 and IPv6) and network addresses with a netmask
(something like 192.168.0.0/24).

The returned array is owned by @extension and should not be modified or
freed.</doc>
        <source-position filename="e-source-proxy.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="797">a %NULL-terminated string array of hosts</doc>
          <array c:type="const gchar* const*">
            <type name="utf8"/>
          </array>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="786">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method"
              c:identifier="e_source_proxy_get_method"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="652">Returns the proxy configuration method for @extension.

The proxy configuration method determines the behavior of
e_source_proxy_lookup().</doc>
        <source-position filename="e-source-proxy.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="661">the proxy configuration method</doc>
          <type name="ProxyMethod" c:type="EProxyMethod"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="654">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_socks_host"
              c:identifier="e_source_proxy_get_socks_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1469">Returns the machine name to use as a SOCKS proxy when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="137"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1476">SOCKS proxy host name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1471">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_socks_port"
              c:identifier="e_source_proxy_get_socks_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1550">Returns the port on the machine defined by #ESourceProxy:socks-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="141"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-proxy.c"
               line="1557">SOCKS proxy port</doc>
          <type name="guint16" c:type="guint16"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1552">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_autoconfig_url"
              c:identifier="e_source_proxy_set_autoconfig_url"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="752">Sets the URL that provides proxy configuration values.  When the
@extension's #ESourceProxy:method is @E_PROXY_METHOD_AUTO, this URL
is used to look up proxy information for all protocols.</doc>
        <source-position filename="e-source-proxy.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="754">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="autoconfig_url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="755">an autoconfiguration URL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ftp_host"
              c:identifier="e_source_proxy_set_ftp_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="934">Sets the machine name to proxy FTP through when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="936">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="ftp_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="937">FTP proxy host name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ftp_port"
              c:identifier="e_source_proxy_set_ftp_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="984">Sets the port on the machine defined by #ESourceProxy:ftp-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="986">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="ftp_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="987">FTP proxy port</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_auth_password"
              c:identifier="e_source_proxy_set_http_auth_password"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1314">Sets the password to pass as authentication when doing HTTP proxying
and #ESourceProxy:http-use-auth is %TRUE.</doc>
        <source-position filename="e-source-proxy.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1316">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="http_auth_password" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1317">HTTP proxy password</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_auth_user"
              c:identifier="e_source_proxy_set_http_auth_user"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1233">Sets the user name to pass as authentication when doing HTTP proxying
and #ESourceProxy:http-use-auth is %TRUE.</doc>
        <source-position filename="e-source-proxy.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1235">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="http_auth_user" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1236">HTTP proxy username</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_host"
              c:identifier="e_source_proxy_set_http_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1058">Sets the machine name to proxy HTTP through when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="106"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1060">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="http_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1061">HTTP proxy host name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_port"
              c:identifier="e_source_proxy_set_http_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1108">Sets the port on the machine defined by #ESourceProxy:http-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1110">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="http_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1111">HTTP proxy port</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_http_use_auth"
              c:identifier="e_source_proxy_set_http_use_auth"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1155">Sets whether the HTTP proxy server at #ESourceProxy:http-host and
#ESourceProxy:http-port requires authentication.

The username/password combo is defined by #ESourceProxy:http-auth-user
and #ESourceProxy:http-auth-password, but only applies when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1157">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="http_use_auth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1158">whether to authenticate HTTP proxy connections</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_https_host"
              c:identifier="e_source_proxy_set_https_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1395">Sets the machine name to proxy secure HTTP through when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1397">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="https_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1398">secure HTTP proxy host name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_https_port"
              c:identifier="e_source_proxy_set_https_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1445">Sets the port on the machine defined by #ESourceProxy:https-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1447">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="https_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1448">secure HTTP proxy port</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ignore_hosts"
              c:identifier="e_source_proxy_set_ignore_hosts"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="842">Sets the hosts which are connected to directly, rather than via the proxy
(if it is active).  The array elements can be hostnames, domains (using an
initial wildcard like *.foo.com), IP host addresses (both IPv4 and IPv6)
and network addresses with a netmask (something like 192.168.0.0/24).</doc>
        <source-position filename="e-source-proxy.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="844">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="ignore_hosts" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="845">a %NULL-terminated string array of hosts</doc>
            <type name="utf8" c:type="const gchar* const*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_method"
              c:identifier="e_source_proxy_set_method"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="675">Sets the proxy configuration method for @extension.

The proxy configuration method determines the behavior of
e_source_proxy_lookup().</doc>
        <source-position filename="e-source-proxy.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="677">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="678">the proxy configuration method</doc>
            <type name="ProxyMethod" c:type="EProxyMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_socks_host"
              c:identifier="e_source_proxy_set_socks_host"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1519">Sets the machine name to use as a SOCKS proxy when @extension's
#ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1521">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="socks_host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1522">SOCKS proxy host name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_socks_port"
              c:identifier="e_source_proxy_set_socks_port"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-proxy.c"
             line="1569">Sets the port on the machine defined by #ESourceProxy:socks-host to proxy
through when @extension's #ESourceProxy:method is @E_PROXY_METHOD_MANUAL.</doc>
        <source-position filename="e-source-proxy.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1571">an #ESourceProxy</doc>
            <type name="SourceProxy" c:type="ESourceProxy*"/>
          </instance-parameter>
          <parameter name="socks_port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-proxy.c"
                 line="1572">SOCKS proxy port</doc>
            <type name="guint16" c:type="guint16"/>
          </parameter>
        </parameters>
      </method>
      <property name="autoconfig-url"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ftp-host"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="ftp-port"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="http-auth-password"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="http-auth-user"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="http-host"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="http-port"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="http-use-auth"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="https-host"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="https-port"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <property name="ignore-hosts"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <array>
          <type name="utf8"/>
        </array>
      </property>
      <property name="method"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="ProxyMethod"/>
      </property>
      <property name="socks-host"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="socks-port"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceProxyPrivate" c:type="ESourceProxyPrivate*"/>
      </field>
    </class>
    <record name="SourceProxyClass"
            c:type="ESourceProxyClass"
            glib:is-gtype-struct-for="SourceProxy">
      <source-position filename="e-source-proxy.h" line="79"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceProxyPrivate"
            c:type="ESourceProxyPrivate"
            disguised="1">
      <source-position filename="e-source-proxy.h" line="61"/>
    </record>
    <class name="SourceRefresh"
           c:symbol-prefix="source_refresh"
           c:type="ESourceRefresh"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceRefresh"
           glib:get-type="e_source_refresh_get_type"
           glib:type-struct="SourceRefreshClass">
      <doc xml:space="preserve"
           filename="e-source-refresh.c"
           line="18">The #ESourceRefresh extension tracks the interval for fetching
updates from a remote server.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceRefresh *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_REFRESH);
]|</doc>
      <source-position filename="e-source-refresh.h" line="78"/>
      <method name="get_enabled"
              c:identifier="e_source_refresh_get_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="384">Returns whether to periodically fetch updates from a remote server.

The refresh interval is determined by the #ESourceRefresh:interval-minutes
property.</doc>
        <source-position filename="e-source-refresh.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-refresh.c"
               line="393">whether periodic refresh is enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="386">an #ESourceRefresh</doc>
            <type name="SourceRefresh" c:type="ESourceRefresh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interval_minutes"
              c:identifier="e_source_refresh_get_interval_minutes"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="430">Returns the interval for fetching updates from a remote server.

Note this value is only effective when the #ESourceRefresh:enabled
property is %TRUE.</doc>
        <source-position filename="e-source-refresh.h" line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-refresh.c"
               line="439">the interval in minutes</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="432">an #ESourceRefresh</doc>
            <type name="SourceRefresh" c:type="ESourceRefresh*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="e_source_refresh_set_enabled"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="405">Sets whether to periodically fetch updates from a remote server.

The refresh interval is determined by the #ESourceRefresh:interval-minutes
property.</doc>
        <source-position filename="e-source-refresh.h" line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="407">an #ESourceRefresh</doc>
            <type name="SourceRefresh" c:type="ESourceRefresh*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="408">whether to enable periodic refresh</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_interval_minutes"
              c:identifier="e_source_refresh_set_interval_minutes"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-refresh.c"
             line="451">Sets the interval for fetching updates from a remote server.

Note this value is only effective when the #ESourceRefresh:enabled
property is %TRUE.</doc>
        <source-position filename="e-source-refresh.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="453">an #ESourceRefresh</doc>
            <type name="SourceRefresh" c:type="ESourceRefresh*"/>
          </instance-parameter>
          <parameter name="interval_minutes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-refresh.c"
                 line="454">the interval in minutes</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="interval-minutes"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceRefreshPrivate" c:type="ESourceRefreshPrivate*"/>
      </field>
    </class>
    <record name="SourceRefreshClass"
            c:type="ESourceRefreshClass"
            glib:is-gtype-struct-for="SourceRefresh">
      <source-position filename="e-source-refresh.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <callback name="SourceRefreshFunc"
              c:type="ESourceRefreshFunc"
              version="3.6">
      <source-position filename="e-source-refresh.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-refresh.h"
               line="82">an #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="e-source-refresh.h"
               line="83">user data provided to the callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="SourceRefreshPrivate"
            c:type="ESourceRefreshPrivate"
            disguised="1">
      <source-position filename="e-source-refresh.h" line="60"/>
    </record>
    <class name="SourceRegistry"
           c:symbol-prefix="source_registry"
           c:type="ESourceRegistry"
           version="3.6"
           parent="GObject.Object"
           glib:type-name="ESourceRegistry"
           glib:get-type="e_source_registry_get_type"
           glib:type-struct="SourceRegistryClass">
      <doc xml:space="preserve"
           filename="e-source-registry.c"
           line="18">The #ESourceRegistry is a global singleton store for all #ESource
instances.  It uses file monitors to react to key file creation and
deletion events, either constructing an #ESource instance from the
newly created key file, or removing from the logical #ESource
hierarchy the instance corresponding to the deleted key file.

The #ESourceRegistry can be queried for individual #ESource instances
by their unique identifier string or key file path, for collections of
#ESource instances having a particular extension, or for all available
#ESource instances.

The #ESourceRegistry API also provides a front-end for the
"org.gnome.Evolution.DefaultSources" #GSettings schema which tracks
which #ESource instances are designated to be the user's default address
book, calendar, memo list and task list for desktop integration.

Note: The #ESourceRegistry uses thread default main context from the time
of its creation to deliver D-Bus signals, finish operations and so on,
thus it requires a running main loop for its proper functionality.</doc>
      <source-position filename="e-source-registry.h" line="87"/>
      <implements name="Gio.AsyncInitable"/>
      <implements name="Gio.Initable"/>
      <constructor name="new_finish"
                   c:identifier="e_source_registry_new_finish"
                   version="3.6"
                   throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1856">Finishes the operation started with e_source_registry_new_finish().
If an error occurs in connecting to the D-Bus service, the function
sets @error and returns %NULL.</doc>
        <source-position filename="e-source-registry.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="1865">a new #ESourceRegistry, or %NULL</doc>
          <type name="SourceRegistry" c:type="ESourceRegistry*"/>
        </return-value>
        <parameters>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1858">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_sync"
                   c:identifier="e_source_registry_new_sync"
                   version="3.6"
                   throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1758">Creates a new #ESourceRegistry front-end for the registry D-Bus service.
If an error occurs in connecting to the D-Bus service, the function sets
@error and returns %NULL.

Since 3.12 a singleton will be returned.  No strong reference is kept
internally, so it is the caller's responsibility to keep one.</doc>
        <source-position filename="e-source-registry.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="1770">a new #ESourceRegistry, or %NULL</doc>
          <type name="SourceRegistry" c:type="ESourceRegistry*"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1760">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="debug_enabled"
                c:identifier="e_source_registry_debug_enabled"
                version="3.16">
        <source-position filename="e-data-server-util.h" line="258"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2785">Whether debugging is enabled, that is,
whether e_source_registry_debug_print() will produce any output.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
      </function>
      <function name="debug_print"
                c:identifier="e_source_registry_debug_print"
                version="3.16"
                introspectable="0">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2801">Prints the text only if a debugging is enabled with an environment
variable ESR_DEBUG=1.</doc>
        <source-position filename="e-data-server-util.h" line="259"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="format" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2803">a format string to print</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-data-server-util.c"
                 line="2804">other arguments for the format</doc>
            <varargs/>
          </parameter>
        </parameters>
      </function>
      <function name="free_display_tree"
                c:identifier="e_source_registry_free_display_tree"
                version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2832">Convenience function to free a #GNode tree of registered
sources created by e_source_registry_build_display_tree().</doc>
        <source-position filename="e-source-registry.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="display_tree" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2834">a tree of sources, arranged for display</doc>
            <type name="GLib.Node" c:type="GNode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="new" c:identifier="e_source_registry_new" version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1818">Asynchronously creates a new #ESourceRegistry front-end for the registry
D-Bus service.

When the operation is finished, @callback will be called.  You can then
call e_source_registry_new_finish() to get the result of the operation.

Since 3.12 a singleton will be returned.  No strong reference is kept
internally, so it is the caller's responsibility to keep one.</doc>
        <source-position filename="e-source-registry.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1820">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1821">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1823">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <virtual-method name="credentials_required">
        <source-position filename="e-source-registry.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="SourceCredentialsReason"
                  c:type="ESourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
          <parameter name="op_error" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="source_added">
        <source-position filename="e-source-registry.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="source_changed">
        <source-position filename="e-source-registry.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="source_disabled">
        <source-position filename="e-source-registry.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="source_enabled">
        <source-position filename="e-source-registry.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="source_removed">
        <source-position filename="e-source-registry.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="build_display_tree"
              c:identifier="e_source_registry_build_display_tree"
              version="3.6"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2771">Returns a single #GNode tree of registered sources that can be used to
populate a #GtkTreeModel.  (The root #GNode is just an empty placeholder.)

Similar to e_source_registry_list_sources(), an @extension_name can be
given to restrict the tree to sources having that extension name.  Parents
of matched sources are included in the tree regardless of whether they have
an extension named @extension_name.

Disabled leaf nodes are automatically excluded from the #GNode tree.

The sources returned in the tree are referenced for thread-safety.
They must each be unreferenced with g_object_unref() when finished
with them.  Free the returned tree itself with g_node_destroy().
For convenience, e_source_registry_free_display_tree() does all
that in one step.</doc>
        <source-position filename="e-source-registry.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2792">a tree of sources,
         arranged for display</doc>
          <type name="GLib.Node" c:type="GNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2773">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="extension_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2774">an extension name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="check_enabled"
              c:identifier="e_source_registry_check_enabled"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2633">Determines whether @source is "effectively" enabled by examining its
own #ESource:enabled property as well as those of its ancestors in the
#ESource hierarchy.  If all examined #ESource:enabled properties are
%TRUE, then the function returns %TRUE.  If any are %FALSE, then the
function returns %FALSE.

Use this function instead of e_source_get_enabled() to determine
things like whether to display an #ESource in a user interface or
whether to act on the data set described by the #ESource.</doc>
        <source-position filename="e-source-registry.h" line="156"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2648">whether @source is "effectively" enabled</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2635">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2636">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_source"
              c:identifier="e_source_registry_commit_source"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1984">See e_source_registry_commit_source_sync() for details.

When the operation is finished, @callback will be called.  You can then
call e_source_registry_commit_source_finish() to get the result of the
operation.</doc>
        <source-position filename="e-source-registry.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1986">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1987">an #ESource with changes to commit</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1988">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1989">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1991">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_source_finish"
              c:identifier="e_source_registry_commit_source_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2033">Finishes the operation started with e_source_registry_commit_source().

If an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source-registry.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2043">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2035">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2036">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="commit_source_sync"
              c:identifier="e_source_registry_commit_source_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1914">This is a convenience function intended for use with graphical
#ESource editors.  Call this function when the user is finished
making changes to @source.

If @source has a #GDBusObject, its contents are submitted to the D-Bus
service through e_source_write_sync().

If @source does NOT have a #GDBusObject (implying it's a scratch
#ESource), its contents are submitted to the D-Bus service through
either e_source_remote_create_sync() if @source is to be a collection
member, or e_source_registry_create_sources_sync() if @source to be an
independent data source.

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source-registry.h" line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="1936">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1916">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1917">an #ESource with changes to commit</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1918">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_sources"
              c:identifier="e_source_registry_create_sources"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2236">Asynchronously requests the D-Bus service create new key files for each
#ESource in @list_of_sources.  Each list element must be a scratch
#ESource with no #GDBusObject.

When the operation is finished, @callback will be called.  You can then
call e_source_registry_create_sources_finish() to get the result of the
operation.</doc>
        <source-position filename="e-source-registry.h" line="121"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2238">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="list_of_sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2239">a list of #ESource instances with
no #GDBusObject</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Source"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2241">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2242">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2244">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_sources_finish"
              c:identifier="e_source_registry_create_sources_finish"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2296">Finishes the operation started with e_source_registry_create_sources().

If an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source-registry.h" line="127"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2306">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2298">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2299">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_sources_sync"
              c:identifier="e_source_registry_create_sources_sync"
              version="3.6"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2127">Requests the D-Bus service create new key files for each #ESource in
@list_of_sources.  Each list element must be a scratch #ESource with
no #GDBusObject.

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source-registry.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2141">%TRUE on success, %FALSE on failure</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2129">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="list_of_sources" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2130">a list of #ESource instances with
no #GDBusObject</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="Source"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2132">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="debug_dump"
              c:identifier="e_source_registry_debug_dump"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2990">Handy debugging function that uses e_source_registry_build_display_tree()
to print a tree of registered sources to standard output.</doc>
        <source-position filename="e-source-registry.h" line="167"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2992">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="extension_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2993">an extension name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="dup_unique_display_name"
              c:identifier="e_source_registry_dup_unique_display_name"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2854">Compares @source's #ESource:display-name against other sources having
an #ESourceExtension named @extension_name, if given, or else against
all other sources in the @registry.

If @sources's #ESource:display-name is unique among these other sources,
the function will return the #ESource:display-name verbatim.  Otherwise
the function will construct a string that includes the @sources's own
#ESource:display-name as well as those of its ancestors.

The function's return value is intended to be used in messages shown to
the user to help clarify which source is being referred to.  It assumes
@source's #ESource:display-name is at least unique among its siblings.

Free the returned string with g_free() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="163"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2875">a unique display name for @source</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2856">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2857">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="extension_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2858">an extension name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_extension"
              c:identifier="e_source_registry_find_extension"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2572">Examines @source and its ancestors and returns the "deepest" #ESource
having an #ESourceExtension with the given @extension_name.  If neither
@source nor any of its ancestors have such an extension, the function
returns %NULL.

This function is useful in cases when an #ESourceExtension is meant to
apply to both the #ESource it belongs to and the #ESource's descendants.

A common example is the #ESourceCollection extension, where descendants
of an #ESource having an #ESourceCollection extension are implied to be
members of that collection.  In that example, this function can be used
to test whether @source is a member of a collection.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.

Note the function returns the #ESource containing the #ESourceExtension
instead of the #ESourceExtension itself because extension instances are
not to be referenced directly (see e_source_get_extension()).</doc>
        <source-position filename="e-source-registry.h" line="152"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2598">an #ESource, or %NULL if no match was found</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2574">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2575">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
          <parameter name="extension_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2576">the extension name to find</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_oauth2_services"
              c:identifier="e_source_registry_get_oauth2_services"
              version="3.28">
        <source-position filename="e-source-registry.h" line="100"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="1882">an instance of #EOAuth2Services, owned by @registry</doc>
          <type name="OAuth2Services" c:type="EOAuth2Services*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1880">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_enabled"
              c:identifier="e_source_registry_list_enabled"
              version="3.10">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2523">Similar to e_source_registry_list_sources(), but returns only enabled
sources according to e_source_registry_check_enabled().

The sources returned in the list are referenced for thread-safety.
They must each be unreferenced with g_object_unref() when finished
with them.  Free the returned list itself with g_list_free().

An easy way to free the list properly in one step is as follows:

|[
  g_list_free_full (list, g_object_unref);
]|</doc>
        <source-position filename="e-source-registry.h" line="150"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2541">a sorted list of sources</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Source"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2525">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="extension_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2526">an extension name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_sources"
              c:identifier="e_source_registry_list_sources"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2468">Returns a list of registered sources, sorted by display name.  If
@extension_name is given, restrict the list to sources having that
extension name.

The sources returned in the list are referenced for thread-safety.
They must each be unreferenced with g_object_unref() when finished
with them.  Free the returned list itself with g_list_free().

An easy way to free the list properly in one step is as follows:

|[
  g_list_free_full (list, g_object_unref);
]|</doc>
        <source-position filename="e-source-registry.h" line="148"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2487">a sorted list of sources</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Source"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2470">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="extension_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2471">an extension name, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_builtin_address_book"
              c:identifier="e_source_registry_ref_builtin_address_book"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3017">Returns the built-in address book #ESource.

This #ESource is always present and makes for a safe fallback.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="172"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3028">the built-in address book #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3019">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_builtin_calendar"
              c:identifier="e_source_registry_ref_builtin_calendar"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3047">Returns the built-in calendar #ESource.

This #ESource is always present and makes for a safe fallback.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3058">the built-in calendar #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3049">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_builtin_mail_account"
              c:identifier="e_source_registry_ref_builtin_mail_account"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3077">Returns the built-in mail account #ESource.

This #ESource is always present and makes for a safe fallback.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3088">the built-in mail account #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3079">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_builtin_memo_list"
              c:identifier="e_source_registry_ref_builtin_memo_list"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3107">Returns the built-in memo list #ESource.

This #ESource is always present and makes for a safe fallback.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="178"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3118">the built-in memo list #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3109">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_builtin_proxy"
              c:identifier="e_source_registry_ref_builtin_proxy"
              version="3.12">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3137">Returns the built-in proxy profile #ESource.

This #ESource is always present and makes for a safe fallback.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="180"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3148">the built-in proxy profile #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3139">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_builtin_task_list"
              c:identifier="e_source_registry_ref_builtin_task_list"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3167">Returns the built-in task list #ESource.

This #ESource is always present and makes for a safe fallback.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="182"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3178">the built-in task list #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3169">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_default_address_book"
              c:identifier="e_source_registry_ref_default_address_book"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3197">Returns the #ESource most recently passed to
e_source_registry_set_default_address_book() either in this session
or a previous session, or else falls back to the built-in address book.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="189"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3208">the default address book #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3199">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_default_calendar"
              c:identifier="e_source_registry_ref_default_calendar"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3269">Returns the #ESource most recently passed to
e_source_registry_set_default_calendar() either in this session
or a previous session, or else falls back to the built-in calendar.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="194"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3280">the default calendar #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3271">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_default_for_extension_name"
              c:identifier="e_source_registry_ref_default_for_extension_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3685">This is a convenience function to return a default #ESource based on
@extension_name.  This only works with a subset of extension names.

If @extension_name is #E_SOURCE_EXTENSION_ADDRESS_BOOK, the function
returns the current default address book, or else falls back to the
built-in address book.

If @extension_name is #E_SOURCE_EXTENSION_CALENDAR, the function returns
the current default calendar, or else falls back to the built-in calendar.

If @extension_name is #E_SOURCE_EXTENSION_MAIL_ACCOUNT, the function
returns the current default mail account, or else falls back to the
built-in mail account.

If @extension_name is #E_SOURCE_EXTENSION_MAIL_IDENTITY, the function
returns the current default mail identity, or else falls back to the
mail identity named by the current default mail account.

If @extension_name is #E_SOURCE_EXTENSION_MEMO_LIST, the function returns
the current default memo list, or else falls back to the built-in memo list.

If @extension_name is #E_SOURCE_EXTENSION_TASK_LIST, the function returns
the current default task list, or else falls back to the built-in task list.

For all other values of @extension_name, the function returns %NULL.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="219"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3719">the default #ESource based on @extension_name</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3687">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="extension_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3688">an extension_name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ref_default_mail_account"
              c:identifier="e_source_registry_ref_default_mail_account"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3341">Returns the #ESource most recently passed to
e_source_registry_set_default_mail_account() either in this session
or a previous session, or else falls back to the built-in mail account.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3352">the default mail account #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3343">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_default_mail_identity"
              c:identifier="e_source_registry_ref_default_mail_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3470">Returns the #ESource most recently passed to
e_source_registry_set_default_mail_identity() either in this session
or a previous session, or else falls back to the mail identity named
by the default mail account.  If even that fails it returns any mail
identity from @registry, or %NULL if there are none.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="204"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3483">the default mail identity #ESource, or %NULL</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3472">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_default_memo_list"
              c:identifier="e_source_registry_ref_default_memo_list"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3541">Returns the #ESource most recently passed to
e_source_registry_set_default_memo_list() either in this session
or a previous session, or else falls back to the built-in memo list.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="209"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3552">the default memo list #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3543">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_default_task_list"
              c:identifier="e_source_registry_ref_default_task_list"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3613">Returns the #ESource most recently passed to
e_source_registry_set_default_task_list() either in this session
or a previous session, or else falls back to the built-in task list.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="214"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="3624">the default task list #ESource</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3615">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref_source"
              c:identifier="e_source_registry_ref_source"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2444">Looks up an #ESource in @registry by its unique identifier string.

The returned #ESource is referenced for thread-safety and must be
unreferenced with g_object_unref() when finished with it.</doc>
        <source-position filename="e-source-registry.h" line="146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2454">an #ESource, or %NULL if no match was found</doc>
          <type name="Source" c:type="ESource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2446">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2447">a unique identifier string</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_backend"
              c:identifier="e_source_registry_refresh_backend"
              version="3.30">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2377">Asynchronously requests the D-Bus service to refresh collection backend
for an #ESource with UID @source_uid. The result means that the refresh
had been scheduled not whether the refresh itself succeeded. The refresh
is not initiated when the collection backend is offline.

When the operation is finished, @callback will be called. You can then
call e_source_registry_refresh_backend_finish() to get the result of
the operation.</doc>
        <source-position filename="e-source-registry.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2379">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2380">UID of a collection #ESource whose backend to refresh</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2381">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2382">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2384">data to pass to the callback function</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_backend_finish"
              c:identifier="e_source_registry_refresh_backend_finish"
              version="3.30"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2418">Finishes the operation started with e_source_registry_refresh_backend().

If an error occurred, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source-registry.h" line="142"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2428">Whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2420">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2421">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_backend_sync"
              c:identifier="e_source_registry_refresh_backend_sync"
              version="3.30"
              throws="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="2328">Requests the D-Bus service to refresh collection backend for an #ESource
with UID @source_uid. The result means that the refresh had been scheduled
not whether the refresh itself succeeded. The refresh is not initiated
when the collection backend is offline.

If an error occurs, the function will set @error and return %FALSE.</doc>
        <source-position filename="e-source-registry.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry.c"
               line="2342">Whether succeeded</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2330">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="source_uid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2331">UID of a collection #ESource whose backend to refresh</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="2332">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_address_book"
              c:identifier="e_source_registry_set_default_address_book"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3235">Sets @default_source as the default address book.  If @default_source
is %NULL, the default address book is reset to the built-in address book.
This setting will persist across sessions until changed.</doc>
        <source-position filename="e-source-registry.h" line="191"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3237">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3238">an address book #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_calendar"
              c:identifier="e_source_registry_set_default_calendar"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3307">Sets @default_source as the default calendar.  If @default_source
is %NULL, the default calendar is reset to the built-in calendar.
This setting will persist across sessions until changed.</doc>
        <source-position filename="e-source-registry.h" line="196"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3309">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3310">a calendar #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_for_extension_name"
              c:identifier="e_source_registry_set_default_for_extension_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3751">This is a convenience function to set a default #ESource based on
@extension_name.  This only works with a subset of extension names.

If @extension_name is #E_SOURCE_EXTENSION_ADDRESS_BOOK, the function
sets @default_source as the default address book.  If @default_source
is %NULL, the default address book is reset to the built-in address book.

If @extension_name is #E_SOURCE_EXTENSION_CALENDAR, the function sets
@default_source as the default calendar.  If @default_source is %NULL,
the default calendar is reset to the built-in calendar.

If @extension_name is #E_SOURCE_EXTENSION_MAIL_ACCOUNT, the function
sets @default_source as the default mail account.  If @default_source
is %NULL, the default mail account is reset to the built-in mail account.

If @extension_name is #E_SOURCE_EXTENSION_MAIL_IDENTITY, the function
sets @default_source as the default mail identity.  If @default_source
is %NULL, the next request for the default mail identity will return
the mail identity named by the default mail account.

If @extension_name is #E_SOURCE_EXTENSION_MEMO_LIST, the function sets
@default_source as the default memo list.  If @default_source is %NULL,
the default memo list is reset to the built-in memo list.

If @extension_name is #E_SOURCE_EXTENSION_TASK_LIST, the function sets
@default_source as the default task list.  If @default_source is %NULL,
the default task list is reset to the built-in task list.

For all other values of @extension_name, the function does nothing.</doc>
        <source-position filename="e-source-registry.h" line="222"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3753">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="extension_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3754">an extension name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3755">an #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_mail_account"
              c:identifier="e_source_registry_set_default_mail_account"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3379">Sets @default_source as the default mail account.  If @default_source
is %NULL, the default mail account is reset to the built-in mail account.
This setting will persist across sessions until changed.</doc>
        <source-position filename="e-source-registry.h" line="201"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3381">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3382">a mail account #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_mail_identity"
              c:identifier="e_source_registry_set_default_mail_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3507">Sets @default_source as the default mail identity.  If @default_source
is %NULL, the next request for the default mail identity will use the
fallbacks described in e_source_registry_ref_default_mail_identity().</doc>
        <source-position filename="e-source-registry.h" line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3509">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3510">a mail identity #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_memo_list"
              c:identifier="e_source_registry_set_default_memo_list"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3579">Sets @default_source as the default memo list.  If @default_source
is %NULL, the default memo list is reset to the built-in memo list.
This setting will persist across sessions until changed.</doc>
        <source-position filename="e-source-registry.h" line="211"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3581">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3582">a memo list #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_task_list"
              c:identifier="e_source_registry_set_default_task_list"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="3651">Sets @default_source as the default task list.  If @default_source
is %NULL, the default task list is reset to the built-in task list.
This setting will persist across sessions until changed.</doc>
        <source-position filename="e-source-registry.h" line="216"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3653">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </instance-parameter>
          <parameter name="default_source"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="3654">a task list #ESource, or %NULL</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </method>
      <property name="default-address-book"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1489">The default address book #ESource.</doc>
        <type name="Source"/>
      </property>
      <property name="default-calendar" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1506">The default calendar #ESource.</doc>
        <type name="Source"/>
      </property>
      <property name="default-mail-account"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1523">The default mail account #ESource.</doc>
        <type name="Source"/>
      </property>
      <property name="default-mail-identity"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1540">The default mail identity #ESource.</doc>
        <type name="Source"/>
      </property>
      <property name="default-memo-list"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1557">The default memo list #ESource.</doc>
        <type name="Source"/>
      </property>
      <property name="default-task-list"
                writable="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1574">The default task list #ESource.</doc>
        <type name="Source"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceRegistryPrivate" c:type="ESourceRegistryPrivate*"/>
      </field>
      <glib:signal name="credentials-required" when="last" no-recurse="1">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1672">The ::credentials-required signal is emitted when the @source
requires credentials to connect to (possibly remote)
data store. The credentials can be passed to the source using
e_source_invoke_authenticate() function. The signal is emitted in
the thread-default main context from the time the @registry was created.

Note: This is just a proxy signal for the ESource::credentials-required signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1675">the #ESource that requires credentials</doc>
            <type name="Source"/>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1676">an #ESourceCredentialsReason indicating why the credentials are requested</doc>
            <type name="SourceCredentialsReason"/>
          </parameter>
          <parameter name="certificate_pem" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1677">PEM-encoded secure connection certificate for failed SSL checks</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="certificate_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1678">what failed with the SSL certificate</doc>
            <type name="Gio.TlsCertificateFlags"/>
          </parameter>
          <parameter name="op_error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1679">a #GError with a description of the error, or %NULL</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="source-added" when="last">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1591">Emitted when an #ESource is added to @registry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1594">the newly-added #ESource</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="source-changed" when="last">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1607">Emitted when an #ESource registered with @registry emits
its #ESource::changed signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1610">the #ESource that changed</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="source-disabled" when="last">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1656">Emitted when an #ESource #ESource:enabled property becomes %FALSE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1659">the #ESource that got disabled</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="source-enabled" when="last">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1640">Emitted when an #ESource #ESource:enabled property becomes %TRUE.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1643">the #ESource that got enabled</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="source-removed" when="last">
        <doc xml:space="preserve"
             filename="e-source-registry.c"
             line="1624">Emitted when an #ESource is removed from @registry.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry.c"
                 line="1627">the #ESource that got removed</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SourceRegistryClass"
            c:type="ESourceRegistryClass"
            glib:is-gtype-struct-for="SourceRegistry">
      <source-position filename="e-source-registry.h" line="87"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="source_added">
        <callback name="source_added">
          <source-position filename="e-source-registry.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="registry" transfer-ownership="none">
              <type name="SourceRegistry" c:type="ESourceRegistry*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="source_changed">
        <callback name="source_changed">
          <source-position filename="e-source-registry.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="registry" transfer-ownership="none">
              <type name="SourceRegistry" c:type="ESourceRegistry*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="source_removed">
        <callback name="source_removed">
          <source-position filename="e-source-registry.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="registry" transfer-ownership="none">
              <type name="SourceRegistry" c:type="ESourceRegistry*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="source_enabled">
        <callback name="source_enabled">
          <source-position filename="e-source-registry.h" line="77"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="registry" transfer-ownership="none">
              <type name="SourceRegistry" c:type="ESourceRegistry*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="source_disabled">
        <callback name="source_disabled">
          <source-position filename="e-source-registry.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="registry" transfer-ownership="none">
              <type name="SourceRegistry" c:type="ESourceRegistry*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="credentials_required">
        <callback name="credentials_required">
          <source-position filename="e-source-registry.h" line="81"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="registry" transfer-ownership="none">
              <type name="SourceRegistry" c:type="ESourceRegistry*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="SourceCredentialsReason"
                    c:type="ESourceCredentialsReason"/>
            </parameter>
            <parameter name="certificate_pem" transfer-ownership="none">
              <type name="utf8" c:type="const gchar*"/>
            </parameter>
            <parameter name="certificate_errors" transfer-ownership="none">
              <type name="Gio.TlsCertificateFlags"
                    c:type="GTlsCertificateFlags"/>
            </parameter>
            <parameter name="op_error" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SourceRegistryPrivate"
            c:type="ESourceRegistryPrivate"
            disguised="1">
      <source-position filename="e-source-registry.h" line="51"/>
    </record>
    <class name="SourceRegistryWatcher"
           c:symbol-prefix="source_registry_watcher"
           c:type="ESourceRegistryWatcher"
           parent="GObject.Object"
           glib:type-name="ESourceRegistryWatcher"
           glib:get-type="e_source_registry_watcher_get_type"
           glib:type-struct="SourceRegistryWatcherClass">
      <doc xml:space="preserve"
           filename="e-source-registry-watcher.c"
           line="18">#ESourceRegistryWatcher watches for changes in an #ESourceRegistry
and notifies about newly added and enabled #ESource instances, the same
as about removed or disabled. The amount of notifications can be filtered
with #ESourceRegistryWatcher::filter signal.

The watcher listens only for changes, thus it is not pre-populated after
its creation. That's because the owner usually wants to subscribe to
the #ESourceRegistryWatcher::filter, #ESourceRegistryWatcher::appeared
and #ESourceRegistryWatcher::disappeared signals. The owner should
call e_source_registry_watcher_reclaim() when it has all the needed
signal handlers connected.</doc>
      <source-position filename="e-source-registry-watcher.h" line="75"/>
      <constructor name="new"
                   c:identifier="e_source_registry_watcher_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="496">Creates a new #ESourceRegistryWatcher instance.

The @extension_name can be used as a complementary filter
to #ESourceRegistryWatcher::filter signal.</doc>
        <source-position filename="e-source-registry-watcher.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-registry-watcher.c"
               line="506">an #ESourceRegistryWatcher</doc>
          <type name="SourceRegistryWatcher" c:type="ESourceRegistryWatcher*"/>
        </return-value>
        <parameters>
          <parameter name="registry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="498">an #ESourceRegistry</doc>
            <type name="SourceRegistry" c:type="ESourceRegistry*"/>
          </parameter>
          <parameter name="extension_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="499">optional extension name to filter sources with, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="appeared">
        <source-position filename="e-source-registry-watcher.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <type name="SourceRegistryWatcher"
                  c:type="ESourceRegistryWatcher*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="disappeared">
        <source-position filename="e-source-registry-watcher.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <type name="SourceRegistryWatcher"
                  c:type="ESourceRegistryWatcher*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="filter">
        <source-position filename="e-source-registry-watcher.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <type name="SourceRegistryWatcher"
                  c:type="ESourceRegistryWatcher*"/>
          </instance-parameter>
          <parameter name="source" transfer-ownership="none">
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_extension_name"
              c:identifier="e_source_registry_watcher_get_extension_name"
              version="3.26">
        <source-position filename="e-source-registry-watcher.h" line="83"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-registry-watcher.c"
               line="544">The extension name passed to e_source_registry_watcher_new().</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="542">an #ESourceRegistryWatcher</doc>
            <type name="SourceRegistryWatcher"
                  c:type="ESourceRegistryWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_registry"
              c:identifier="e_source_registry_watcher_get_registry"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="522">Returns the #ESourceRegistry passed to e_source_registry_watcher_new().</doc>
        <source-position filename="e-source-registry-watcher.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry-watcher.c"
               line="528">an #ESourceRegistry</doc>
          <type name="SourceRegistry" c:type="ESourceRegistry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="524">an #ESourceRegistryWatcher</doc>
            <type name="SourceRegistryWatcher"
                  c:type="ESourceRegistryWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="reclaim"
              c:identifier="e_source_registry_watcher_reclaim"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="556">Reclaims all available sources satisfying the #ESourceRegistryWatcher::filter
signal. It doesn't notify about disappeared sources, it notifies only
on those appeared.</doc>
        <source-position filename="e-source-registry-watcher.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="watcher" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="558">an #ESourceRegistryWatcher</doc>
            <type name="SourceRegistryWatcher"
                  c:type="ESourceRegistryWatcher*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="extension-name"
                version="3.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="383">Optional extension name, to consider sources with only.
It can be %NULL, to check for all sources. This is
a complementary filter to #ESourceRegistryWatcher::filter
signal.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="registry"
                version="3.26"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="405">The #ESourceRegistry manages #ESource instances.</doc>
        <type name="SourceRegistry"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceRegistryWatcherPrivate"
              c:type="ESourceRegistryWatcherPrivate*"/>
      </field>
      <glib:signal name="appeared" when="last" version="3.26">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="446">A signal emitted when the @source is enabled or added and it had been
considered for inclusion with the @ESourceRegistryWatcher::filter signal.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="449">the #ESource which appeared</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="disappeared" when="last" version="3.26">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="465">A signal emitted when the @source is disabled or removed and it had been
considered for inclusion with the @ESourceRegistryWatcher::filter signal
earlier.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="468">the #ESource which disappeared</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="filter" when="last" action="1" version="3.26">
        <doc xml:space="preserve"
             filename="e-source-registry-watcher.c"
             line="424">A filter signal which verifies whether the @source can be considered
for inclusion in the watcher or not. If none is set then all the sources
are included.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-registry-watcher.c"
               line="433">%TRUE, when the @source can be included, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-registry-watcher.c"
                 line="427">the #ESource to filter</doc>
            <type name="Source"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="SourceRegistryWatcherClass"
            c:type="ESourceRegistryWatcherClass"
            glib:is-gtype-struct-for="SourceRegistryWatcher">
      <source-position filename="e-source-registry-watcher.h" line="75"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="filter">
        <callback name="filter">
          <source-position filename="e-source-registry-watcher.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="watcher" transfer-ownership="none">
              <type name="SourceRegistryWatcher"
                    c:type="ESourceRegistryWatcher*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="appeared">
        <callback name="appeared">
          <source-position filename="e-source-registry-watcher.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="watcher" transfer-ownership="none">
              <type name="SourceRegistryWatcher"
                    c:type="ESourceRegistryWatcher*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="disappeared">
        <callback name="disappeared">
          <source-position filename="e-source-registry-watcher.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="watcher" transfer-ownership="none">
              <type name="SourceRegistryWatcher"
                    c:type="ESourceRegistryWatcher*"/>
            </parameter>
            <parameter name="source" transfer-ownership="none">
              <type name="Source" c:type="ESource*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
    </record>
    <record name="SourceRegistryWatcherPrivate"
            c:type="ESourceRegistryWatcherPrivate"
            disguised="1">
      <source-position filename="e-source-registry-watcher.h" line="51"/>
    </record>
    <class name="SourceResource"
           c:symbol-prefix="source_resource"
           c:type="ESourceResource"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceResource"
           glib:get-type="e_source_resource_get_type"
           glib:type-struct="SourceResourceClass">
      <doc xml:space="preserve"
           filename="e-source-resource.c"
           line="18">The #ESourceResource extension holds the server-assigned identity of a
remote calendar, address book, or whatever else an #ESource can represent.

This extension is typically used by an #ECollectionBackend to note a
server-assigned resource identity in an #ESource.  Then in a later session,
after querying the server for available resources, a resource identity can
be paired with the same #ESource #ESource:uid from the previous session,
allowing locally cached data from the previous session to be reused.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceResource *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_RESOURCE);
]|</doc>
      <source-position filename="e-source-resource.h" line="78"/>
      <method name="dup_identity"
              c:identifier="e_source_resource_dup_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-resource.c"
             line="163">Thread-safe variation of e_source_resource_get_identity().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-resource.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-resource.c"
               line="172">a newly-allocated copy of #ESourceResource:identity</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-resource.c"
                 line="165">an #ESourceResource</doc>
            <type name="SourceResource" c:type="ESourceResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_identity"
              c:identifier="e_source_resource_get_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-resource.c"
             line="144">Returns the server-assigned identity of the remote resource associated
with the #ESource to which @extension belongs.</doc>
        <source-position filename="e-source-resource.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-resource.c"
               line="151">the identity of a remote resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-resource.c"
                 line="146">an #ESourceResource</doc>
            <type name="SourceResource" c:type="ESourceResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_identity"
              c:identifier="e_source_resource_set_identity"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-resource.c"
             line="194">Sets the server-assigned identity of the remote resource associated with
the #ESource to which @extension belongs.

The internal copy of @identity is automatically stripped of leading and
trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-resource.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-resource.c"
                 line="196">an #ESourceResource</doc>
            <type name="SourceResource" c:type="ESourceResource*"/>
          </instance-parameter>
          <parameter name="identity"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-resource.c"
                 line="197">the identity of a remote resource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="identity"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceResourcePrivate" c:type="ESourceResourcePrivate*"/>
      </field>
    </class>
    <record name="SourceResourceClass"
            c:type="ESourceResourceClass"
            glib:is-gtype-struct-for="SourceResource">
      <source-position filename="e-source-resource.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceResourcePrivate"
            c:type="ESourceResourcePrivate"
            disguised="1">
      <source-position filename="e-source-resource.h" line="60"/>
    </record>
    <class name="SourceRevisionGuards"
           c:symbol-prefix="source_revision_guards"
           c:type="ESourceRevisionGuards"
           version="3.8"
           parent="SourceExtension"
           glib:type-name="ESourceRevisionGuards"
           glib:get-type="e_source_revision_guards_get_type"
           glib:type-struct="SourceRevisionGuardsClass">
      <doc xml:space="preserve"
           filename="e-source-revision-guards.c"
           line="21">The #ESourceRevisionGuards extension configures whether revisions
should be checked on modified objects. If a modified object has
a conflicting revision with an existing object, then an
%E_CLIENT_ERROR_OUT_OF_SYNC error should be produced for that object
and the modification should be discarded.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceRevisionGuards *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_REVISION_GUARDS);
]|</doc>
      <source-position filename="e-source-revision-guards.h" line="81"/>
      <method name="get_enabled"
              c:identifier="e_source_revision_guards_get_enabled"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-revision-guards.c"
             line="130">Checks whether revision guards for the given #ESource are enabled.</doc>
        <source-position filename="e-source-revision-guards.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-revision-guards.c"
               line="136">%TRUE if the revision guards are enabled.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-revision-guards.c"
                 line="132">An #ESourceRevisionGuards</doc>
            <type name="SourceRevisionGuards" c:type="ESourceRevisionGuards*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="e_source_revision_guards_set_enabled"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-revision-guards.c"
             line="148">Enables or disables the revision guards for a given #ESource.

Revision guards are disabled by default.</doc>
        <source-position filename="e-source-revision-guards.h" line="87"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-revision-guards.c"
                 line="150">An #ESourceRevisionGuards</doc>
            <type name="SourceRevisionGuards" c:type="ESourceRevisionGuards*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-revision-guards.c"
                 line="151">Whether to enable or disable the revision guards.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceRevisionGuardsPrivate"
              c:type="ESourceRevisionGuardsPrivate*"/>
      </field>
    </class>
    <record name="SourceRevisionGuardsClass"
            c:type="ESourceRevisionGuardsClass"
            glib:is-gtype-struct-for="SourceRevisionGuards">
      <source-position filename="e-source-revision-guards.h" line="81"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceRevisionGuardsPrivate"
            c:type="ESourceRevisionGuardsPrivate"
            disguised="1">
      <source-position filename="e-source-revision-guards.h" line="63"/>
    </record>
    <class name="SourceSMIME"
           c:symbol-prefix="source_smime"
           c:type="ESourceSMIME"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceSMIME"
           glib:get-type="e_source_smime_get_type"
           glib:type-struct="SourceSMIMEClass">
      <doc xml:space="preserve"
           filename="e-source-smime.c"
           line="18">The #ESourceSMIME extension tracks Secure/Multipurpose Internet Mail
Extensions (S/MIME) settings to be applied to outgoing mail messages.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceSMIME *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_SMIME);
]|</doc>
      <source-position filename="e-source-smime.h" line="78"/>
      <method name="dup_encryption_certificate"
              c:identifier="e_source_smime_dup_encryption_certificate"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="304">Thread-safe variation of e_source_smime_get_encryption_certificate().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-smime.h" line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="313">a newly-allocated copy of #ESourceSMIME:encryption-certificate</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="306">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_signing_algorithm"
              c:identifier="e_source_smime_dup_signing_algorithm"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="476">Thread-safe variation of e_source_smime_get_signing_algorithm().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-smime.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="485">a newly-allocated copy of #ESourceSMIME:signing-algorithm</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="478">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_signing_certificate"
              c:identifier="e_source_smime_dup_signing_certificate"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="562">Thread-safe variation of e_source_smime_get_signing_certificate().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-smime.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="571">a newly-allocated copy of #ESourceSMIME:signing-certificate</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="564">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypt_by_default"
              c:identifier="e_source_smime_get_encrypt_by_default"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="373">Returns whether to encrypt outgoing messages by default using S/MIME
software such as Mozilla Network Security Services (NSS).</doc>
        <source-position filename="e-source-smime.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="380">whether to encrypt outgoing messages by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="375">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encrypt_to_self"
              c:identifier="e_source_smime_get_encrypt_to_self"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="416">Returns whether to "encrypt-to-self" when sending encrypted messages.</doc>
        <source-position filename="e-source-smime.h" line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="422">whether to "encrypt-to-self"</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="418">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_encryption_certificate"
              c:identifier="e_source_smime_get_encryption_certificate"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="286">Returns the S/MIME certificate name used to encrypt messages.</doc>
        <source-position filename="e-source-smime.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="292">the certificate name used to encrypt messages</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="288">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sign_by_default"
              c:identifier="e_source_smime_get_sign_by_default"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="629">Returns whether to digitally sign outgoing messages by default using
S/MIME software such as Mozilla Network Security Services (NSS).</doc>
        <source-position filename="e-source-smime.h" line="112"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="636">whether to sign outgoing messages by default</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="631">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signing_algorithm"
              c:identifier="e_source_smime_get_signing_algorithm"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="457">Returns the name of the hash algorithm used to digitally sign outgoing
messages.</doc>
        <source-position filename="e-source-smime.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="464">the signing algorithm for outgoing messages</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="459">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_signing_certificate"
              c:identifier="e_source_smime_get_signing_certificate"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="544">Returns the S/MIME certificate name used to sign messages.</doc>
        <source-position filename="e-source-smime.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-smime.c"
               line="550">the certificate name used to sign messages</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="546">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_encrypt_by_default"
              c:identifier="e_source_smime_set_encrypt_by_default"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="392">Sets whether to encrypt outgoing messages by default using S/MIME
software such as Mozilla Network Security Services (NSS).</doc>
        <source-position filename="e-source-smime.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="394">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
          <parameter name="encrypt_by_default" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="395">whether to encrypt outgoing messages by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encrypt_to_self"
              c:identifier="e_source_smime_set_encrypt_to_self"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="434">Sets whether to "encrypt-to-self" when sending encrypted messages.</doc>
        <source-position filename="e-source-smime.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="436">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
          <parameter name="encrypt_to_self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="437">whether to "encrypt-to-self"</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_encryption_certificate"
              c:identifier="e_source_smime_set_encryption_certificate"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="335">Sets the certificate name used to encrypt messages.

If the @encryption_certificate string is empty, %NULL is set instead.</doc>
        <source-position filename="e-source-smime.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="337">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
          <parameter name="encryption_certificate"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="338">the certificate name used to encrypt
                         messages, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_sign_by_default"
              c:identifier="e_source_smime_set_sign_by_default"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="648">Sets whether to digitally sign outgoing messages by default using
S/MIME software such as Mozilla Network Security Services (NSS).</doc>
        <source-position filename="e-source-smime.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="650">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
          <parameter name="sign_by_default" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="651">whether to sign outgoing messages by default</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signing_algorithm"
              c:identifier="e_source_smime_set_signing_algorithm"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="507">Sets the name of the hash algorithm used to digitally sign outgoing
messages.

The internal copy of @signing_algorithm is automatically stripped of
leading and trailing whitespace.  If the resulting string is empty,
%NULL is set instead.</doc>
        <source-position filename="e-source-smime.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="509">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
          <parameter name="signing_algorithm"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="510">the signing algorithm for outgoing
                    messages, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_signing_certificate"
              c:identifier="e_source_smime_set_signing_certificate"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-smime.c"
             line="593">Sets the S/MIME certificate name used to sign messages.

If the @signing_certificate string is empty, %NULL is set instead.</doc>
        <source-position filename="e-source-smime.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="595">an #ESourceSMIME</doc>
            <type name="SourceSMIME" c:type="ESourceSMIME*"/>
          </instance-parameter>
          <parameter name="signing_certificate"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-smime.c"
                 line="596">the certificate name used to sign
                      messages, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="encrypt-by-default"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="encrypt-to-self"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="encryption-certificate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sign-by-default"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="signing-algorithm"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="signing-certificate"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceSMIMEPrivate" c:type="ESourceSMIMEPrivate*"/>
      </field>
    </class>
    <record name="SourceSMIMEClass"
            c:type="ESourceSMIMEClass"
            glib:is-gtype-struct-for="SourceSMIME">
      <source-position filename="e-source-smime.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceSMIMEPrivate"
            c:type="ESourceSMIMEPrivate"
            disguised="1">
      <source-position filename="e-source-smime.h" line="60"/>
    </record>
    <class name="SourceSecurity"
           c:symbol-prefix="source_security"
           c:type="ESourceSecurity"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceSecurity"
           glib:get-type="e_source_security_get_type"
           glib:type-struct="SourceSecurityClass">
      <doc xml:space="preserve"
           filename="e-source-security.c"
           line="18">The #ESourceSecurity extension tracks settings for establishing a
secure connection with a remote server.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceSecurity *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_SECURITY);
]|</doc>
      <source-position filename="e-source-security.h" line="78"/>
      <method name="dup_method"
              c:identifier="e_source_security_dup_method"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-security.c"
             line="187">Thread-safe variation of e_source_security_get_method().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-security.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-security.c"
               line="196">a newly-allocated copy of #ESourceSecurity:method</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="189">an #ESourceSecurity</doc>
            <type name="SourceSecurity" c:type="ESourceSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_method"
              c:identifier="e_source_security_get_method"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-security.c"
             line="166">Returns the method used to establish a secure network connection to a
remote account.  There are no pre-defined method names; backends are
free to set this however they wish.  If a secure connection is not
desired, the convention is to set #ESourceSecurity:method to "none".</doc>
        <source-position filename="e-source-security.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-security.c"
               line="175">the method used to establish a secure network connection</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="168">an #ESourceSecurity</doc>
            <type name="SourceSecurity" c:type="ESourceSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_secure"
              c:identifier="e_source_security_get_secure"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-security.c"
             line="262">This is a convenience function which returns whether a secure network
connection is desired, regardless of the method used.  This relies on
the convention of setting #ESourceSecurity:method to "none" when a
secure network connection is &lt;emphasis&gt;not&lt;/emphasis&gt; desired.</doc>
        <source-position filename="e-source-security.h" line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-security.c"
               line="271">whether a secure network connection is desired</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="264">an #ESourceSecurity</doc>
            <type name="SourceSecurity" c:type="ESourceSecurity*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_method"
              c:identifier="e_source_security_set_method"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-security.c"
             line="218">Sets the method used to establish a secure network connection to a
remote account.  There are no pre-defined method names; backends are
free to set this however they wish.  If a secure connection is not
desired, the convention is to set #ESourceSecurity:method to "none".
In keeping with that convention, #ESourceSecurity:method will be set
to "none" if @method is %NULL or an empty string.</doc>
        <source-position filename="e-source-security.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="220">an #ESourceSecurity</doc>
            <type name="SourceSecurity" c:type="ESourceSecurity*"/>
          </instance-parameter>
          <parameter name="method"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="221">security method, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_secure"
              c:identifier="e_source_security_set_secure"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-security.c"
             line="288">This function provides a simpler way to set #ESourceSecurity:method
when using a secure network connection is a yes or no option and the
exact method name is unimportant.  If @secure is %FALSE, the
#ESourceSecurity:method property is set to "none".  If @secure is
%TRUE, the function assumes the backend will use Transport Layer
Security and sets the #ESourceSecurity:method property to "tls".</doc>
        <source-position filename="e-source-security.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="290">an #ESourceSecurity</doc>
            <type name="SourceSecurity" c:type="ESourceSecurity*"/>
          </instance-parameter>
          <parameter name="secure" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-security.c"
                 line="291">whether a secure network connection is desired</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="method"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="secure" writable="1" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceSecurityPrivate" c:type="ESourceSecurityPrivate*"/>
      </field>
    </class>
    <record name="SourceSecurityClass"
            c:type="ESourceSecurityClass"
            glib:is-gtype-struct-for="SourceSecurity">
      <source-position filename="e-source-security.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceSecurityPrivate"
            c:type="ESourceSecurityPrivate"
            disguised="1">
      <source-position filename="e-source-security.h" line="60"/>
    </record>
    <class name="SourceSelectable"
           c:symbol-prefix="source_selectable"
           c:type="ESourceSelectable"
           version="3.6"
           parent="SourceBackend"
           abstract="1"
           glib:type-name="ESourceSelectable"
           glib:get-type="e_source_selectable_get_type"
           glib:type-struct="SourceSelectableClass">
      <doc xml:space="preserve"
           filename="e-source-selectable.c"
           line="18">#ESourceSelectable is an abstract base class for data sources
that can be selected.</doc>
      <source-position filename="e-source-selectable.h" line="68"/>
      <method name="dup_color"
              c:identifier="e_source_selectable_dup_color"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-selectable.c"
             line="178">Thread-safe variation of e_source_selectable_get_color().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-selectable.h" line="72"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-selectable.c"
               line="187">a newly-allocated copy of #ESourceSelectable:color,
   or %NULL, when none is set</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="180">an #ESourceSelectable</doc>
            <type name="SourceSelectable" c:type="ESourceSelectable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color"
              c:identifier="e_source_selectable_get_color"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-selectable.c"
             line="157">Returns the color specification for the #ESource to which @extension
belongs.  A colored block is often displayed next to the data source's
display name in user interfaces.</doc>
        <source-position filename="e-source-selectable.h" line="71"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="e-source-selectable.c"
               line="165">the color specification for the #ESource,
   or %NULL, when none is set</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="159">an #ESourceSelectable</doc>
            <type name="SourceSelectable" c:type="ESourceSelectable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_selected"
              c:identifier="e_source_selectable_get_selected"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-selectable.c"
             line="246">Returns the selected state of the #ESource to which @extension belongs.
The selected state is often represented as a checkbox next to the data
source's display name in user interfaces.</doc>
        <source-position filename="e-source-selectable.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-selectable.c"
               line="254">the selected state for the #ESource</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="248">an #ESourceSelectable</doc>
            <type name="SourceSelectable" c:type="ESourceSelectable*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="e_source_selectable_set_color"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-selectable.c"
             line="210">Sets the color specification for the #ESource to which @extension
belongs.  A colored block is often displayed next to the data source's
display name in user interfaces.

The internal copy of @color is automatically stripped of leading and
trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-selectable.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="212">an #ESourceSelectable</doc>
            <type name="SourceSelectable" c:type="ESourceSelectable*"/>
          </instance-parameter>
          <parameter name="color"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="213">a color specification, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_selected"
              c:identifier="e_source_selectable_set_selected"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-selectable.c"
             line="266">Sets the selected state for the #ESource to which @extension belongs.
The selected state is often represented as a checkbox next to the data
source's display name in user interfaces.</doc>
        <source-position filename="e-source-selectable.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="268">an #ESourceSelectable</doc>
            <type name="SourceSelectable" c:type="ESourceSelectable*"/>
          </instance-parameter>
          <parameter name="selected" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-selectable.c"
                 line="269">selected state</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="color"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="selected"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceBackend" c:type="ESourceBackend"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceSelectablePrivate"
              c:type="ESourceSelectablePrivate*"/>
      </field>
    </class>
    <record name="SourceSelectableClass"
            c:type="ESourceSelectableClass"
            glib:is-gtype-struct-for="SourceSelectable">
      <source-position filename="e-source-selectable.h" line="68"/>
      <field name="parent_class">
        <type name="SourceBackendClass" c:type="ESourceBackendClass"/>
      </field>
    </record>
    <record name="SourceSelectablePrivate"
            c:type="ESourceSelectablePrivate"
            disguised="1">
      <source-position filename="e-source-selectable.h" line="50"/>
    </record>
    <class name="SourceTaskList"
           c:symbol-prefix="source_task_list"
           c:type="ESourceTaskList"
           version="3.6"
           parent="SourceSelectable"
           glib:type-name="ESourceTaskList"
           glib:get-type="e_source_task_list_get_type"
           glib:type-struct="SourceTaskListClass">
      <doc xml:space="preserve"
           filename="e-source-task-list.c"
           line="18">The #ESourceCalendar extension identifies the #ESource as a task list.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceCalendar *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_TASK_LIST);
]|</doc>
      <source-position filename="e-source-task-list.h" line="78"/>
      <field name="parent" readable="0" private="1">
        <type name="SourceSelectable" c:type="ESourceSelectable"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceTaskListPrivate" c:type="ESourceTaskListPrivate*"/>
      </field>
    </class>
    <record name="SourceTaskListClass"
            c:type="ESourceTaskListClass"
            glib:is-gtype-struct-for="SourceTaskList">
      <source-position filename="e-source-task-list.h" line="78"/>
      <field name="parent_class">
        <type name="SourceSelectableClass" c:type="ESourceSelectableClass"/>
      </field>
    </record>
    <record name="SourceTaskListPrivate"
            c:type="ESourceTaskListPrivate"
            disguised="1">
      <source-position filename="e-source-task-list.h" line="60"/>
    </record>
    <class name="SourceUoa"
           c:symbol-prefix="source_uoa"
           c:type="ESourceUoa"
           version="3.8"
           parent="SourceExtension"
           glib:type-name="ESourceUoa"
           glib:get-type="e_source_uoa_get_type"
           glib:type-struct="SourceUoaClass">
      <doc xml:space="preserve"
           filename="e-source-uoa.c"
           line="18">The #ESourceUoa extension associates an #ESource with an #AgAccount.
This extension is usually found in a top-level #ESource, with various
mail, calendar and address book data sources as children.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceUoa *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_UOA);
]|</doc>
      <source-position filename="e-source-uoa.h" line="78"/>
      <method name="get_account_id"
              c:identifier="e_source_uoa_get_account_id"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-uoa.c"
             line="125">Returns the numeric identifier of the Ubuntu Online Account associated
with the #ESource to which @extension belongs.</doc>
        <source-position filename="e-source-uoa.h" line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-uoa.c"
               line="132">the associated Ubuntu Online Account ID</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-uoa.c"
                 line="127">an #ESourceUoa</doc>
            <type name="SourceUoa" c:type="ESourceUoa*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_account_id"
              c:identifier="e_source_uoa_set_account_id"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-uoa.c"
             line="144">Sets the numeric identifier of the Ubuntu Online Account associated
with the #ESource to which @extension belongs.</doc>
        <source-position filename="e-source-uoa.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-uoa.c"
                 line="146">an #ESourceUoa</doc>
            <type name="SourceUoa" c:type="ESourceUoa*"/>
          </instance-parameter>
          <parameter name="account_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-uoa.c"
                 line="147">the associated Ubuntu Online Account ID</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="account-id"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceUoaPrivate" c:type="ESourceUoaPrivate*"/>
      </field>
    </class>
    <record name="SourceUoaClass"
            c:type="ESourceUoaClass"
            glib:is-gtype-struct-for="SourceUoa">
      <source-position filename="e-source-uoa.h" line="78"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceUoaPrivate" c:type="ESourceUoaPrivate" disguised="1">
      <source-position filename="e-source-uoa.h" line="60"/>
    </record>
    <class name="SourceWeather"
           c:symbol-prefix="source_weather"
           c:type="ESourceWeather"
           parent="SourceExtension"
           glib:type-name="ESourceWeather"
           glib:get-type="e_source_weather_get_type"
           glib:type-struct="SourceWeatherClass">
      <source-position filename="e-source-weather.h" line="71"/>
      <method name="dup_location" c:identifier="e_source_weather_dup_location">
        <source-position filename="e-source-weather.h" line="75"/>
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceWeather" c:type="ESourceWeather*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_location" c:identifier="e_source_weather_get_location">
        <source-position filename="e-source-weather.h" line="74"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceWeather" c:type="ESourceWeather*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_units" c:identifier="e_source_weather_get_units">
        <source-position filename="e-source-weather.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="SourceWeatherUnits" c:type="ESourceWeatherUnits"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceWeather" c:type="ESourceWeather*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_location" c:identifier="e_source_weather_set_location">
        <source-position filename="e-source-weather.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceWeather" c:type="ESourceWeather*"/>
          </instance-parameter>
          <parameter name="location" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_units" c:identifier="e_source_weather_set_units">
        <source-position filename="e-source-weather.h" line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <type name="SourceWeather" c:type="ESourceWeather*"/>
          </instance-parameter>
          <parameter name="units" transfer-ownership="none">
            <type name="SourceWeatherUnits" c:type="ESourceWeatherUnits"/>
          </parameter>
        </parameters>
      </method>
      <property name="location"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="units"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="SourceWeatherUnits"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceWeatherPrivate" c:type="ESourceWeatherPrivate*"/>
      </field>
    </class>
    <record name="SourceWeatherClass"
            c:type="ESourceWeatherClass"
            glib:is-gtype-struct-for="SourceWeather">
      <source-position filename="e-source-weather.h" line="71"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceWeatherPrivate"
            c:type="ESourceWeatherPrivate"
            disguised="1">
      <source-position filename="e-source-weather.h" line="61"/>
    </record>
    <enumeration name="SourceWeatherUnits"
                 version="3.18"
                 glib:type-name="ESourceWeatherUnits"
                 glib:get-type="e_source_weather_units_get_type"
                 c:type="ESourceWeatherUnits">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="232">Units to be used in an #ESourceWeather extension.</doc>
      <member name="fahrenheit"
              value="0"
              c:identifier="E_SOURCE_WEATHER_UNITS_FAHRENHEIT"
              glib:nick="fahrenheit">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="234">Fahrenheit units</doc>
      </member>
      <member name="centigrade"
              value="1"
              c:identifier="E_SOURCE_WEATHER_UNITS_CENTIGRADE"
              glib:nick="centigrade">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="236">Centigrade units</doc>
      </member>
      <member name="kelvin"
              value="2"
              c:identifier="E_SOURCE_WEATHER_UNITS_KELVIN"
              glib:nick="kelvin">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="238">Kelvin units</doc>
      </member>
    </enumeration>
    <class name="SourceWebdav"
           c:symbol-prefix="source_webdav"
           c:type="ESourceWebdav"
           version="3.6"
           parent="SourceExtension"
           glib:type-name="ESourceWebdav"
           glib:get-type="e_source_webdav_get_type"
           glib:type-struct="SourceWebdavClass">
      <doc xml:space="preserve"
           filename="e-source-webdav.c"
           line="18">The #ESourceWebdav extension tracks settings for accessing resources
on a remote WebDAV server.

This class exists in libedataserver because we have several
WebDAV-based backends.  Each of these backends is free to use
this class directly or subclass it with additional settings.
Subclasses should override the extension name.

The #SoupURI is parsed into components and distributed across
several other built-in extensions such as #ESourceAuthentication
and #ESourceSecurity.

Access the extension as follows:

|[
  #include &lt;libedataserver/libedataserver.h&gt;

  ESourceWebdav *extension;

  extension = e_source_get_extension (source, E_SOURCE_EXTENSION_WEBDAV_BACKEND);
]|</doc>
      <source-position filename="e-source-webdav.h" line="85"/>
      <method name="dup_color"
              c:identifier="e_source_webdav_dup_color"
              version="3.30">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="844">Thread-safe variation of e_source_webdav_get_color().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-webdav.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="853">a newly-allocated copy of #ESourceWebdav:color</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="846">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_display_name"
              c:identifier="e_source_webdav_dup_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="758">Thread-safe variation of e_source_webdav_get_display_name().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-webdav.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="767">a newly-allocated copy of #ESourceWebdav:display-name</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="760">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_email_address"
              c:identifier="e_source_webdav_dup_email_address"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="928">Thread-safe variation of e_source_webdav_get_email_address().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-webdav.h" line="111"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="937">the newly-allocated copy of #ESourceWebdav:email-address</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="930">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_resource_path"
              c:identifier="e_source_webdav_dup_resource_path"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1012">Thread-safe variation of e_source_webdav_get_resource_path().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-webdav.h" line="118"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1021">the newly-allocated copy of #ESourceWebdav:resource-path</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1014">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_resource_query"
              c:identifier="e_source_webdav_dup_resource_query"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1101">Thread-safe variation of e_source_webdav_get_resource_query().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-webdav.h" line="125"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1110">the newly-allocated copy of #ESourceWebdav:resource-query</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1103">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_soup_uri"
              c:identifier="e_source_webdav_dup_soup_uri"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1259">This is a convenience function which returns a newly-allocated
#SoupURI, its contents assembled from the #ESourceAuthentication
extension, the #ESourceSecurity extension, and @extension itself.
Free the returned #SoupURI with soup_uri_free().</doc>
        <source-position filename="e-source-webdav.h" line="134"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1268">a newly-allocated #SoupURI</doc>
          <type name="Soup.URI" c:type="SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1261">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="dup_ssl_trust"
              c:identifier="e_source_webdav_dup_ssl_trust"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1197">Thread-safe variation of e_source_webdav_get_ssl_trust().
Use this function when accessing @extension from multiple threads.

The returned string should be freed with g_free() when no longer needed.</doc>
        <source-position filename="e-source-webdav.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1206">the newly-allocated copy of #ESourceWebdav:ssl-trust</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1199">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_avoid_ifmatch"
              c:identifier="e_source_webdav_get_avoid_ifmatch"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="637">This setting works around a
&lt;ulink url="https://issues.apache.org/bugzilla/show_bug.cgi?id=38034"&gt;
bug&lt;/ulink&gt; in older Apache mod_dav versions.

&lt;note&gt;
  &lt;para&gt;
    We may deprecate this once Apache 2.2.8 or newer becomes
    sufficiently ubiquitous, or we figure out a way to detect
    and work around the bug automatically.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="e-source-webdav.h" line="88"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="653">whether the WebDAV server is known to exhibit the bug</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="639">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_calendar_auto_schedule"
              c:identifier="e_source_webdav_get_calendar_auto_schedule"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="698">FIXME Document me!</doc>
        <source-position filename="e-source-webdav.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="700">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_color"
              c:identifier="e_source_webdav_get_color"
              version="3.30">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="826">Returns the last known color of a WebDAV resource as provided by the server.</doc>
        <source-position filename="e-source-webdav.h" line="105"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="832">the color of the WebDAV resource, if any set on the server</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="828">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_display_name"
              c:identifier="e_source_webdav_get_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="738">Returns the last known display name of a WebDAV resource, which may
differ from the #ESource:display-name property of the #ESource to which
@extension belongs.</doc>
        <source-position filename="e-source-webdav.h" line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="746">the display name of the WebDAV resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="740">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_email_address"
              c:identifier="e_source_webdav_get_email_address"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="909">Returns the user's email address which can be passed to a CalDAV server
if the user wishes to receive scheduling messages.</doc>
        <source-position filename="e-source-webdav.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="916">the user's email address</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="911">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource_path"
              c:identifier="e_source_webdav_get_resource_path"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="994">Returns the absolute path to a resource on a WebDAV server.</doc>
        <source-position filename="e-source-webdav.h" line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1000">the absolute path to a WebDAV resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="996">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource_query"
              c:identifier="e_source_webdav_get_resource_query"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1078">Returns the URI query required to access a resource on a WebDAV server.

This is typically used when the #ESourceWebdav:resource-path points not
to the resource itself but to a web program that generates the resource
content on-the-fly.  The #ESourceWebdav:resource-query holds the input
values for the program.</doc>
        <source-position filename="e-source-webdav.h" line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1089">the query to access a WebDAV resource</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1080">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssl_trust"
              c:identifier="e_source_webdav_get_ssl_trust"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1172">Returns an SSL/TLS certificate trust for the @extension.
The value encodes three parameters, divided by a pipe '|',
the first is users preference, can be one of "reject", "accept",
"temporary-reject" and "temporary-accept". The second is a host
name for which the trust was set. Finally the last is a SHA1
hash of the certificate. This is not meant to be changed by a caller,
it is supposed to be manipulated with e_source_webdav_update_ssl_trust()
and e_source_webdav_verify_ssl_trust().</doc>
        <source-position filename="e-source-webdav.h" line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1185">an SSL/TLS certificate trust for the @extension</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1174">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssl_trust_response"
              c:identifier="e_source_webdav_get_ssl_trust_response"
              version="3.32">
        <source-position filename="e-source-webdav.h" line="151"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-source-webdav.c"
               line="1544">the last SSL trust response, as #ETrustPromptResponse, if none
   is set, then returns %E_TRUST_PROMPT_RESPONSE_UNKNOWN</doc>
          <type name="TrustPromptResponse" c:type="ETrustPromptResponse"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1542">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_avoid_ifmatch"
              c:identifier="e_source_webdav_set_avoid_ifmatch"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="665">This setting works around a
&lt;ulink url="https://issues.apache.org/bugzilla/show_bug.cgi?id=38034"&gt;
bug&lt;/ulink&gt; in older Apache mod_dav versions.

&lt;note&gt;
  &lt;para&gt;
    We may deprecate this once Apache 2.2.8 or newer becomes
    sufficiently ubiquitous, or we figure out a way to detect
    and work around the bug automatically.
  &lt;/para&gt;
&lt;/note&gt;</doc>
        <source-position filename="e-source-webdav.h" line="90"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="667">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="avoid_ifmatch" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="668">whether the WebDAV server is known to exhibit the bug</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_calendar_auto_schedule"
              c:identifier="e_source_webdav_set_calendar_auto_schedule"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="714">FIXME Document me!</doc>
        <source-position filename="e-source-webdav.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="716">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="calendar_auto_schedule" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="717">whether the server supports the
"calendar-auto-schedule" feature of CalDAV</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_color"
              c:identifier="e_source_webdav_set_color"
              version="3.30">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="875">Updates the last known color of a WebDAV resource, as provided by the server.

The internal copy of @color is automatically stripped of leading
and trailing whitespace. If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-webdav.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="877">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="color"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="878">the color of the WebDAV resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_display_name"
              c:identifier="e_source_webdav_set_display_name"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="789">Updates the last known display name of a WebDAV resource, which may
differ from the #ESource:display-name property of the #ESource to which
@extension belongs.

The internal copy of @display_name is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-webdav.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="791">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="display_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="792">the display name of the WebDAV resource,
               or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_email_address"
              c:identifier="e_source_webdav_set_email_address"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="959">Sets the user's email address which can be passed to a CalDAV server if
the user wishes to receive scheduling messages.

The internal copy of @email_address is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-webdav.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="961">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="email_address"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="962">the user's email address, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resource_path"
              c:identifier="e_source_webdav_set_resource_path"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1043">Sets the absolute path to a resource on a WebDAV server.

The internal copy of @resource_path is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-webdav.h" line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1045">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="resource_path"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1046">the absolute path to a WebDAV resource,
                or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_resource_query"
              c:identifier="e_source_webdav_set_resource_query"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1132">Sets the URI query required to access a resource on a WebDAV server.

This is typically used when the #ESourceWebdav:resource-path points not
to the resource itself but to a web program that generates the resource
content on-the-fly.  The #ESourceWebdav:resource-query holds the input
values for the program.

The internal copy of @resource_query is automatically stripped of leading
and trailing whitespace.  If the resulting string is empty, %NULL is set
instead.</doc>
        <source-position filename="e-source-webdav.h" line="127"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1134">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="resource_query"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1135">the query to access a WebDAV resource,
                 or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_soup_uri"
              c:identifier="e_source_webdav_set_soup_uri"
              version="3.6">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1291">This is a convenience function which propagates the components of
@uri to the #ESourceAuthentication extension, the #ESourceSecurity
extension, and @extension itself.  (The "fragment" component of
@uri is ignored.)</doc>
        <source-position filename="e-source-webdav.h" line="135"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1293">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="soup_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1294">a #SoupURI</doc>
            <type name="Soup.URI" c:type="SoupURI*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ssl_trust"
              c:identifier="e_source_webdav_set_ssl_trust"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1228">Sets the SSL/TLS certificate trust. See e_source_webdav_get_ssl_trust()
for more infomation about its content and how to use it.</doc>
        <source-position filename="e-source-webdav.h" line="132"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1230">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="ssl_trust"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1231">the ssl_trust to store, or %NULL to unset</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_ssl_trust_response"
              c:identifier="e_source_webdav_set_ssl_trust_response"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1562">Set the SSL trust response, as #ETrustPromptResponse, while keeping
the certificate and host information as before. The function does
nothing, when none SSL trust is set or when %E_TRUST_PROMPT_RESPONSE_UNKNOWN
is used as the @response.</doc>
        <source-position filename="e-source-webdav.h" line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1564">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1565">an #ETrustPromptResponse to set</doc>
            <type name="TrustPromptResponse" c:type="ETrustPromptResponse"/>
          </parameter>
        </parameters>
      </method>
      <method name="unset_temporary_ssl_trust"
              c:identifier="e_source_webdav_unset_temporary_ssl_trust"
              version="3.8">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1517">Unsets temporary trust set on this @extension, but keeps
it as is for other values.</doc>
        <source-position filename="e-source-webdav.h" line="148"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1519">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_ssl_trust"
              c:identifier="e_source_webdav_update_ssl_trust"
              version="3.16">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1415">Updates user's response from a trust prompt, thus it is re-used the next
time it'll be needed. An #E_TRUST_PROMPT_RESPONSE_UNKNOWN is treated as
a temporary reject, which means the user will be asked again.</doc>
        <source-position filename="e-source-webdav.h" line="137"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1417">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1418">a host name to store the certificate for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cert" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1419">the invalid certificate of the connection over which @host is about
       to be sent</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
          </parameter>
          <parameter name="response" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1421">user's response from a trust prompt for @cert</doc>
            <type name="TrustPromptResponse" c:type="ETrustPromptResponse"/>
          </parameter>
        </parameters>
      </method>
      <method name="verify_ssl_trust"
              c:identifier="e_source_webdav_verify_ssl_trust">
        <doc xml:space="preserve"
             filename="e-source-webdav.c"
             line="1455">Verifies SSL/TLS trust for the given @host and @cert, as previously stored in the @extension
with e_source_webdav_update_ssl_trust().</doc>
        <source-position filename="e-source-webdav.h" line="143"/>
        <return-value transfer-ownership="none">
          <type name="TrustPromptResponse" c:type="ETrustPromptResponse"/>
        </return-value>
        <parameters>
          <instance-parameter name="extension" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1457">an #ESourceWebdav</doc>
            <type name="SourceWebdav" c:type="ESourceWebdav*"/>
          </instance-parameter>
          <parameter name="host" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1458">a host name to store the certificate for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cert" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1459">the invalid certificate of the connection over which @host is about
       to be sent</doc>
            <type name="Gio.TlsCertificate" c:type="GTlsCertificate*"/>
          </parameter>
          <parameter name="cert_errors" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-source-webdav.c"
                 line="1461">a bit-or of #GTlsCertificateFlags describing the reason
  for the @cert to be considered invalid</doc>
            <type name="Gio.TlsCertificateFlags"
                  c:type="GTlsCertificateFlags"/>
          </parameter>
        </parameters>
      </method>
      <property name="avoid-ifmatch"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="calendar-auto-schedule"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="color"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="display-name"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="email-address"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resource-path"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resource-query"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="soup-uri" writable="1" transfer-ownership="none">
        <type name="Soup.URI"/>
      </property>
      <property name="ssl-trust"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent" readable="0" private="1">
        <type name="SourceExtension" c:type="ESourceExtension"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="SourceWebdavPrivate" c:type="ESourceWebdavPrivate*"/>
      </field>
    </class>
    <record name="SourceWebdavClass"
            c:type="ESourceWebdavClass"
            glib:is-gtype-struct-for="SourceWebdav">
      <source-position filename="e-source-webdav.h" line="85"/>
      <field name="parent_class">
        <type name="SourceExtensionClass" c:type="ESourceExtensionClass"/>
      </field>
    </record>
    <record name="SourceWebdavPrivate"
            c:type="ESourceWebdavPrivate"
            disguised="1">
      <source-position filename="e-source-webdav.h" line="67"/>
    </record>
    <enumeration name="ThreeState"
                 version="3.26"
                 glib:type-name="EThreeState"
                 glib:get-type="e_three_state_get_type"
                 c:type="EThreeState">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="276">Describes a three-state value, which can be either Off, On or Inconsistent.</doc>
      <member name="off"
              value="0"
              c:identifier="E_THREE_STATE_OFF"
              glib:nick="off">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="278">the three-state value is Off</doc>
      </member>
      <member name="on"
              value="1"
              c:identifier="E_THREE_STATE_ON"
              glib:nick="on">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="279">the three-state value is On</doc>
      </member>
      <member name="inconsistent"
              value="2"
              c:identifier="E_THREE_STATE_INCONSISTENT"
              glib:nick="inconsistent">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="280">the three-state value is neither On, nor Off</doc>
      </member>
    </enumeration>
    <enumeration name="TimeParseStatus" c:type="ETimeParseStatus">
      <source-position filename="e-time-utils.h" line="43"/>
      <member name="ok" value="0" c:identifier="E_TIME_PARSE_OK">
        <doc xml:space="preserve"
             filename="e-time-utils.h"
             line="35">The time string was parsed successfully.</doc>
      </member>
      <member name="none" value="1" c:identifier="E_TIME_PARSE_NONE">
        <doc xml:space="preserve"
             filename="e-time-utils.h"
             line="36">The time string was empty.</doc>
      </member>
      <member name="invalid" value="2" c:identifier="E_TIME_PARSE_INVALID">
        <doc xml:space="preserve"
             filename="e-time-utils.h"
             line="37">The time string was not formatted correctly.</doc>
      </member>
    </enumeration>
    <enumeration name="TrustPromptResponse"
                 version="3.8"
                 glib:type-name="ETrustPromptResponse"
                 glib:get-type="e_trust_prompt_response_get_type"
                 c:type="ETrustPromptResponse">
      <doc xml:space="preserve"
           filename="e-source-enums.h"
           line="96">Response codes for the trust prompt.</doc>
      <member name="unknown"
              value="-1"
              c:identifier="E_TRUST_PROMPT_RESPONSE_UNKNOWN"
              glib:nick="unknown">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="98">Unknown response, usually due to some error</doc>
      </member>
      <member name="reject"
              value="0"
              c:identifier="E_TRUST_PROMPT_RESPONSE_REJECT"
              glib:nick="reject">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="99">Reject permanently</doc>
      </member>
      <member name="accept"
              value="1"
              c:identifier="E_TRUST_PROMPT_RESPONSE_ACCEPT"
              glib:nick="accept">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="100">Accept permanently</doc>
      </member>
      <member name="accept_temporarily"
              value="2"
              c:identifier="E_TRUST_PROMPT_RESPONSE_ACCEPT_TEMPORARILY"
              glib:nick="accept-temporarily">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="101">Accept temporarily</doc>
      </member>
      <member name="reject_temporarily"
              value="3"
              c:identifier="E_TRUST_PROMPT_RESPONSE_REJECT_TEMPORARILY"
              glib:nick="reject-temporarily">
        <doc xml:space="preserve"
             filename="e-source-enums.h"
             line="102">Reject temporarily</doc>
      </member>
    </enumeration>
    <callback name="TypeFunc" c:type="ETypeFunc" version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.h"
           line="268">Specifies the type of functions passed to e_type_traverse().</doc>
      <source-position filename="e-data-server-util.h" line="277"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.h"
               line="270">a #GType</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.h"
               line="271">user data passed to e_type_traverse()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <constant name="WEBDAV_CAPABILITY_ACCESS_CONTROL"
              value="access-control"
              c:type="E_WEBDAV_CAPABILITY_ACCESS_CONTROL">
      <source-position filename="e-webdav-session.h" line="56"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_ADDRESSBOOK"
              value="addressbook"
              c:type="E_WEBDAV_CAPABILITY_ADDRESSBOOK">
      <source-position filename="e-webdav-session.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_BIND"
              value="bind"
              c:type="E_WEBDAV_CAPABILITY_BIND">
      <source-position filename="e-webdav-session.h" line="57"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CALENDAR_ACCESS"
              value="calendar-access"
              c:type="E_WEBDAV_CAPABILITY_CALENDAR_ACCESS">
      <source-position filename="e-webdav-session.h" line="60"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CALENDAR_AUTO_SCHEDULE"
              value="calendar-auto-schedule"
              c:type="E_WEBDAV_CAPABILITY_CALENDAR_AUTO_SCHEDULE">
      <source-position filename="e-webdav-session.h" line="62"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CALENDAR_PROXY"
              value="calendar-proxy"
              c:type="E_WEBDAV_CAPABILITY_CALENDAR_PROXY">
      <source-position filename="e-webdav-session.h" line="63"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CALENDAR_SCHEDULE"
              value="calendar-schedule"
              c:type="E_WEBDAV_CAPABILITY_CALENDAR_SCHEDULE">
      <source-position filename="e-webdav-session.h" line="61"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CLASS_1"
              value="1"
              c:type="E_WEBDAV_CAPABILITY_CLASS_1">
      <source-position filename="e-webdav-session.h" line="53"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CLASS_2"
              value="2"
              c:type="E_WEBDAV_CAPABILITY_CLASS_2">
      <source-position filename="e-webdav-session.h" line="54"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_CLASS_3"
              value="3"
              c:type="E_WEBDAV_CAPABILITY_CLASS_3">
      <source-position filename="e-webdav-session.h" line="55"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CAPABILITY_EXTENDED_MKCOL"
              value="extended-mkcol"
              c:type="E_WEBDAV_CAPABILITY_EXTENDED_MKCOL">
      <source-position filename="e-webdav-session.h" line="58"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_ASCII_CASEMAP"
              value="i;"
              c:type="E_WEBDAV_COLLATION_ASCII_CASEMAP">
      <source-position filename="e-webdav-session.h" line="213"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_ASCII_CASEMAP_SUFFIX"
              value="ascii-casemap"
              c:type="E_WEBDAV_COLLATION_ASCII_CASEMAP_SUFFIX">
      <source-position filename="e-webdav-session.h" line="212"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_ASCII_NUMERIC"
              value="i;"
              c:type="E_WEBDAV_COLLATION_ASCII_NUMERIC">
      <source-position filename="e-webdav-session.h" line="210"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_ASCII_NUMERIC_SUFFIX"
              value="ascii-numeric"
              c:type="E_WEBDAV_COLLATION_ASCII_NUMERIC_SUFFIX">
      <source-position filename="e-webdav-session.h" line="209"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_OCTET"
              value="i;"
              c:type="E_WEBDAV_COLLATION_OCTET">
      <source-position filename="e-webdav-session.h" line="216"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_OCTET_SUFFIX"
              value="octet"
              c:type="E_WEBDAV_COLLATION_OCTET_SUFFIX">
      <source-position filename="e-webdav-session.h" line="215"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_UNICODE_CASEMAP"
              value="i;"
              c:type="E_WEBDAV_COLLATION_UNICODE_CASEMAP">
      <source-position filename="e-webdav-session.h" line="219"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_COLLATION_UNICODE_CASEMAP_SUFFIX"
              value="unicode-casemap"
              c:type="E_WEBDAV_COLLATION_UNICODE_CASEMAP_SUFFIX">
      <source-position filename="e-webdav-session.h" line="218"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CONTENT_TYPE_CALENDAR"
              value='text/calendar; charset="utf-8"'
              c:type="E_WEBDAV_CONTENT_TYPE_CALENDAR">
      <source-position filename="e-webdav-session.h" line="70"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CONTENT_TYPE_VCARD"
              value='text/vcard; charset="utf-8"'
              c:type="E_WEBDAV_CONTENT_TYPE_VCARD">
      <source-position filename="e-webdav-session.h" line="71"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_CONTENT_TYPE_XML"
              value='application/xml; charset="utf-8"'
              c:type="E_WEBDAV_CONTENT_TYPE_XML">
      <source-position filename="e-webdav-session.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_DEPTH_INFINITY"
              value="infinity"
              c:type="E_WEBDAV_DEPTH_INFINITY">
      <source-position filename="e-webdav-session.h" line="67"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_DEPTH_THIS" value="0" c:type="E_WEBDAV_DEPTH_THIS">
      <source-position filename="e-webdav-session.h" line="65"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_DEPTH_THIS_AND_CHILDREN"
              value="1"
              c:type="E_WEBDAV_DEPTH_THIS_AND_CHILDREN">
      <source-position filename="e-webdav-session.h" line="66"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_NS_CALDAV"
              value="urn:ietf:params:xml:ns:caldav"
              c:type="E_WEBDAV_NS_CALDAV">
      <source-position filename="e-webdav-session.h" line="74"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_NS_CALENDARSERVER"
              value="http://calendarserver.org/ns/"
              c:type="E_WEBDAV_NS_CALENDARSERVER">
      <source-position filename="e-webdav-session.h" line="76"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_NS_CARDDAV"
              value="urn:ietf:params:xml:ns:carddav"
              c:type="E_WEBDAV_NS_CARDDAV">
      <source-position filename="e-webdav-session.h" line="75"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_NS_DAV" value="DAV:" c:type="E_WEBDAV_NS_DAV">
      <source-position filename="e-webdav-session.h" line="73"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <constant name="WEBDAV_NS_ICAL"
              value="http://apple.com/ns/ical/"
              c:type="E_WEBDAV_NS_ICAL">
      <source-position filename="e-webdav-session.h" line="77"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="WEBDAV_SESSION"
                    c:identifier="E_WEBDAV_SESSION"
                    introspectable="0">
      <source-position filename="e-webdav-session.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBDAV_SESSION_CLASS"
                    c:identifier="E_WEBDAV_SESSION_CLASS"
                    introspectable="0">
      <source-position filename="e-webdav-session.h" line="38"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="WEBDAV_SESSION_GET_CLASS"
                    c:identifier="E_WEBDAV_SESSION_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-webdav-session.h" line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <bitfield name="WebDAVACEFlag" c:type="EWebDAVACEFlag">
      <source-position filename="e-webdav-session.h" line="282"/>
      <member name="unknown"
              value="0"
              c:identifier="E_WEBDAV_ACE_FLAG_UNKNOWN">
      </member>
      <member name="grant" value="1" c:identifier="E_WEBDAV_ACE_FLAG_GRANT">
      </member>
      <member name="deny" value="2" c:identifier="E_WEBDAV_ACE_FLAG_DENY">
      </member>
      <member name="invert" value="4" c:identifier="E_WEBDAV_ACE_FLAG_INVERT">
      </member>
      <member name="protected"
              value="8"
              c:identifier="E_WEBDAV_ACE_FLAG_PROTECTED">
      </member>
      <member name="inherited"
              value="16"
              c:identifier="E_WEBDAV_ACE_FLAG_INHERITED">
      </member>
    </bitfield>
    <enumeration name="WebDAVACEPrincipalKind"
                 c:type="EWebDAVACEPrincipalKind">
      <source-position filename="e-webdav-session.h" line="273"/>
      <member name="unknown"
              value="0"
              c:identifier="E_WEBDAV_ACE_PRINCIPAL_UNKNOWN">
      </member>
      <member name="href" value="1" c:identifier="E_WEBDAV_ACE_PRINCIPAL_HREF">
      </member>
      <member name="all" value="2" c:identifier="E_WEBDAV_ACE_PRINCIPAL_ALL">
      </member>
      <member name="authenticated"
              value="3"
              c:identifier="E_WEBDAV_ACE_PRINCIPAL_AUTHENTICATED">
      </member>
      <member name="unauthenticated"
              value="4"
              c:identifier="E_WEBDAV_ACE_PRINCIPAL_UNAUTHENTICATED">
      </member>
      <member name="property"
              value="5"
              c:identifier="E_WEBDAV_ACE_PRINCIPAL_PROPERTY">
      </member>
      <member name="self" value="6" c:identifier="E_WEBDAV_ACE_PRINCIPAL_SELF">
      </member>
      <member name="owner"
              value="7"
              c:identifier="E_WEBDAV_ACE_PRINCIPAL_OWNER">
      </member>
    </enumeration>
    <bitfield name="WebDAVACLRestrictions" c:type="EWebDAVACLRestrictions">
      <source-position filename="e-webdav-session.h" line="313"/>
      <member name="none"
              value="0"
              c:identifier="E_WEBDAV_ACL_RESTRICTION_NONE">
      </member>
      <member name="grant_only"
              value="1"
              c:identifier="E_WEBDAV_ACL_RESTRICTION_GRANT_ONLY">
      </member>
      <member name="no_invert"
              value="2"
              c:identifier="E_WEBDAV_ACL_RESTRICTION_NO_INVERT">
      </member>
      <member name="deny_before_grant"
              value="4"
              c:identifier="E_WEBDAV_ACL_RESTRICTION_DENY_BEFORE_GRANT">
      </member>
      <member name="required_principal"
              value="8"
              c:identifier="E_WEBDAV_ACL_RESTRICTION_REQUIRED_PRINCIPAL">
      </member>
    </bitfield>
    <record name="WebDAVAccessControlEntry"
            c:type="EWebDAVAccessControlEntry"
            glib:type-name="EWebDAVAccessControlEntry"
            glib:get-type="e_webdav_access_control_entry_get_type"
            c:symbol-prefix="webdav_access_control_entry">
      <source-position filename="e-webdav-session.h" line="290"/>
      <field name="principal_kind" writable="1">
        <type name="WebDAVACEPrincipalKind" c:type="EWebDAVACEPrincipalKind"/>
      </field>
      <field name="principal_href" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="flags" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="inherited_href" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="privileges" writable="1">
        <type name="GLib.SList" c:type="GSList*">
          <type name="gpointer" c:type="gpointer"/>
        </type>
      </field>
      <constructor name="new"
                   c:identifier="e_webdav_access_control_entry_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="450">Describes one Access Control Entry (ACE).

The @flags should always contain either %E_WEBDAV_ACE_FLAG_GRANT or
%E_WEBDAV_ACE_FLAG_DENY value.

Use e_webdav_access_control_entry_append_privilege() to add respective
privileges to the entry.</doc>
        <source-position filename="e-webdav-session.h" line="294"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="465">A newly created #EWebDAVAccessControlEntry, prefilled with
   given values. Free it with e_webdav_access_control_entry_free(), when no longer needed.</doc>
          <type name="WebDAVAccessControlEntry"
                c:type="EWebDAVAccessControlEntry*"/>
        </return-value>
        <parameters>
          <parameter name="principal_kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="452">an #EWebDAVACEPrincipalKind</doc>
            <type name="WebDAVACEPrincipalKind"
                  c:type="EWebDAVACEPrincipalKind"/>
          </parameter>
          <parameter name="principal_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="453">principal href; should be set only if @principal_kind is @E_WEBDAV_ACE_PRINCIPAL_HREF</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="454">bit-or of #EWebDAVACEFlag values</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="inherited_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="455">href of the resource from which inherits; should be set only if @flags contain E_WEBDAV_ACE_FLAG_INHERITED</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="append_privilege"
              c:identifier="e_webdav_access_control_entry_append_privilege"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="559">Appends a new @privilege to the list of privileges for the @ace.
The function assumes ownership of the @privilege, which is freed
together with the @ace.</doc>
        <source-position filename="e-webdav-session.h" line="301"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="ace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="561">an #EWebDAVAccessControlEntry</doc>
            <type name="WebDAVAccessControlEntry"
                  c:type="EWebDAVAccessControlEntry*"/>
          </instance-parameter>
          <parameter name="privilege" transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="562">an #EWebDAVPrivilege</doc>
            <type name="WebDAVPrivilege" c:type="EWebDAVPrivilege*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy"
              c:identifier="e_webdav_access_control_entry_copy"
              version="3.26">
        <source-position filename="e-webdav-session.h" line="299"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="502">A new #EWebDAVAccessControlEntry prefilled with
   the same values as @src, or %NULL, when @src is %NULL.
   Free it with e_webdav_access_control_entry_free(), when no longer needed.</doc>
          <type name="WebDAVAccessControlEntry"
                c:type="EWebDAVAccessControlEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="500">an #EWebDAVAccessControlEntry to make a copy of</doc>
            <type name="WebDAVAccessControlEntry"
                  c:type="const EWebDAVAccessControlEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_privileges"
              c:identifier="e_webdav_access_control_entry_get_privileges"
              version="3.26">
        <source-position filename="e-webdav-session.h" line="304"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="584">A #GSList of #EWebDAVPrivilege
   with the list of privileges for the @ace. The reurned #GSList, together with its data
   is owned by the @ace.</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="WebDAVPrivilege"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="ace" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="582">an #EWebDAVAccessControlEntry</doc>
            <type name="WebDAVAccessControlEntry"
                  c:type="EWebDAVAccessControlEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="free"
                c:identifier="e_webdav_access_control_entry_free"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="537">Frees an #EWebDAVAccessControlEntry previously created with e_webdav_access_control_entry_new()
or e_webdav_access_control_entry_copy(). The function does nothing, if @ptr is %NULL.</doc>
        <source-position filename="e-webdav-session.h" line="300"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ptr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="539">an #EWebDAVAccessControlEntry</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <callback name="WebDAVDiscoverRefSourceFunc"
              c:type="EWebDAVDiscoverRefSourceFunc"
              version="3.30">
      <source-position filename="e-webdav-discover.h" line="92"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-webdav-discover.h"
             line="87">an #ESource with UID @uid, or %NULL, if not found.
   Dereference the returned non-NULL #ESource with g_object_unref(), when no longer needed.</doc>
        <type name="Source" c:type="ESource*"/>
      </return-value>
      <parameters>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="0">
          <doc xml:space="preserve"
               filename="e-webdav-discover.h"
               line="83">user data, as passed to e_webdav_discover_sources_full() or
    e_webdav_discover_sources_full_sync()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="uid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.h"
               line="85">an #ESource UID to return</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </callback>
    <bitfield name="WebDAVDiscoverSupports" c:type="EWebDAVDiscoverSupports">
      <source-position filename="e-webdav-discover.h" line="41"/>
      <member name="none"
              value="0"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_NONE">
      </member>
      <member name="contacts"
              value="1"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_CONTACTS">
      </member>
      <member name="events"
              value="2"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_EVENTS">
      </member>
      <member name="memos"
              value="4"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_MEMOS">
      </member>
      <member name="tasks"
              value="8"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_TASKS">
      </member>
      <member name="webdav_notes"
              value="64"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_WEBDAV_NOTES">
      </member>
      <member name="calendar_auto_schedule"
              value="128"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_CALENDAR_AUTO_SCHEDULE">
      </member>
      <member name="subscribed_icalendar"
              value="256"
              c:identifier="E_WEBDAV_DISCOVER_SUPPORTS_SUBSCRIBED_ICALENDAR">
      </member>
    </bitfield>
    <record name="WebDAVDiscoveredSource" c:type="EWebDAVDiscoveredSource">
      <source-position filename="e-webdav-discover.h" line="49"/>
      <field name="href" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="supports" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="display_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="color" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
    </record>
    <bitfield name="WebDAVListFlags" c:type="EWebDAVListFlags">
      <source-position filename="e-webdav-session.h" line="152"/>
      <member name="all" value="4294967295" c:identifier="E_WEBDAV_LIST_ALL">
      </member>
      <member name="none" value="0" c:identifier="E_WEBDAV_LIST_NONE">
      </member>
      <member name="supports" value="1" c:identifier="E_WEBDAV_LIST_SUPPORTS">
      </member>
      <member name="etag" value="2" c:identifier="E_WEBDAV_LIST_ETAG">
      </member>
      <member name="display_name"
              value="4"
              c:identifier="E_WEBDAV_LIST_DISPLAY_NAME">
      </member>
      <member name="content_type"
              value="8"
              c:identifier="E_WEBDAV_LIST_CONTENT_TYPE">
      </member>
      <member name="content_length"
              value="16"
              c:identifier="E_WEBDAV_LIST_CONTENT_LENGTH">
      </member>
      <member name="creation_date"
              value="32"
              c:identifier="E_WEBDAV_LIST_CREATION_DATE">
      </member>
      <member name="last_modified"
              value="64"
              c:identifier="E_WEBDAV_LIST_LAST_MODIFIED">
      </member>
      <member name="description"
              value="128"
              c:identifier="E_WEBDAV_LIST_DESCRIPTION">
      </member>
      <member name="color" value="256" c:identifier="E_WEBDAV_LIST_COLOR">
      </member>
      <member name="only_calendar"
              value="512"
              c:identifier="E_WEBDAV_LIST_ONLY_CALENDAR">
      </member>
      <member name="only_addressbook"
              value="1024"
              c:identifier="E_WEBDAV_LIST_ONLY_ADDRESSBOOK">
      </member>
    </bitfield>
    <enumeration name="WebDAVLockScope" c:type="EWebDAVLockScope">
      <source-position filename="e-webdav-session.h" line="208"/>
      <member name="exclusive"
              value="0"
              c:identifier="E_WEBDAV_LOCK_EXCLUSIVE">
      </member>
      <member name="shared" value="1" c:identifier="E_WEBDAV_LOCK_SHARED">
      </member>
    </enumeration>
    <record name="WebDAVPrivilege"
            c:type="EWebDAVPrivilege"
            glib:type-name="EWebDAVPrivilege"
            glib:get-type="e_webdav_privilege_get_type"
            c:symbol-prefix="webdav_privilege">
      <source-position filename="e-webdav-session.h" line="251"/>
      <field name="ns_uri" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="kind" writable="1">
        <type name="WebDAVPrivilegeKind" c:type="EWebDAVPrivilegeKind"/>
      </field>
      <field name="hint" writable="1">
        <type name="WebDAVPrivilegeHint" c:type="EWebDAVPrivilegeHint"/>
      </field>
      <constructor name="new"
                   c:identifier="e_webdav_privilege_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="280">Describes one privilege entry. The @hint can be %E_WEBDAV_PRIVILEGE_HINT_UNKNOWN
for privileges which are not known to the #EWebDAVSession. It's possible, because
the servers can define their own privileges. The hint is also tried to pair with
known hints when it's %E_WEBDAV_PRIVILEGE_HINT_UNKNOWN.

The @ns_uri and @name can be %NULL only if the @hint is one of the known
privileges. Otherwise it's an error to pass either of the two as %NULL.</doc>
        <source-position filename="e-webdav-session.h" line="255"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="296">A newly created #EWebDAVPrivilege, prefilled with
   given values. Free it with e_webdav_privilege_free(), when no longer needed.</doc>
          <type name="WebDAVPrivilege" c:type="EWebDAVPrivilege*"/>
        </return-value>
        <parameters>
          <parameter name="ns_uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="282">a namespace URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="283">element name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="284">human read-able description, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="285">an #EWebDAVPrivilegeKind</doc>
            <type name="WebDAVPrivilegeKind" c:type="EWebDAVPrivilegeKind"/>
          </parameter>
          <parameter name="hint" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="286">an #EWebDAVPrivilegeHint</doc>
            <type name="WebDAVPrivilegeHint" c:type="EWebDAVPrivilegeHint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="e_webdav_privilege_copy"
              version="3.26">
        <source-position filename="e-webdav-session.h" line="261"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="408">A new #EWebDAVPrivilege prefilled with
   the same values as @src, or %NULL, when @src is %NULL.
   Free it with e_webdav_privilege_free(), when no longer needed.</doc>
          <type name="WebDAVPrivilege" c:type="EWebDAVPrivilege*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="406">an #EWebDAVPrivilege to make a copy of</doc>
            <type name="WebDAVPrivilege" c:type="const EWebDAVPrivilege*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="free"
                c:identifier="e_webdav_privilege_free"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="428">Frees an #EWebDAVPrivilege previously created with e_webdav_privilege_new()
or e_webdav_privilege_copy(). The function does nothing, if @ptr is %NULL.</doc>
        <source-position filename="e-webdav-session.h" line="262"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ptr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="430">an #EWebDAVPrivilege</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="WebDAVPrivilegeHint" c:type="EWebDAVPrivilegeHint">
      <source-position filename="e-webdav-session.h" line="243"/>
      <member name="unknown"
              value="0"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_UNKNOWN">
      </member>
      <member name="read"
              value="1"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_READ">
      </member>
      <member name="write"
              value="2"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_WRITE">
      </member>
      <member name="write_properties"
              value="3"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_WRITE_PROPERTIES">
      </member>
      <member name="write_content"
              value="4"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_WRITE_CONTENT">
      </member>
      <member name="unlock"
              value="5"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_UNLOCK">
      </member>
      <member name="read_acl"
              value="6"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_READ_ACL">
      </member>
      <member name="write_acl"
              value="7"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_WRITE_ACL">
      </member>
      <member name="read_current_user_privilege_set"
              value="8"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_READ_CURRENT_USER_PRIVILEGE_SET">
      </member>
      <member name="bind"
              value="9"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_BIND">
      </member>
      <member name="unbind"
              value="10"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_UNBIND">
      </member>
      <member name="all" value="11" c:identifier="E_WEBDAV_PRIVILEGE_HINT_ALL">
      </member>
      <member name="caldav_read_free_busy"
              value="12"
              c:identifier="E_WEBDAV_PRIVILEGE_HINT_CALDAV_READ_FREE_BUSY">
      </member>
    </enumeration>
    <enumeration name="WebDAVPrivilegeKind" c:type="EWebDAVPrivilegeKind">
      <source-position filename="e-webdav-session.h" line="227"/>
      <member name="unknown"
              value="0"
              c:identifier="E_WEBDAV_PRIVILEGE_KIND_UNKNOWN">
      </member>
      <member name="abstract"
              value="1"
              c:identifier="E_WEBDAV_PRIVILEGE_KIND_ABSTRACT">
      </member>
      <member name="aggregate"
              value="2"
              c:identifier="E_WEBDAV_PRIVILEGE_KIND_AGGREGATE">
      </member>
      <member name="common"
              value="3"
              c:identifier="E_WEBDAV_PRIVILEGE_KIND_COMMON">
      </member>
    </enumeration>
    <record name="WebDAVPropertyChange"
            c:type="EWebDAVPropertyChange"
            glib:type-name="EWebDAVPropertyChange"
            glib:get-type="e_webdav_property_change_get_type"
            c:symbol-prefix="webdav_property_change">
      <source-position filename="e-webdav-session.h" line="191"/>
      <field name="kind" writable="1">
        <type name="WebDAVPropertyChangeKind"
              c:type="EWebDAVPropertyChangeKind"/>
      </field>
      <field name="ns_uri" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="value" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new_remove"
                   c:identifier="e_webdav_property_change_new_remove"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="210">Creates a new #EWebDAVPropertyChange of kind %E_WEBDAV_PROPERTY_REMOVE,
which is used to remove the given property. To change property value
use e_webdav_property_change_new_set() instead.</doc>
        <source-position filename="e-webdav-session.h" line="199"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="219">A new #EWebDAVPropertyChange. Free it with
   e_webdav_property_change_free(), when no longer needed.</doc>
          <type name="WebDAVPropertyChange" c:type="EWebDAVPropertyChange*"/>
        </return-value>
        <parameters>
          <parameter name="ns_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="212">namespace URI of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="213">name of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_set"
                   c:identifier="e_webdav_property_change_new_set"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="182">Creates a new #EWebDAVPropertyChange of kind %E_WEBDAV_PROPERTY_SET,
which is used to modify or set the property value. The @value is a string
representation of the value to store. It can be %NULL, but it means
an empty value, not to remove it. To remove property use
e_webdav_property_change_new_remove() instead.</doc>
        <source-position filename="e-webdav-session.h" line="195"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="194">A new #EWebDAVPropertyChange. Free it with
   e_webdav_property_change_free(), when no longer needed.</doc>
          <type name="WebDAVPropertyChange" c:type="EWebDAVPropertyChange*"/>
        </return-value>
        <parameters>
          <parameter name="ns_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="184">namespace URI of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="185">name of the property</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="186">value of the property, or %NULL for empty value</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy"
              c:identifier="e_webdav_property_change_copy"
              version="3.26">
        <source-position filename="e-webdav-session.h" line="202"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="238">A new #EWebDAVPropertyChange prefilled with
   the same values as @src, or %NULL, when @src is %NULL.
   Free it with e_webdav_property_change_free(), when no longer needed.</doc>
          <type name="WebDAVPropertyChange" c:type="EWebDAVPropertyChange*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="236">an #EWebDAVPropertyChange to make a copy of</doc>
            <type name="WebDAVPropertyChange"
                  c:type="const EWebDAVPropertyChange*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="free"
                c:identifier="e_webdav_property_change_free"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="257">Frees an #EWebDAVPropertyChange previously created with e_webdav_property_change_new_set(),
e_webdav_property_change_new_remove() or or e_webdav_property_change_copy().
The function does nothing, if @ptr is %NULL.</doc>
        <source-position filename="e-webdav-session.h" line="203"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ptr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="259">an #EWebDAVPropertyChange</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="WebDAVPropertyChangeKind"
                 c:type="EWebDAVPropertyChangeKind">
      <source-position filename="e-webdav-session.h" line="184"/>
      <member name="set" value="0" c:identifier="E_WEBDAV_PROPERTY_SET">
      </member>
      <member name="remove" value="1" c:identifier="E_WEBDAV_PROPERTY_REMOVE">
      </member>
    </enumeration>
    <callback name="WebDAVPropstatTraverseFunc"
              c:type="EWebDAVPropstatTraverseFunc"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-webdav-session.h"
           line="154">A callback function for e_webdav_session_propfind_sync(),
e_webdav_session_report_sync() and other XML response with DAV:propstat
elements traversal functions.

The @prop_node points to the actual property (prop) node and it can be examined
with e_xml_find_child(), e_xml_find_children_nodes() and other provided XML helper functions.</doc>
      <source-position filename="e-webdav-session.h" line="174"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-webdav-session.h"
             line="170">%TRUE to continue traversal of the returned response, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="webdav" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.h"
               line="156">an #EWebDAVSession</doc>
          <type name="WebDAVSession" c:type="EWebDAVSession*"/>
        </parameter>
        <parameter name="prop_node" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.h"
               line="157">an #xmlNode</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="request_uri" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.h"
               line="158">a #SoupURI, containing the request URI, maybe redirected by the server</doc>
          <type name="Soup.URI" c:type="const SoupURI*"/>
        </parameter>
        <parameter name="href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-session.h"
               line="159">a full URI to which the property belongs, or %NULL, when not found</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="status_code" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.h"
               line="160">an HTTP status code for this property</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="5">
          <doc xml:space="preserve"
               filename="e-webdav-session.h"
               line="161">user data, as passed to e_webdav_session_propfind_sync()</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="WebDAVResource"
            c:type="EWebDAVResource"
            glib:type-name="EWebDAVResource"
            glib:get-type="e_webdav_resource_get_type"
            c:symbol-prefix="webdav_resource">
      <source-position filename="e-webdav-session.h" line="119"/>
      <field name="kind" writable="1">
        <type name="WebDAVResourceKind" c:type="EWebDAVResourceKind"/>
      </field>
      <field name="supports" writable="1">
        <type name="guint32" c:type="guint32"/>
      </field>
      <field name="href" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="etag" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="display_name" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="content_type" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="content_length" writable="1">
        <type name="gsize" c:type="gsize"/>
      </field>
      <field name="creation_date" writable="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="last_modified" writable="1">
        <type name="glong" c:type="glong"/>
      </field>
      <field name="description" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <field name="color" writable="1">
        <type name="utf8" c:type="gchar*"/>
      </field>
      <constructor name="new"
                   c:identifier="e_webdav_resource_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="55">Some values of the resource are not always valid, depending on the @kind,
but also whether server stores such values and whether it had been asked
for them to be fetched.

The @etag for %E_WEBDAV_RESOURCE_KIND_COLLECTION can be a change tag instead.</doc>
        <source-position filename="e-webdav-session.h" line="123"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="75">A newly created #EWebDAVResource, prefilled with
   given values. Free it with e_webdav_resource_free(), when no longer needed.</doc>
          <type name="WebDAVResource" c:type="EWebDAVResource*"/>
        </return-value>
        <parameters>
          <parameter name="kind" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="57">an #EWebDAVResourceKind of the resource</doc>
            <type name="WebDAVResourceKind" c:type="EWebDAVResourceKind"/>
          </parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="58">bit-or of #EWebDAVResourceSupports values</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="href" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="59">href of the resource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="etag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="60">optional ETag of the resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="61">optional display name of the resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="62">optional Content-Type of the resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="content_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="63">optional Content-Length of the resource, or 0</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="creation_date" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="64">optional date of creation of the resource, or 0</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="last_modified" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="65">optional last modified time of the resource, or 0</doc>
            <type name="glong" c:type="glong"/>
          </parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="66">optional description of the resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="color"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="67">optional color of the resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="copy" c:identifier="e_webdav_resource_copy" version="3.26">
        <source-position filename="e-webdav-session.h" line="135"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="115">A new #EWebDAVResource prefilled with
   the same values as @src, or %NULL, when @src is %NULL.
   Free it with e_webdav_resource_free(), when no longer needed.</doc>
          <type name="WebDAVResource" c:type="EWebDAVResource*"/>
        </return-value>
        <parameters>
          <instance-parameter name="src"
                              transfer-ownership="none"
                              nullable="1"
                              allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="113">an #EWebDAVResource to make a copy of</doc>
            <type name="WebDAVResource" c:type="const EWebDAVResource*"/>
          </instance-parameter>
        </parameters>
      </method>
      <function name="free"
                c:identifier="e_webdav_resource_free"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="140">Frees an #EWebDAVResource previously created with e_webdav_resource_new()
or e_webdav_resource_copy(). The function does nothing, if @ptr is %NULL.</doc>
        <source-position filename="e-webdav-session.h" line="136"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="ptr"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="142">an #EWebDAVResource</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
    </record>
    <enumeration name="WebDAVResourceKind" c:type="EWebDAVResourceKind">
      <source-position filename="e-webdav-session.h" line="93"/>
      <member name="unknown"
              value="0"
              c:identifier="E_WEBDAV_RESOURCE_KIND_UNKNOWN">
      </member>
      <member name="addressbook"
              value="1"
              c:identifier="E_WEBDAV_RESOURCE_KIND_ADDRESSBOOK">
      </member>
      <member name="calendar"
              value="2"
              c:identifier="E_WEBDAV_RESOURCE_KIND_CALENDAR">
      </member>
      <member name="principal"
              value="3"
              c:identifier="E_WEBDAV_RESOURCE_KIND_PRINCIPAL">
      </member>
      <member name="collection"
              value="4"
              c:identifier="E_WEBDAV_RESOURCE_KIND_COLLECTION">
      </member>
      <member name="resource"
              value="5"
              c:identifier="E_WEBDAV_RESOURCE_KIND_RESOURCE">
      </member>
      <member name="subscribed_icalendar"
              value="6"
              c:identifier="E_WEBDAV_RESOURCE_KIND_SUBSCRIBED_ICALENDAR">
      </member>
      <member name="webdav_notes"
              value="7"
              c:identifier="E_WEBDAV_RESOURCE_KIND_WEBDAV_NOTES">
      </member>
    </enumeration>
    <bitfield name="WebDAVResourceSupports" c:type="EWebDAVResourceSupports">
      <source-position filename="e-webdav-session.h" line="105"/>
      <member name="none"
              value="0"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_NONE">
      </member>
      <member name="contacts"
              value="1"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_CONTACTS">
      </member>
      <member name="events"
              value="2"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_EVENTS">
      </member>
      <member name="memos"
              value="4"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_MEMOS">
      </member>
      <member name="tasks"
              value="8"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_TASKS">
      </member>
      <member name="freebusy"
              value="16"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_FREEBUSY">
      </member>
      <member name="timezone"
              value="32"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_TIMEZONE">
      </member>
      <member name="webdav_notes"
              value="64"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_WEBDAV_NOTES">
      </member>
      <member name="last"
              value="64"
              c:identifier="E_WEBDAV_RESOURCE_SUPPORTS_LAST">
      </member>
    </bitfield>
    <class name="WebDAVSession"
           c:symbol-prefix="webdav_session"
           c:type="EWebDAVSession"
           version="3.26"
           parent="SoupSession"
           glib:type-name="EWebDAVSession"
           glib:get-type="e_webdav_session_get_type"
           glib:type-struct="WebDAVSessionClass">
      <doc xml:space="preserve"
           filename="e-webdav-session.c"
           line="18">The #EWebDAVSession is a class to work with WebDAV (RFC 4918),
CalDAV (RFC 4791) or CardDAV (RFC 6352) servers, providing API
for common requests/responses, on top of an #ESoupSession. It
supports also Access Control Protocol (RFC 3744).</doc>
      <source-position filename="e-webdav-session.h" line="334"/>
      <constructor name="new"
                   c:identifier="e_webdav_session_new"
                   version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="624">Creates a new #EWebDAVSession associated with given @source.
The #EWebDAVSession uses an #ESourceWebdav extension on certain
places when it's defined for the @source.</doc>
        <source-position filename="e-webdav-session.h" line="338"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="632">a new #EWebDAVSession; free it with g_object_unref(),
   when no longer needed.</doc>
          <type name="WebDAVSession" c:type="EWebDAVSession*"/>
        </return-value>
        <parameters>
          <parameter name="source" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="626">an #ESource</doc>
            <type name="Source" c:type="ESource*"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="util_free_privileges"
                c:identifier="e_webdav_session_util_free_privileges"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="5118">Frees @privileges returned by e_webdav_session_get_supported_privilege_set_sync().
The function does nothing, if @privileges is %NULL.</doc>
        <source-position filename="e-webdav-session.h" line="593"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="privileges"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="5120">a tree of #EWebDAVPrivilege structures</doc>
            <type name="GLib.Node" c:type="GNode*"/>
          </parameter>
        </parameters>
      </function>
      <function name="util_maybe_dequote"
                c:identifier="e_webdav_session_util_maybe_dequote"
                version="3.26">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="5075">Dequotes @text, if it's enclosed in double-quotes. The function
changes @text, it doesn't allocate new string. The function does
nothing when the @text is not enclosed in double-quotes.</doc>
        <source-position filename="e-webdav-session.h" line="592"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="5083">possibly dequoted @text</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <parameter name="text"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="5077">text to dequote</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </function>
      <method name="acl_sync"
              c:identifier="e_webdav_session_acl_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4094">Issues ACL request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource.</doc>
        <source-position filename="e-webdav-session.h" line="541"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4105">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4096">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4097">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4098">the request itself, as an #EXmlDocument, the root element should be DAV:acl</doc>
            <type name="XmlDocument" c:type="const EXmlDocument*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4099">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="copy_sync"
              c:identifier="e_webdav_session_copy_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2688">Copies a resource identified by @source_uri to @destination_uri on the server.
The @source_uri can reference also collections, in which case the @depth influences
whether only the collection itself is copied (%E_WEBDAV_DEPTH_THIS) or whether
the collection with all its children is copied (%E_WEBDAV_DEPTH_INFINITY).</doc>
        <source-position filename="e-webdav-session.h" line="462"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2703">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2690">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="source_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2691">URI of the resource or collection to copy</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destination_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2692">URI of the destination</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2693">requested depth, can be one of %E_WEBDAV_DEPTH_THIS or %E_WEBDAV_DEPTH_INFINITY</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="can_overwrite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2694">whether can overwrite @destination_uri, when it exists</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2695">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_sync"
              c:identifier="e_webdav_session_delete_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2599">Deletes a resource identified by @uri on the server. The URI can
reference a collection, in which case @depth should be %E_WEBDAV_DEPTH_INFINITY.
Use @depth %E_WEBDAV_DEPTH_THIS when deleting a regular resource, or %NULL,
to let the server use default Depth.

The @etag argument is used to avoid clashes when overwriting existing resources.
Use %NULL @etag when deleting collection resources or to force the deletion,
otherwise provide a valid ETag of a non-collection resource to verify that
the version requested to delete is the same as on the server.

Note that the actual usage of @etag is also influenced by #ESourceWebdav:avoid-ifmatch
property of the associated #ESource.</doc>
        <source-position filename="e-webdav-session.h" line="456"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2621">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2601">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2602">URI of the resource to delete</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="depth"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2603">optional requested depth, can be one of %E_WEBDAV_DEPTH_THIS or %E_WEBDAV_DEPTH_INFINITY, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="etag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2604">an optional ETag of the resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2605">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="ensure_full_uri"
              c:identifier="e_webdav_session_ensure_full_uri"
              version="3.24">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1099">Converts possibly path-only @href into a full URI under the @request_uri.
When the @request_uri is %NULL, the URI defined in associated #ESource is
used instead, taken from the #ESourceWebdav extension, if defined.

Free the returned pointer with g_free(), when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="354"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1111">The @href as a full URI</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1101">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="request_uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1102">a #SoupURI to which the @href belongs, or %NULL</doc>
            <type name="Soup.URI" c:type="const SoupURI*"/>
          </parameter>
          <parameter name="href" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1103">a possibly path-only href</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_acl_restrictions_sync"
              c:identifier="e_webdav_session_get_acl_restrictions_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4622">Gets Access Control List (ACL) restrictions for the @uri, or, in case it's %NULL,
for the URI defined in associated #ESource. The @out_principal_kind is valid only
if the @out_restrictions contains #E_WEBDAV_ACL_RESTRICTION_REQUIRED_PRINCIPAL.
The @out_principal_hrefs is valid only if the @out_principal_kind is valid and when
it is #E_WEBDAV_ACE_PRINCIPAL_HREF.

Free the returned @out_principal_hrefs with
g_slist_free_full (entries, g_free);
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="563"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4642">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4624">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4625">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_restrictions"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4626">return location for bit-or of #EWebDAVACLRestrictions</doc>
            <type name="guint32" c:type="guint32*"/>
          </parameter>
          <parameter name="out_principal_kind"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4627">return location for principal kind</doc>
            <type name="WebDAVACEPrincipalKind"
                  c:type="EWebDAVACEPrincipalKind*"/>
          </parameter>
          <parameter name="out_principal_hrefs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4628">return location for a #GSList of principal href-s</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4629">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_acl_sync"
              c:identifier="e_webdav_session_get_acl_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4520">Gets Access Control List (ACL) for the @uri, or, in case it's %NULL, for the URI
defined in associated #ESource.

This function doesn't read general #E_WEBDAV_ACE_PRINCIPAL_PROPERTY.

Free the returned @out_entries with
g_slist_free_full (entries, e_webdav_access_control_entry_free);
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="558"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4537">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4522">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4523">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_entries"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4524">return location for a #GSList of #EWebDAVAccessControlEntry</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="WebDAVAccessControlEntry"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4525">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_user_privilege_set_sync"
              c:identifier="e_webdav_session_get_current_user_privilege_set_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4278">Gets current user privileges for the @uri, or, in case it's %NULL, for the URI
defined in associated #ESource.

Free the returned @out_privileges with
g_slist_free_full (privileges, e_webdav_privilege_free);
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="552"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4293">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4280">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4281">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_privileges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4282">return location for a %GSList of #EWebDAVPrivilege</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="WebDAVPrivilege"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4283">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_data_sync"
              c:identifier="e_webdav_session_get_data_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2146">Reads a resource identified by @uri from the server. The URI cannot
reference a collection.

The @out_bytes is filled by actual data being read. If not %NULL, @out_length
is populated with how many bytes had been read. The @out_bytes is always
NUL-terminated, while this termination byte is not part of @out_length.
Free the @out_bytes with g_free(), when no longer needed.

Free returned pointer of @out_href and @out_etag, if not %NULL, with g_free(),
when no longer needed.

To read large data use e_webdav_session_get_sync() instead.</doc>
        <source-position filename="e-webdav-session.h" line="429"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2170">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2148">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2149">URI of the resource to read</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_href"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2150">optional return location for href of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_etag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2151">optional return location for etag of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_bytes"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2152">return location for bytes being read</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2153">option return location for length of bytes being read, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2154">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_last_dav_error_code"
              c:identifier="e_webdav_session_get_last_dav_error_code"
              version="3.36">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="647">Returns last DAV error code as returned by the server. Each recognized code
is enclosed in "[]" in the returned string, to be able to distinguish between
them, in case the server returned multiple codes.

The string is valid until the next request is executed.</doc>
        <source-position filename="e-webdav-session.h" line="339"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="657">a DAV error from the last request, or %NULL, when
   no error had been recognized.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="649">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_last_dav_error_is_permission"
              c:identifier="e_webdav_session_get_last_dav_error_is_permission"
              version="3.36">
        <source-position filename="e-webdav-session.h" line="340"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="674">whether the last recognized DAV error code contains an error
   which means that user doesn't have permission for the operation. If there
   is no DAV error stored, then returns %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="672">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_principal_collection_set_sync"
              c:identifier="e_webdav_session_get_principal_collection_set_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4724">Gets list of principal collection href for the @uri, or, in case it's %NULL,
for the URI defined in associated #ESource. The @out_principal_hrefs are root
collections that contain the principals that are available on the server that
implements this resource.

Free the returned @out_principal_hrefs with
g_slist_free_full (entries, g_free);
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="571"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4741">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4726">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4727">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_principal_hrefs"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4728">return location for a #GSList of principal href-s</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4729">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_supported_privilege_set_sync"
              c:identifier="e_webdav_session_get_supported_privilege_set_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4166">Gets supported privileges for the @uri, or, in case it's %NULL, for the URI
defined in associated #ESource.

The root node of @out_privileges has always %NULL data.

Free the returned @out_privileges with e_webdav_session_util_free_privileges()
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="546"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4182">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4168">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4169">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_privileges"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4170">return location for the tree of supported privileges</doc>
            <type name="GLib.Node" c:type="GNode**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4171">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_sync"
              c:identifier="e_webdav_session_get_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2043">Reads a resource identified by @uri from the server and writes it
to the @stream. The URI cannot reference a collection.

Free returned pointer of @out_href and @out_etag, if not %NULL, with g_free(),
when no longer needed.

The e_webdav_session_get_data_sync() can be used to read the resource data
directly to memory.</doc>
        <source-position filename="e-webdav-session.h" line="422"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2062">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2045">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2046">URI of the resource to read</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_href"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2047">optional return location for href of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_etag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2048">optional return location for etag of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_stream"
                     direction="out"
                     caller-allocates="1"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2049">a #GOutputStream to write data to</doc>
            <type name="Gio.OutputStream" c:type="GOutputStream*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2050">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="getctag_sync"
              c:identifier="e_webdav_session_getctag_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3372">Issues a getctag property request for a collection identified by @uri, or,
in case it's %NULL, on the URI defined in associated #ESource. The ctag is
a collection tag, which changes whenever the collection changes (similar
to etag). The getctag is an extension, thus the function can fail when
the server doesn't support it.

Free the returned @out_ctag with g_free(), when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="516"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3388">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3374">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3375">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_ctag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3376">return location for the ctag</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3377">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_sync"
              c:identifier="e_webdav_session_list_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3678">Lists content of the @uri, or, in case it's %NULL, of the URI defined
in associated #ESource, which should point to a collection. The @flags
influences which properties are read for the resources.

The @out_resources is in no particular order.

Free the returned @out_resources with
g_slist_free_full (resources, e_webdav_resource_free);
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="521"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3698">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3680">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3681">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3682">requested depth, can be one of %E_WEBDAV_DEPTH_THIS, %E_WEBDAV_DEPTH_THIS_AND_CHILDREN or %E_WEBDAV_DEPTH_INFINITY</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3683">a bit-or of #EWebDAVListFlags, claiming what properties to read</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="out_resources"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3684">return location for the resources</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="WebDAVResource"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3685">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock_resource_sync"
              c:identifier="e_webdav_session_lock_resource_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3912">Locks a resource identified by @uri, or, in case it's %NULL, by the URI defined
in associated #ESource. It obtains a write lock with the given @lock_scope.

The @owner is used to identify the lock owner. When it's an http:// or https://,
then it's referenced as DAV:href, otherwise the value is treated as plain text.
If it's %NULL, then the user name from the associated #ESource is used.

The @out_lock_token can be refreshed with e_webdav_session_refresh_lock_sync().
Release the lock with e_webdav_session_unlock_sync().
Free the returned @out_lock_token with g_free(), when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="533"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3934">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3914">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3915">URI to lock, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lock_scope" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3916">an #EWebDAVLockScope to define the scope of the lock</doc>
            <type name="WebDAVLockScope" c:type="EWebDAVLockScope"/>
          </parameter>
          <parameter name="lock_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3917">timeout for the lock, in seconds, on 0 to infinity</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="owner"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3918">optional identificator of the owner of the lock, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_lock_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3919">return location of the obtained or refreshed lock token</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3920">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="lock_sync"
              c:identifier="e_webdav_session_lock_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2821">Locks a resource identified by @uri, or, in case it's %NULL, on the URI
defined in associated #ESource.

The @out_lock_token can be refreshed with e_webdav_session_refresh_lock_sync().
Release the lock with e_webdav_session_unlock_sync().
Free the returned @out_lock_token with g_free(), when no longer needed.

If provided, free the returned @out_xml_response with xmlFreeDoc(),
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="475"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2843">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2823">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2824">URI to lock, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2825">requested depth, can be one of %E_WEBDAV_DEPTH_THIS or %E_WEBDAV_DEPTH_INFINITY</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lock_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2826">timeout for the lock, in seconds, on 0 to infinity</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2827">an XML describing the lock request, with DAV:lockinfo root element</doc>
            <type name="XmlDocument" c:type="const EXmlDocument*"/>
          </parameter>
          <parameter name="out_lock_token"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2828">return location of the obtained or refreshed lock token</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_xml_response"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2829">optional return location for the server response as #xmlDocPtr</doc>
            <type name="libxml2.Doc" c:type="xmlDoc**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2830">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkcalendar_sync"
              c:identifier="e_webdav_session_mkcalendar_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1840">Creates a new calendar collection identified by @uri on the server.
The @supports defines what component types can be stored into
the created calendar collection. Only %E_WEBDAV_RESOURCE_SUPPORTS_NONE
and values related to iCalendar content can be used here.
Using %E_WEBDAV_RESOURCE_SUPPORTS_NONE means that everything is supported.

Note that CalDAV RFC 4791 Section 4.2 forbids to create calendar
resources under other calendar resources (no nested calendars
are allowed).</doc>
        <source-position filename="e-webdav-session.h" line="414"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1861">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1842">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1843">URI of the collection to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1844">a human-readable display name to set, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1845">a human-readable description of the calendar, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="color"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1846">a color to set, in format "&amp;num;RRGGBB", or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="supports" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1847">a bit-or of EWebDAVResourceSupports values</doc>
            <type name="guint32" c:type="guint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1848">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkcol_addressbook_sync"
              c:identifier="e_webdav_session_mkcol_addressbook_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1734">Creates a new address book collection identified by @uri on the server.

Note that CardDAV RFC 6352 Section 5.2 forbids to create address book
resources under other address book resources (no nested address books
are allowed).</doc>
        <source-position filename="e-webdav-session.h" line="408"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1749">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1736">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1737">URI of the collection to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="display_name"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1738">a human-readable display name to set, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="description"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1739">a human-readable description of the address book, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1740">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="mkcol_sync"
              c:identifier="e_webdav_session_mkcol_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1688">Creates a new generic collection identified by @uri on the server.
To create specific collections use e_webdav_session_mkcalendar_sync()
or e_webdav_session_mkcol_addressbook_sync().</doc>
        <source-position filename="e-webdav-session.h" line="404"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1699">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1690">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1691">URI of the collection to create</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1692">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="move_sync"
              c:identifier="e_webdav_session_move_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2757">Moves a resource identified by @source_uri to @destination_uri on the server.
The @source_uri can reference also collections.</doc>
        <source-position filename="e-webdav-session.h" line="469"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2769">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2759">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="source_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2760">URI of the resource or collection to copy</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="destination_uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2761">URI of the destination</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="can_overwrite" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2762">whether can overwrite @destination_uri, when it exists</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2763">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="new_request"
              c:identifier="e_webdav_session_new_request"
              version="3.26"
              throws="1">
        <source-position filename="e-webdav-session.h" line="343"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="696">A new #SoupRequestHTTP for the given @uri, or, when %NULL,
   for the URI stored in the associated #ESource. Free the returned structure
   with g_object_unref(), when no longer needed.</doc>
          <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="691">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="692">an HTTP method</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="693">URI to create the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="options_sync"
              c:identifier="e_webdav_session_options_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1196">Issues OPTIONS request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource.

The @out_capabilities contains a set of returned capabilities. Some known are
defined as E_WEBDAV_CAPABILITY_CLASS_1, and so on. The 'value' of the #GHashTable
doesn't have any particular meaning and the strings are compared case insensitively.
Free the hash table with g_hash_table_destroy(), when no longer needed. The returned
value can be %NULL on success, it's when the server doesn't provide the information.

The @out_allows contains a set of allowed methods returned by the server. Some known
are defined as %SOUP_METHOD_OPTIONS, and so on. The 'value' of the #GHashTable
doesn't have any particular meaning and the strings are compared case insensitively.
Free the hash table with g_hash_table_destroy(), when no longer needed. The returned
value can be %NULL on success, it's when the server doesn't provide the information.</doc>
        <source-position filename="e-webdav-session.h" line="357"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1220">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1198">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1199">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_capabilities"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1200">return location for DAV capabilities</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="out_allows"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1201">return location for allowed operations</doc>
            <type name="GLib.HashTable" c:type="GHashTable**">
              <type name="gpointer" c:type="gpointer"/>
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1202">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="post_sync"
              c:identifier="e_webdav_session_post_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1365">Issues POST request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource. The Content-Type of the @data is set to
application/xml. To POST the @data with a different Content-Type use
e_webdav_session_post_with_content_type_sync().

The optional @out_content_type can be used to get content type of the response.
Free it with g_free(), when no longer needed.

The optional @out_content can be used to get actual result content. Free it
with g_byte_array_free(), when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="363"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1387">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1367">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1368">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1369">data to post to the server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1370">length of @data, or -1, when @data is NUL-terminated</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="out_content_type"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1371">return location for response Content-Type, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_content"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1372">return location for response content, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="GByteArray**">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1373">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="post_with_content_type_sync"
              c:identifier="e_webdav_session_post_with_content_type_sync"
              version="3.32"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1271">Issues POST request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource.

The optional @out_content_type can be used to get content type of the response.
Free it with g_free(), when no longer needed.

The optional @out_content can be used to get actual result content. Free it
with g_byte_array_free(), when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="371"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1292">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1273">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1274">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1275">data to post to the server</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="data_length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1276">length of @data, or -1, when @data is NUL-terminated</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="in_content_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1277">a Content-Type of the @data, or %NULL, to use application/xml</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_content_type"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1278">return location for response Content-Type, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_content"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1279">return location for response content, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="GByteArray**">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1280">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="principal_property_search_sync"
              c:identifier="e_webdav_session_principal_property_search_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4987">Issues a DAV:principal-property-search for the @uri, or, in case it's %NULL,
for the URI defined in associated #ESource. The DAV:principal-property-search
performs a search for all principals whose properties contain character data
that matches the search criteria @match_value in @match_property property
of namespace @match_ns_uri.

By default, the function searches all members (at any depth) of the collection
identified by the @uri. If @apply_to_principal_collection_set is set to %TRUE,
the search is applied instead to each collection returned by
e_webdav_session_get_principal_collection_set_sync() for the @uri.

The @out_principals is a #GSList of #EWebDAVResource, where the kind
is set to %E_WEBDAV_RESOURCE_KIND_PRINCIPAL and only href with displayname
are filled. All other members of #EWebDAVResource are not set.

Free the returned @out_principals with
g_slist_free_full (principals, e_webdav_resource_free);
when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="582"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="5018">Whether succeeded. Note it can report success also when no matching
   principal had been found.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4989">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4990">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="apply_to_principal_collection_set"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4991">whether to apply to principal-collection-set</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="match_ns_uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4992">namespace URI of the property to search in, or %NULL for %E_WEBDAV_NS_DAV</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match_property" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4993">name of the property to search in</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="match_value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4994">a string value to search for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="out_principals"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4995">return location for matching principals</doc>
            <type name="GLib.SList" c:type="GSList**">
              <type name="WebDAVResource"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4996">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="propfind_sync"
              c:identifier="e_webdav_session_propfind_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1407">Issues PROPFIND request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource. On success, calls @func for each returned
DAV:propstat.

The @xml can be %NULL, in which case the server should behave like DAV:allprop request.</doc>
        <source-position filename="e-webdav-session.h" line="381"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1424">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1409">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1410">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1411">requested depth, can be one of %E_WEBDAV_DEPTH_THIS, %E_WEBDAV_DEPTH_THIS_AND_CHILDREN or %E_WEBDAV_DEPTH_INFINITY</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="xml"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1412">the request itself, as an #EXmlDocument, the root element should be DAV:propfind, or %NULL</doc>
            <type name="XmlDocument" c:type="const EXmlDocument*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1413">an #EWebDAVPropstatTraverseFunc function to call for each DAV:propstat in the multistatus response</doc>
            <type name="WebDAVPropstatTraverseFunc"
                  c:type="EWebDAVPropstatTraverseFunc"/>
          </parameter>
          <parameter name="func_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1414">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1415">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="proppatch_sync"
              c:identifier="e_webdav_session_proppatch_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1499">Issues PROPPATCH request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource, with the @changes. The order of requested changes
inside @xml is significant, unlike on other places.</doc>
        <source-position filename="e-webdav-session.h" line="389"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1511">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1501">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1502">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1503">an #EXmlDocument with request changes, its root element should be DAV:propertyupdate</doc>
            <type name="XmlDocument" c:type="const EXmlDocument*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1504">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="put_data_sync"
              c:identifier="e_webdav_session_put_data_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2465">Writes data to a resource identified by @uri to the server. The URI cannot
reference a collection.

The @etag argument is used to avoid clashes when overwriting existing
resources. It can contain three values:
 - %NULL - to write completely new resource
 - empty string - write new resource or overwrite any existing, regardless changes on the server
 - valid ETag - overwrite existing resource only if it wasn't changed on the server.

Note that the actual usage of @etag is also influenced by #ESourceWebdav:avoid-ifmatch
property of the associated #ESource.

The @out_href, if provided, is filled with the resulting URI
of the written resource. It can be different from the @uri when the server
redirected to a different location.

The @out_etag contains ETag of the resource after it had been saved.

To write large data use e_webdav_session_put_sync() instead.</doc>
        <source-position filename="e-webdav-session.h" line="446"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2498">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2467">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2468">URI of the resource to write</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="etag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2469">an ETag of the resource, if it's an existing resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2470">Content-Type of the @bytes to be written</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="bytes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2471">actual bytes to be written</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2472">how many bytes to write, or -1, when the @bytes is NUL-terminated</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="out_href"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2473">optional return location for href of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_etag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2474">optional return location for etag of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2475">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="put_sync"
              c:identifier="e_webdav_session_put_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2301">Writes data from @stream to a resource identified by @uri to the server.
The URI cannot reference a collection.

The @etag argument is used to avoid clashes when overwriting existing
resources. It can contain three values:
 - %NULL - to write completely new resource
 - empty string - write new resource or overwrite any existing, regardless changes on the server
 - valid ETag - overwrite existing resource only if it wasn't changed on the server.

Note that the actual behaviour is also influenced by #ESourceWebdav:avoid-ifmatch
property of the associated #ESource.

The @out_href, if provided, is filled with the resulting URI
of the written resource. It can be different from the @uri when the server
redirected to a different location.

The @out_etag contains ETag of the resource after it had been saved.

The @stream should support also #GSeekable interface, because the data
send can require restart of the send due to redirect or other reasons.

This method uses Transfer-Encoding:chunked, in contrast to the
e_webdav_session_put_data_sync(), which writes data stored in memory
like any other request.</doc>
        <source-position filename="e-webdav-session.h" line="437"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2338">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2303">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2304">URI of the resource to write</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="etag"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2305">an ETag of the resource, if it's an existing resource, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="content_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2306">Content-Type of the @bytes to be written</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2307">a #GInputStream with data to be written</doc>
            <type name="Gio.InputStream" c:type="GInputStream*"/>
          </parameter>
          <parameter name="out_href"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2308">optional return location for href of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_etag"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2309">optional return location for etag of the resource, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2310">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_lock_sync"
              c:identifier="e_webdav_session_refresh_lock_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="2966">Refreshes existing lock @lock_token for a resource identified by @uri,
or, in case it's %NULL, on the URI defined in associated #ESource.
The @lock_token is returned from e_webdav_session_lock_sync() and
the @uri should be the same as that used with e_webdav_session_lock_sync().</doc>
        <source-position filename="e-webdav-session.h" line="484"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="2980">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2968">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2969">URI to lock, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lock_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2970">token of an existing lock</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lock_timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2971">timeout for the lock, in seconds, on 0 to infinity</doc>
            <type name="gint32" c:type="gint32"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="2972">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="replace_with_detailed_error"
              c:identifier="e_webdav_session_replace_with_detailed_error"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1060">Tries to read detailed error information from @response_data,
if not provided, then from @request's response_body. If the detailed
error cannot be found, then does nothing, otherwise frees the content
of @inout_error, if any, and then populates it with an error message
prefixed with @prefix.

The @prefix might be of form "Failed to something", because the resulting
error message will be:
"Failed to something: HTTP error code XXX (reason_phrase): detailed_error".
When @prefix is %NULL, the error message will be:
"Failed with HTTP error code XXX (reason phrase): detailed_error".

As the caller might not be interested in errors, also the @inout_error
can be %NULL, in which case the function does nothing.</doc>
        <source-position filename="e-webdav-session.h" line="347"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1084">Whether any detailed error had been recognized.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1062">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="request" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1063">a #SoupRequestHTTP</doc>
            <type name="Soup.RequestHTTP" c:type="SoupRequestHTTP*"/>
          </parameter>
          <parameter name="response_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1064">received response data, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="const GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="ignore_multistatus" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1065">whether to ignore multistatus responses</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="prefix"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1066">error message prefix, used when replacing, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="report_sync"
              c:identifier="e_webdav_session_report_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="1572">Issues REPORT request on the provided @uri, or, in case it's %NULL, on the URI
defined in associated #ESource. On success, calls @func for each returned
DAV:propstat.

The report can result in a multistatus response, but also to raw data. In case
the @func is provided and the result is a multistatus response, then it is traversed
using this @func.

The optional @out_content_type can be used to get content type of the response.
Free it with g_free(), when no longer needed.

The optional @out_content can be used to get actual result content. Free it
with g_byte_array_free(), when no longer needed.</doc>
        <source-position filename="e-webdav-session.h" line="394"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="1599">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1574">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1575">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="depth"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1576">requested depth, can be %NULL, then no Depth header is sent</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1577">the request itself, as an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="const EXmlDocument*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="4">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1578">an #EWebDAVPropstatTraverseFunc function to call for each DAV:propstat in the multistatus response, or %NULL</doc>
            <type name="WebDAVPropstatTraverseFunc"
                  c:type="EWebDAVPropstatTraverseFunc"/>
          </parameter>
          <parameter name="func_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1579">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="out_content_type"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1580">return location for response Content-Type, or %NULL</doc>
            <type name="utf8" c:type="gchar**"/>
          </parameter>
          <parameter name="out_content"
                     transfer-ownership="full"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1581">return location for response content, or %NULL</doc>
            <array name="GLib.ByteArray" c:type="GByteArray**">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="1582">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_acl_sync"
              c:identifier="e_webdav_session_set_acl_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="4778">Changes Access Control List (ACL) for the @uri, or, in case it's %NULL,
for the URI defined in associated #ESource.

Make sure that the @entries satisfy ACL restrictions, as returned
by e_webdav_session_get_acl_restrictions_sync(). The order in the @entries
is preserved. It cannot contain any %E_WEBDAV_ACE_FLAG_PROTECTED,
nor @E_WEBDAV_ACE_FLAG_INHERITED, items.

Use e_webdav_session_get_acl_sync() to read currently known ACL entries,
remove from the list those protected and inherited, and then modify
the rest with the required changed.

Note this function doesn't support general %E_WEBDAV_ACE_PRINCIPAL_PROPERTY and
returns %G_IO_ERROR_NOT_SUPPORTED error when any such is tried to be written.

In case the returned entries contain any %E_WEBDAV_ACE_PRINCIPAL_PROPERTY,
or there's a need to write such Access Control Entry, then do not use
e_webdav_session_get_acl_sync(), neither e_webdav_session_set_acl_sync(),
and write more generic implementation.</doc>
        <source-position filename="e-webdav-session.h" line="577"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="4806">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4780">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4781">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4782">entries to write</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="WebDAVAccessControlEntry"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="4783">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="traverse_mkcalendar_response"
              c:identifier="e_webdav_session_traverse_mkcalendar_response"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3313">Traverses a CALDAV:mkcalendar-response response and calls @func for each returned DAV:propstat.

The @message, if provided, is used to verify that the response is an XML Content-Type.
It's used to get the request URI as well.</doc>
        <source-position filename="e-webdav-session.h" line="509"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3327">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3315">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="message"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3316">an optional #SoupMessage corresponding to the response, or %NULL</doc>
            <type name="Soup.Message" c:type="const SoupMessage*"/>
          </parameter>
          <parameter name="xml_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3317">a #GByteArray containing CALDAV:mkcalendar-response response</doc>
            <array name="GLib.ByteArray" c:type="const GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3318">an #EWebDAVPropstatTraverseFunc function to call for each DAV:propstat in the response</doc>
            <type name="WebDAVPropstatTraverseFunc"
                  c:type="EWebDAVPropstatTraverseFunc"/>
          </parameter>
          <parameter name="func_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3319">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="traverse_mkcol_response"
              c:identifier="e_webdav_session_traverse_mkcol_response"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3277">Traverses a DAV:mkcol-response response and calls @func for each returned DAV:propstat.

The @message, if provided, is used to verify that the response is an XML Content-Type.
It's used to get the request URI as well.</doc>
        <source-position filename="e-webdav-session.h" line="502"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3291">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3279">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="message"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3280">an optional #SoupMessage corresponding to the response, or %NULL</doc>
            <type name="Soup.Message" c:type="const SoupMessage*"/>
          </parameter>
          <parameter name="xml_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3281">a #GByteArray containing DAV:mkcol-response response</doc>
            <array name="GLib.ByteArray" c:type="const GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3282">an #EWebDAVPropstatTraverseFunc function to call for each DAV:propstat in the response</doc>
            <type name="WebDAVPropstatTraverseFunc"
                  c:type="EWebDAVPropstatTraverseFunc"/>
          </parameter>
          <parameter name="func_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3283">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="traverse_multistatus_response"
              c:identifier="e_webdav_session_traverse_multistatus_response"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3241">Traverses a DAV:multistatus response and calls @func for each returned DAV:propstat.

The @message, if provided, is used to verify that the response is a multi-status
and that the Content-Type is properly set. It's used to get a request URI as well.</doc>
        <source-position filename="e-webdav-session.h" line="495"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3255">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3243">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="message"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3244">an optional #SoupMessage corresponding to the response, or %NULL</doc>
            <type name="Soup.Message" c:type="const SoupMessage*"/>
          </parameter>
          <parameter name="xml_data" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3245">a #GByteArray containing DAV:multistatus response</doc>
            <array name="GLib.ByteArray" c:type="const GByteArray*">
              <type name="guint8" c:type="guint8"/>
            </array>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="call"
                     closure="3">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3246">an #EWebDAVPropstatTraverseFunc function to call for each DAV:propstat in the multistatus response</doc>
            <type name="WebDAVPropstatTraverseFunc"
                  c:type="EWebDAVPropstatTraverseFunc"/>
          </parameter>
          <parameter name="func_user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="2">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3247">user data passed to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="unlock_sync"
              c:identifier="e_webdav_session_unlock_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3038">Releases (unlocks) existing lock @lock_token for a resource identified by @uri,
or, in case it's %NULL, on the URI defined in associated #ESource.
The @lock_token is returned from e_webdav_session_lock_sync() and
the @uri should be the same as that used with e_webdav_session_lock_sync().</doc>
        <source-position filename="e-webdav-session.h" line="490"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3051">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3040">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3041">URI to lock, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="lock_token" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3042">token of an existing lock</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3043">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="update_properties_sync"
              c:identifier="e_webdav_session_update_properties_sync"
              version="3.26"
              throws="1">
        <doc xml:space="preserve"
             filename="e-webdav-session.c"
             line="3840">Updates properties (set/remove) on the provided @uri, or, in case it's %NULL,
on the URI defined in associated #ESource, with the @changes. The order
of @changes is significant, unlike on other places.

This function supports only flat properties, those not under other element.
To support more complex property tries use e_webdav_session_proppatch_sync()
directly.</doc>
        <source-position filename="e-webdav-session.h" line="528"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="3856">Whether succeeded.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="webdav" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3842">an #EWebDAVSession</doc>
            <type name="WebDAVSession" c:type="EWebDAVSession*"/>
          </instance-parameter>
          <parameter name="uri"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3843">URI to issue the request for, or %NULL to read from #ESource</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="changes" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3844">a #GSList with request changes</doc>
            <type name="GLib.SList" c:type="const GSList*">
              <type name="WebDAVResource"/>
            </type>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-webdav-session.c"
                 line="3845">optional #GCancellable object, or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="SoupSession" c:type="ESoupSession"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="WebDAVSessionPrivate" c:type="EWebDAVSessionPrivate*"/>
      </field>
    </class>
    <record name="WebDAVSessionClass"
            c:type="EWebDAVSessionClass"
            glib:is-gtype-struct-for="WebDAVSession">
      <source-position filename="e-webdav-session.h" line="334"/>
      <field name="parent_class">
        <type name="SoupSessionClass" c:type="ESoupSessionClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="WebDAVSessionPrivate"
            c:type="EWebDAVSessionPrivate"
            disguised="1">
      <source-position filename="e-webdav-session.h" line="82"/>
    </record>
    <function-macro name="XML_DOCUMENT"
                    c:identifier="E_XML_DOCUMENT"
                    introspectable="0">
      <source-position filename="e-xml-document.h" line="31"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="XML_DOCUMENT_CLASS"
                    c:identifier="E_XML_DOCUMENT_CLASS"
                    introspectable="0">
      <source-position filename="e-xml-document.h" line="34"/>
      <parameters>
        <parameter name="cls">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="XML_DOCUMENT_GET_CLASS"
                    c:identifier="E_XML_DOCUMENT_GET_CLASS"
                    introspectable="0">
      <source-position filename="e-xml-document.h" line="43"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="XmlDocument"
           c:symbol-prefix="xml_document"
           c:type="EXmlDocument"
           version="3.26"
           parent="GObject.Object"
           glib:type-name="EXmlDocument"
           glib:get-type="e_xml_document_get_type"
           glib:type-struct="XmlDocumentClass">
      <doc xml:space="preserve"
           filename="e-xml-document.c"
           line="18">The #EXmlDocument class wraps creation of XML documents.</doc>
      <source-position filename="e-xml-document.h" line="73"/>
      <constructor name="new" c:identifier="e_xml_document_new" version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="86">Creates a new #EXmlDocument with root element @root_element and optionally
also with set default namespace @ns_href.</doc>
        <source-position filename="e-xml-document.h" line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-xml-document.c"
               line="94">a new #EXmlDocument; free it with g_object_unref(),
   when no longer needed.</doc>
          <type name="XmlDocument" c:type="EXmlDocument*"/>
        </return-value>
        <parameters>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="88">default namespace href to use, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="root_element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="89">root element name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_attribute"
              c:identifier="e_xml_document_add_attribute"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="449">Adds a new attribute to the current element.
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.</doc>
        <source-position filename="e-xml-document.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="451">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="452">optional namespace href for the new attribute, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="453">name of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="454">value of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute_double"
              c:identifier="e_xml_document_add_attribute_double"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="512">Adds a new attribute with a double value to the current element.
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.</doc>
        <source-position filename="e-xml-document.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="514">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="515">optional namespace href for the new attribute, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="516">name of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="517">double value of the attribute</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute_int"
              c:identifier="e_xml_document_add_attribute_int"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="481">Adds a new attribute with an integer value to the current element.
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.</doc>
        <source-position filename="e-xml-document.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="483">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="484">optional namespace href for the new attribute, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="485">name of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="486">integer value of the attribute</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute_time"
              c:identifier="e_xml_document_add_attribute_time"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="543">Adds a new attribute with a time_t value in ISO 8601 format to the current element.
The format is "YYYY-MM-DDTHH:MM:SSZ".
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.</doc>
        <source-position filename="e-xml-document.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="545">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="546">optional namespace href for the new attribute, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="547">name of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="548">time_t value of the attribute</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_attribute_time_ical"
              c:identifier="e_xml_document_add_attribute_time_ical"
              version="3.32">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="579">Adds a new attribute with a time_t value in iCalendar format to the current element.
The format is "YYYYMMDDTHHMMSSZ".
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.</doc>
        <source-position filename="e-xml-document.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="581">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="582">optional namespace href for the new attribute, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="583">name of the attribute</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="584">time_t value of the attribute</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_empty_element"
              c:identifier="e_xml_document_add_empty_element"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="422">Adds an empty element, which is an element with no attribute and no value.

It's the same as calling e_xml_document_start_element() immediately
followed by e_xml_document_end_element().</doc>
        <source-position filename="e-xml-document.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="424">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="425">optional namespace href for the new element, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="426">name of the new element</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_namespaces"
              c:identifier="e_xml_document_add_namespaces"
              version="3.26"
              introspectable="0">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="190">Adds one or more namespaces to @xml, which can be referenced
later by @ns_href. The caller should take care that neither
used @ns_prefix, nor @ns_href, is already used by @xml.</doc>
        <source-position filename="e-xml-document.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="192">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_prefix" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="193">namespace prefix to use for this namespace</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="ns_href" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="194">namespace href</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="195">%NULL-terminated pairs of (ns_prefix, ns_href)</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="end_element"
              c:identifier="e_xml_document_end_element"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="402">This is a pair function for e_xml_document_start_element() and
e_xml_document_start_text_element(), which changes current
element to the parent of that element.</doc>
        <source-position filename="e-xml-document.h" line="93"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="404">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_content"
              c:identifier="e_xml_document_get_content"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="146">Gets content of the @xml as string. The string is nul-terminated, but
if @out_length is also provided, then it doesn't contain this additional
nul character.</doc>
        <source-position filename="e-xml-document.h" line="80"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-xml-document.c"
               line="155">Content of the @xml as newly allocated string.
   Free it with g_free(), when no longer needed.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="148">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="const EXmlDocument*"/>
          </instance-parameter>
          <parameter name="out_length"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     nullable="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="149">optional return location for length of the content, or %NULL</doc>
            <type name="gsize" c:type="gsize*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_xmldoc"
              c:identifier="e_xml_document_get_xmldoc"
              version="3.26">
        <source-position filename="e-xml-document.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-document.c"
               line="134">Underlying #xmlDocPtr.</doc>
          <type name="libxml2.Doc" c:type="xmlDoc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="132">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="start_element"
              c:identifier="e_xml_document_start_element"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="342">Starts a new non-text element as a child of the current element.
Each such call should be ended with corresponding e_xml_document_end_element().
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.

To start a text node use e_xml_document_start_text_element().</doc>
        <source-position filename="e-xml-document.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="344">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="345">optional namespace href for the new element, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="346">name of the new element</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_text_element"
              c:identifier="e_xml_document_start_text_element"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="372">Starts a new text element as a child of the current element.
Each such call should be ended with corresponding e_xml_document_end_element().
Use %NULL @ns_href, to use the default namespace, otherwise either previously
added namespace with the same href from e_xml_document_add_namespaces() is picked,
or a new namespace with generated prefix is added.

To start a non-text node use e_xml_document_start_element().</doc>
        <source-position filename="e-xml-document.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="374">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="ns_href"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="375">optional namespace href for the new element, or %NULL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="376">name of the new element</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_base64"
              c:identifier="e_xml_document_write_base64"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="664">Writes @value of length @len, encoded to base64, as content of the current element.</doc>
        <source-position filename="e-xml-document.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="666">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="667">value to write as the content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="668">length of @value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_buffer"
              c:identifier="e_xml_document_write_buffer"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="740">Writes @value of length @len as content of the current element.</doc>
        <source-position filename="e-xml-document.h" line="133"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="742">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="743">value to write as the content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="len" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="744">length of @value</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_double"
              c:identifier="e_xml_document_write_double"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="641">Writes @value as content of the current element.</doc>
        <source-position filename="e-xml-document.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="643">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="644">value to write as the content</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_int"
              c:identifier="e_xml_document_write_int"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="618">Writes @value as content of the current element.</doc>
        <source-position filename="e-xml-document.h" line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="620">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="621">value to write as the content</doc>
            <type name="gint64" c:type="gint64"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_string"
              c:identifier="e_xml_document_write_string"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="718">Writes @value as content of the current element.</doc>
        <source-position filename="e-xml-document.h" line="131"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="720">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="721">value to write as the content</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="write_time"
              c:identifier="e_xml_document_write_time"
              version="3.26">
        <doc xml:space="preserve"
             filename="e-xml-document.c"
             line="690">Writes @value in ISO 8601 format as content of the current element.
The format is "YYYY-MM-DDTHH:MM:SSZ".</doc>
        <source-position filename="e-xml-document.h" line="129"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="692">an #EXmlDocument</doc>
            <type name="XmlDocument" c:type="EXmlDocument*"/>
          </instance-parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="e-xml-document.c"
                 line="693">value to write as the content</doc>
            <type name="glong" c:type="time_t"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent" readable="0" private="1">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv" readable="0" private="1">
        <type name="XmlDocumentPrivate" c:type="EXmlDocumentPrivate*"/>
      </field>
    </class>
    <record name="XmlDocumentClass"
            c:type="EXmlDocumentClass"
            glib:is-gtype-struct-for="XmlDocument">
      <source-position filename="e-xml-document.h" line="73"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="reserved">
        <array zero-terminated="0" fixed-size="10">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="XmlDocumentPrivate"
            c:type="EXmlDocumentPrivate"
            disguised="1">
      <source-position filename="e-xml-document.h" line="52"/>
    </record>
    <record name="XmlHash" c:type="EXmlHash" disguised="1">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="172">A hash table representation of an XML file.</doc>
      <source-position filename="e-xml-hash-utils.h" line="67"/>
    </record>
    <callback name="XmlHashFunc" c:type="EXmlHashFunc">
      <source-position filename="e-xml-hash-utils.h" line="60"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="XmlHashRemoveFunc" c:type="EXmlHashRemoveFunc">
      <source-position filename="e-xml-hash-utils.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="key" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <enumeration name="XmlHashStatus" c:type="EXmlHashStatus">
      <source-position filename="e-xml-hash-utils.h" line="58"/>
      <member name="same" value="0" c:identifier="E_XMLHASH_STATUS_SAME">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.h"
             line="50">The compared values are the same.</doc>
      </member>
      <member name="different"
              value="1"
              c:identifier="E_XMLHASH_STATUS_DIFFERENT">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.h"
             line="51">The compared values are different.</doc>
      </member>
      <member name="not_found"
              value="2"
              c:identifier="E_XMLHASH_STATUS_NOT_FOUND">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.h"
             line="52">The key to compare against was not found.</doc>
      </member>
    </enumeration>
    <enumeration name="XmlHashType" c:type="EXmlHashType">
      <source-position filename="e-xml-hash-utils.h" line="39"/>
      <member name="object_uid"
              value="0"
              c:identifier="E_XML_HASH_TYPE_OBJECT_UID">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.h"
             line="33">Use the object UID as the hash key.</doc>
      </member>
      <member name="property"
              value="1"
              c:identifier="E_XML_HASH_TYPE_PROPERTY">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.h"
             line="34">Use the property name as the hash key.</doc>
      </member>
    </enumeration>
    <function name="async_closure_callback"
              c:identifier="e_async_closure_callback"
              moved-to="AsyncClosure.callback"
              version="3.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1836">Pass this function as the #GAsyncReadyCallback argument of an asynchronous
function, and the #EAsyncClosure as the data argument.

This causes e_async_closure_wait() to terminate and return @result.</doc>
      <source-position filename="e-data-server-util.h" line="151"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1838">a #GObject or %NULL, it is not used by the function at all</doc>
          <type name="GObject.Object" c:type="GObject*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1839">a #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
        <parameter name="closure"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1840">an #EAsyncClosure</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="async_closure_new"
              c:identifier="e_async_closure_new"
              moved-to="AsyncClosure.new"
              version="3.6"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1733">Creates a new #EAsyncClosure for use with asynchronous functions.</doc>
      <source-position filename="e-data-server-util.h" line="148"/>
      <return-value>
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1738">a new #EAsyncClosure</doc>
        <type name="AsyncClosure" c:type="EAsyncClosure*"/>
      </return-value>
    </function>
    <function name="binding_bind_property"
              c:identifier="e_binding_bind_property"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1440">Thread safe variant of g_object_bind_property(). See its documentation
for more information on arguments and return value.</doc>
      <source-position filename="e-data-server-util.h" line="106"/>
      <return-value transfer-ownership="none">
        <type name="GObject.Binding" c:type="GBinding*"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1442">the source #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="source_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1443">the property on @source to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1444">the target #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="target_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1445">the property on @target to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1446">flags to pass to #GBinding</doc>
          <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_bind_property_full"
              c:identifier="e_binding_bind_property_full"
              shadowed-by="binding_bind_property_with_closures"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1465">Thread safe variant of g_object_bind_property_full(). See its documentation
for more information on arguments and return value.</doc>
      <source-position filename="e-data-server-util.h" line="111"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1484">the #GBinding instance representing the
  binding between the two #GObject instances. The binding is released
  whenever the #GBinding reference count reaches zero.</doc>
        <type name="GObject.Binding" c:type="GBinding*"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1467">the source #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="source_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1468">the property on @source to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1469">the target #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="target_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1470">the property on @target to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1471">flags to pass to #GBinding</doc>
          <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
        </parameter>
        <parameter name="transform_to"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1472">the transformation function
  from the @source to the @target, or %NULL to use the default</doc>
          <type name="GObject.BindingTransformFunc"
                c:type="GBindingTransformFunc"/>
        </parameter>
        <parameter name="transform_from"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="notified"
                   closure="7"
                   destroy="8">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1474">the transformation function
  from the @target to the @source, or %NULL to use the default</doc>
          <type name="GObject.BindingTransformFunc"
                c:type="GBindingTransformFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1476">custom data to be passed to the transformation functions,
  or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify" transfer-ownership="none" scope="async">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1478">function to be called when disposing the binding, to free the
  resources used by the transformation functions</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_bind_property_with_closures"
              c:identifier="e_binding_bind_property_with_closures"
              shadows="binding_bind_property_full"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1505">Thread safe variant of g_object_bind_property_with_closures(). See its
documentation for more information on arguments and return value.</doc>
      <source-position filename="e-data-server-util.h" line="120"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1520">the #GBinding instance representing the
  binding between the two #GObject instances. The binding is released
  whenever the #GBinding reference count reaches zero.</doc>
        <type name="GObject.Binding" c:type="GBinding*"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1507">the source #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="source_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1508">the property on @source to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="target" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1509">the target #GObject</doc>
          <type name="GObject.Object" c:type="gpointer"/>
        </parameter>
        <parameter name="target_property" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1510">the property on @target to bind</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="flags" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1511">flags to pass to #GBinding</doc>
          <type name="GObject.BindingFlags" c:type="GBindingFlags"/>
        </parameter>
        <parameter name="transform_to" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1512">a #GClosure wrapping the transformation function
  from the @source to the @target, or %NULL to use the default</doc>
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
        <parameter name="transform_from" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1514">a #GClosure wrapping the transformation function
  from the @target to the @source, or %NULL to use the default</doc>
          <type name="GObject.Closure" c:type="GClosure*"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_transform_enum_nick_to_value"
              c:identifier="e_binding_transform_enum_nick_to_value"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1578">Transforms an enumeration nickname to its corresponding value.</doc>
      <source-position filename="e-data-server-util.h" line="134"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1587">%TRUE if the enum nickname has a corresponding value</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="binding" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1580">a #GBinding</doc>
          <type name="GObject.Binding" c:type="GBinding*"/>
        </parameter>
        <parameter name="source_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1581">a #GValue of type #G_TYPE_STRING</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="target_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1582">a #GValue whose type is derived from #G_TYPE_ENUM</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="not_used"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1583">not used</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="binding_transform_enum_value_to_nick"
              c:identifier="e_binding_transform_enum_value_to_nick"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1539">Transforms an enumeration value to its corresponding nickname.</doc>
      <source-position filename="e-data-server-util.h" line="129"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1548">%TRUE if the enum value has a corresponding nickname</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="binding" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1541">a #GBinding</doc>
          <type name="GObject.Binding" c:type="GBinding*"/>
        </parameter>
        <parameter name="source_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1542">a #GValue whose type is derived from #G_TYPE_ENUM</doc>
          <type name="GObject.Value" c:type="const GValue*"/>
        </parameter>
        <parameter name="target_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1543">a #GValue of type #G_TYPE_STRING</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="not_used"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1544">not used</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_add" c:identifier="e_categories_add">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="628">Adds a new category, with its corresponding icon, to the
configuration database.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="36"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="630">name of category to add.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="unused" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="631">DEPRECATED! associated color. DEPRECATED!</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="icon_file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="632">full path of the icon associated to the category.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="searchable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="633">whether the category can be used for searching in the GUI.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_dup_icon_file_for"
              c:identifier="e_categories_dup_icon_file_for"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="757">Gets the icon file associated with the given category and returns a copy of
it.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="44"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-categories.c"
             line="766">icon file name; free with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="759">category to retrieve the icon file for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_dup_list"
              c:identifier="e_categories_dup_list"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="590">Returns a sorted list of all the category names currently configured.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="33"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-categories.c"
             line="597">a sorted #GList containing
the names of the categories. The list should be freed using g_list_free(),
and the names of the categories should be freed using g_free(). Everything
can be freed simultaneously using g_list_free_full().</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="categories_exist" c:identifier="e_categories_exist">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="691">Checks whether the given category is available in the configuration.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-categories.c"
             line="699">%TRUE if the category is available, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="693">category to be searched.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_get_icon_file_for"
              c:identifier="e_categories_get_icon_file_for"
              deprecated="1"
              deprecated-version="3.16">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="720">Gets the icon file associated with the given category.

This function is mostly thread safe, but as the icon file name is not
copied, it may be freed by another thread after being returned by this
function. Use e_categories_dup_icon_file_for() instead.</doc>
      <doc-deprecated xml:space="preserve">This function is not entirely thread safe. Use
e_categories_dup_icon_file_for() instead.</doc-deprecated>
      <source-position filename="e-categories.h" line="43"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-categories.c"
             line="733">icon file name.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="722">category to retrieve the icon file for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_get_list"
              c:identifier="e_categories_get_list"
              deprecated="1"
              deprecated-version="3.16">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="549">Returns a sorted list of all the category names currently configured.

This function is mostly thread safe, but as the category names are not
copied, they may be freed by another thread after being returned by this
function. Use e_categories_dup_list() instead.</doc>
      <doc-deprecated xml:space="preserve">This function is not entirely thread safe. Use
e_categories_dup_list() instead.</doc-deprecated>
      <source-position filename="e-categories.h" line="31"/>
      <return-value transfer-ownership="container">
        <doc xml:space="preserve"
             filename="e-categories.c"
             line="558">a sorted GList containing
the names of the categories. The list should be freed using g_list_free(),
but the names of the categories should not be touched at all, they are
internal strings.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </return-value>
    </function>
    <function name="categories_is_searchable"
              c:identifier="e_categories_is_searchable">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="827">Gets whether the given calendar is to be used for searches in the GUI.

This function is thread safe.

Return value; %TRUE% if the category is searchable, %FALSE% if not.</doc>
      <source-position filename="e-categories.h" line="47"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="829">category name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_register_change_listener"
              c:identifier="e_categories_register_change_listener"
              version="2.24">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="860">Registers callback to be called on change of any category.
Pair listener and user_data is used to distinguish between listeners.
Listeners can be unregistered with @e_categories_unregister_change_listener.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="49"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="listener"
                   transfer-ownership="none"
                   scope="async"
                   closure="1">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="862">the callback to be called on any category change.</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="863">used data passed to the @listener when called.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_remove" c:identifier="e_categories_remove">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="659">Removes the given category from the configuration.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="40"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="661">category to be removed.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_set_icon_file_for"
              c:identifier="e_categories_set_icon_file_for">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="793">Sets the icon file associated with the given category.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="45"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="category" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="795">category to set the icon file for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="icon_file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="796">icon file.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="categories_unregister_change_listener"
              c:identifier="e_categories_unregister_change_listener"
              version="2.24">
      <doc xml:space="preserve"
           filename="e-categories.c"
           line="887">Removes previously registered callback from the list of listeners on changes.
If it was not registered, then does nothing.

This function is thread safe.</doc>
      <source-position filename="e-categories.h" line="52"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="listener"
                   transfer-ownership="none"
                   scope="async"
                   closure="1">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="889">Callback to be removed.</doc>
          <type name="GObject.Callback" c:type="GCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-categories.c"
               line="890">User data as passed with call to @e_categories_register_change_listener.</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="collator_error_quark"
              c:identifier="e_collator_error_quark"
              moved-to="Collator.error_quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="data_server_util_get_dbus_call_timeout"
              c:identifier="e_data_server_util_get_dbus_call_timeout"
              version="3.0"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2143">Returns the value set by e_data_server_util_set_dbus_call_timeout().</doc>
      <doc-deprecated xml:space="preserve">This value is not used anywhere.</doc-deprecated>
      <source-position filename="e-data-server-util.h" line="251"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2148">the D-Bus call timeout in milliseconds</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="data_server_util_set_dbus_call_timeout"
              c:identifier="e_data_server_util_set_dbus_call_timeout"
              version="3.0"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2120">Sets default timeout, in milliseconds, for calls of g_dbus_proxy_call()
family functions.

-1 means the default value as set by D-Bus itself.
G_MAXINT means no timeout at all.

Default value is set also by configure option --with-dbus-call-timeout=ms
and -1 is used when not set.</doc>
      <doc-deprecated xml:space="preserve">This value is not used anywhere.</doc-deprecated>
      <source-position filename="e-data-server-util.h" line="253"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="timeout_msec" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2122">default timeout for D-Bus calls in miliseconds</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log"
              c:identifier="e_debug_log"
              version="2.32"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="59">Records debug information for the given @domain, if enabled, or always,
when @is_milestone is set to TRUE.</doc>
      <source-position filename="e-debug-log.h" line="53"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="is_milestone" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="61">the debug information is a milestone</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="62">for which domain the debug information belongs</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="63">print format</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="64">arguments for the format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log_clear"
              c:identifier="e_debug_log_clear"
              version="2.32">
      <source-position filename="e-debug-log.h" line="75"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="debug_log_disable_domains"
              c:identifier="e_debug_log_disable_domains"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="313">Disables all domains from the @domains array.</doc>
      <source-position filename="e-debug-log.h" line="65"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domains" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="315">an array of domains to disable</doc>
          <array length="1" zero-terminated="0" c:type="const gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="n_domains" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="316">legth of the @domains array</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log_dump"
              c:identifier="e_debug_log_dump"
              version="2.32"
              throws="1">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="555">Saves current log information to the given @filename.</doc>
      <source-position filename="e-debug-log.h" line="68"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-debug-log.c"
             line="562">whether succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="557">a filename to save logged information to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log_dump_to_dated_file"
              c:identifier="e_debug_log_dump_to_dated_file"
              version="2.32"
              throws="1">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="626">Saves current log information to a file "e-debug-log-YYYY-MM-DD-HH-mm-ss.txt"
in the user's HOME directory.</doc>
      <source-position filename="e-debug-log.h" line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-debug-log.c"
             line="633">whether succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
    </function>
    <function name="debug_log_enable_domains"
              c:identifier="e_debug_log_enable_domains"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="273">Enables all domains from the @domains array.</doc>
      <source-position filename="e-debug-log.h" line="63"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domains" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="275">an array of domains to enable</doc>
          <array length="1" zero-terminated="0" c:type="const gchar**">
            <type name="utf8" c:type="gchar*"/>
          </array>
        </parameter>
        <parameter name="n_domains" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="276">legth of the @domains array</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log_get_max_lines"
              c:identifier="e_debug_log_get_max_lines"
              version="2.32">
      <source-position filename="e-debug-log.h" line="72"/>
      <return-value transfer-ownership="none">
        <type name="gint" c:type="gint"/>
      </return-value>
    </function>
    <function name="debug_log_is_domain_enabled"
              c:identifier="e_debug_log_is_domain_enabled"
              version="2.32">
      <source-position filename="e-debug-log.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-debug-log.c"
             line="357">whether the given log domain is enabled, which means
  that any logging to this domain is recorded.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="355">a log domain</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log_load_configuration"
              c:identifier="e_debug_log_load_configuration"
              version="2.32"
              throws="1">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="207">Loads configuration for the logging from the given @filename.</doc>
      <source-position filename="e-debug-log.h" line="61"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-debug-log.c"
             line="214">whether succeeded</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="209">a configuration file name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_log_set_max_lines"
              c:identifier="e_debug_log_set_max_lines"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="669">Limits how many lines the log can have.</doc>
      <source-position filename="e-debug-log.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="num_lines" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="671">number of lines</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="debug_logv"
              c:identifier="e_debug_logv"
              version="2.32"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-debug-log.c"
           line="153">Records debug information for the given @domain, if enabled, or always,
when @is_milestone is set to TRUE.</doc>
      <source-position filename="e-debug-log.h" line="57"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="is_milestone" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="155">the debug information is a milestone</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="156">for which domain the debug information belongs</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="157">print format</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-debug-log.c"
               line="158">arguments for the format</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="ecancellablelocks">
      <doc xml:space="preserve"
           filename="e-cancellable-locks.c"
           line="23">An #ECancellableMutex and an #ECancellableRecMutex are similar to
GLib's #GMutex and #GRecMutex, with one exception, their &lt;emphasis&gt;lock&lt;/emphasis&gt;
function takes also a @GCancellable instance, thus the waiting for a lock
can be cancelled any time.</doc>
    </docsection>
    <function name="eds_check_version"
              c:identifier="eds_check_version"
              version="2.24">
      <doc xml:space="preserve"
           filename="eds-version.c"
           line="25">Checks that the Evolution-Data-Server library in use is compatible with
the given version.  Generally you would pass in the constants
#EDS_MAJOR_VERSION, #EDS_MINOR_VERSION, #EDS_MICRO_VERSION as the three
arguments to this function.  That produces a check that the library in
use is compatible with the version of Evolution-Data-Server the
application or module was compiled against.</doc>
      <source-position filename="eds-version.h" line="109"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="eds-version.c"
             line="38">%NULL if the Evolution-Data-Server library is compatible with
the given version, or a string describing the version mismatch.  The
returned string is owned by libedataserver and must not be modified or
freed.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="required_major" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="eds-version.c"
               line="27">the required major version</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="required_minor" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="eds-version.c"
               line="28">the required minor version</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="required_micro" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="eds-version.c"
               line="29">the required micro version</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_from_string"
              c:identifier="e_enum_from_string"
              version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1617">Fetches the appropriate enumeration value for @string in the given
enum type @type and stores the result in @enum_value</doc>
      <source-position filename="e-data-server-util.h" line="140"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1626">%TRUE if the string was a valid name or nick
       for the given @type, %FALSE if the conversion failed.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1619">The enum type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1620">The string containing the enum value or nick</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="enum_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1621">A return location to store the result</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="enum_to_string"
              c:identifier="e_enum_to_string"
              version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1666">Converts an enum value to a string using strings from the GType system.</doc>
      <source-position filename="e-data-server-util.h" line="143"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1673">the string representing @eval</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="enum_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1668">An enum type</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="enum_value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1669">The enum value to convert</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <docsection name="esecretstore">
      <doc xml:space="preserve"
           filename="e-secret-store.c"
           line="18">The e-secret-store API provides an interface to store,
lookup and delete secrets from the keyring.</doc>
    </docsection>
    <function name="file_recursive_delete"
              c:identifier="e_file_recursive_delete"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1364">Asynchronously deletes @file.  If @file is a directory, its contents
are deleted recursively before @file itself is deleted.  The recursive
delete operation will stop on the first error.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object before the operation finishes.

When the operation is finished, @callback will be called.  You can then
call e_file_recursive_delete_finish() to get the result of the operation.</doc>
      <source-position filename="e-data-server-util.h" line="97"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1366">a #GFile to delete</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="io_priority" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1367">the I/O priority of the request</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1368">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="4">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1369">a #GAsyncReadyCallback to call when the request is satisfied</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1370">data to pass to the callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_recursive_delete_finish"
              c:identifier="e_file_recursive_delete_finish"
              version="3.6"
              throws="1">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1408">Finishes the operation started with e_file_recursive_delete().

If the operation was cancelled, the error #G_IO_ERROR_CANCELLED will be
returned.</doc>
      <source-position filename="e-data-server-util.h" line="102"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1419">%TRUE if the file was deleted, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1410">a #GFile to delete</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="result" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1411">a #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
      </parameters>
    </function>
    <function name="file_recursive_delete_sync"
              c:identifier="e_file_recursive_delete_sync"
              version="3.6"
              throws="1">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1277">Deletes @file.  If @file is a directory, its contents are deleted
recursively before @file itself is deleted.  The recursive delete
operation will stop on the first error.

If @cancellable is not %NULL, then the operation can be cancelled
by triggering the cancellable object from another thread.  If the
operation was cancelled, the error #G_IO_ERROR_CANCELLED will be
returned.</doc>
      <source-position filename="e-data-server-util.h" line="94"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1292">%TRUE if the file was deleted, %FALSE otherwise</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="file" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1279">a #GFile to delete</doc>
          <type name="Gio.File" c:type="GFile*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1280">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_make_safe" c:identifier="e_filename_make_safe">
      <source-position filename="e-data-server-util.h" line="68"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="filename_mkdir_encoded"
              c:identifier="e_filename_mkdir_encoded"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="948">Creates a local path constructed from @basepath / @fileprefix + "-" + @filename,
and makes sure the path @basepath exists. If creation of
the path fails, then NULL is returned.</doc>
      <source-position filename="e-data-server-util.h" line="69"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="960">Full local path like g_build_filename() except that @fileprefix
and @filename are encoded to create a proper file elements for
a file system. Free returned pointer with g_free().</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="basepath" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="950">base path of a file name; this is left unchanged</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fileprefix" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="951">prefix for the filename; this is encoded</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="952">file name to use; this is encoded; can be %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="fileindex" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="953">used when @filename is NULL, then the filename
       is generated as "file" + fileindex</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="flag_new"
              c:identifier="e_flag_new"
              moved-to="Flag.new"
              version="1.12"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-flag.c"
           line="35">Creates a new #EFlag object.  It is initially unset.</doc>
      <source-position filename="e-flag.h" line="43"/>
      <return-value>
        <doc xml:space="preserve"
             filename="e-flag.c"
             line="40">a new #EFlag</doc>
        <type name="Flag" c:type="EFlag*"/>
      </return-value>
    </function>
    <function name="free_form_exp_to_sexp"
              c:identifier="e_free_form_exp_to_sexp"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-free-form-exp.c"
           line="262">Converts the @free_form_exp to an S-Expression using the S-Expression
builders defined in the @symbols. The @symbols should have one symbol
with an empty string as its name, which is used for words which do not
have a symbol name prefix.

The @symbols is a NULL-terminated array of known symbols. The NULL should
be set for the symbol's name.</doc>
      <source-position filename="e-free-form-exp.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-free-form-exp.c"
             line="275">converted @free_form_exp into S-Expression, %NULL on error.
   Free the returned string with a g_free(), when done with it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="free_form_exp" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-free-form-exp.c"
               line="264">a Free Form Expression</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="symbols" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-free-form-exp.c"
               line="265">known symbols, which can be used in the Free From Expression</doc>
          <type name="FreeFormExpSymbol" c:type="const EFreeFormExpSymbol*"/>
        </parameter>
      </parameters>
    </function>
    <function name="get_user_cache_dir"
              c:identifier="e_get_user_cache_dir"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="48">Returns a base directory in which to store user-specific,
non-essential cached data for Evolution or Evolution-Data-Server.

The returned string is owned by libedataserver and must not be
modified or freed.</doc>
      <source-position filename="e-data-server-util.h" line="40"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="57">base directory for user-specific, non-essential data</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_user_config_dir"
              c:identifier="e_get_user_config_dir"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="75">Returns a base directory in which to store user-specific configuration
information for Evolution or Evolution-Data-Server.

The returned string is owned by libedataserver and must not be
modified or freed.</doc>
      <source-position filename="e-data-server-util.h" line="41"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="84">base directory for user-specific configuration information</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="get_user_data_dir"
              c:identifier="e_get_user_data_dir"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="102">Returns a base directory in which to store user-specific data for
Evolution or Evolution-Data-Server.

The returned string is owned by libedataserver and must not be
modified or freed.</doc>
      <source-position filename="e-data-server-util.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="111">base directory for user-specific data</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
    </function>
    <function name="localtime_with_offset"
              c:identifier="e_localtime_with_offset">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="2075">Converts the calendar time time representation @tt to a broken-down
time representation, store in @tm, and provides the offset in
seconds from UTC time, stored in @offset.</doc>
      <source-position filename="e-time-utils.h" line="90"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="tt" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2077">The #time_t to convert.</doc>
          <type name="glong" c:type="time_t"/>
        </parameter>
        <parameter name="tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2078">The #tm to store the result in.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
        <parameter name="offset" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2079">The #int to store the offset in.</doc>
          <type name="gint" c:type="gint*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_alloc"
              c:identifier="e_memchunk_alloc"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="95">Allocate a new atom size block of memory from an #EMemChunk.
Free the returned atom with e_memchunk_free().</doc>
      <source-position filename="e-memory.h" line="37"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-memory.c"
             line="102">an allocated block of memory</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="97">an #EMemChunk</doc>
          <type name="MemChunk" c:type="EMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_alloc0"
              c:identifier="e_memchunk_alloc0"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="132">Allocate a new atom size block of memory from an #EMemChunk,
and fill the memory with zeros.  Free the returned atom with
e_memchunk_free().</doc>
      <source-position filename="e-memory.h" line="38"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-memory.c"
             line="140">an allocated block of memory</doc>
        <type name="gpointer" c:type="gpointer"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="134">an #EMemChunk</doc>
          <type name="MemChunk" c:type="EMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_clean"
              c:identifier="e_memchunk_clean"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="235">Scan all empty blocks and check for blocks which can be free'd
back to the system.

This routine may take a while to run if there are many allocated
memory blocks (if the total number of allocations is many times
greater than atomcount).</doc>
      <source-position filename="e-memory.h" line="42"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="237">an #EMemChunk</doc>
          <type name="MemChunk" c:type="EMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_destroy"
              c:identifier="e_memchunk_destroy"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="312">Free the memchunk header, and all associated memory.</doc>
      <source-position filename="e-memory.h" line="43"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="314">an #EMemChunk</doc>
          <type name="MemChunk" c:type="EMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_empty"
              c:identifier="e_memchunk_empty"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="181">Clean out the memchunk buffers.  Marks all allocated memory as free blocks,
but does not give it back to the system.  Can be used if the memchunk
is to be used repeatedly.</doc>
      <source-position filename="e-memory.h" line="41"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="183">an #EMemChunk</doc>
          <type name="MemChunk" c:type="EMemChunk*"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_free"
              c:identifier="e_memchunk_free"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="153">Free a single atom back to the free pool of atoms in the given
memchunk.</doc>
      <source-position filename="e-memory.h" line="39"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="memchunk" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="155">an #EMemChunk</doc>
          <type name="MemChunk" c:type="EMemChunk*"/>
        </parameter>
        <parameter name="mem"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="156">address of atom to free</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="memchunk_new"
              c:identifier="e_memchunk_new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-memory.c"
           line="67">Create a new #EMemChunk header.  Memchunks are an efficient way to
allocate and deallocate identical sized blocks of memory quickly, and
space efficiently.

e_memchunks are effectively the same as gmemchunks, only faster (much),
and they use less memory overhead for housekeeping.</doc>
      <source-position filename="e-memory.h" line="35"/>
      <return-value>
        <doc xml:space="preserve"
             filename="e-memory.c"
             line="79">a new #EMemChunk</doc>
        <type name="MemChunk" c:type="EMemChunk*"/>
      </return-value>
      <parameters>
        <parameter name="atomcount" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="69">the number of atoms stored in a single malloc'd block of memory</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="atomsize" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-memory.c"
               line="70">the size of each allocation</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="mktime_utc" c:identifier="e_mktime_utc">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="2043">Like mktime(3), but assumes UTC instead of local timezone.</doc>
      <source-position filename="e-time-utils.h" line="86"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="2049">The calendar time representation of @tm.</doc>
        <type name="glong" c:type="time_t"/>
      </return-value>
      <parameters>
        <parameter name="tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2045">The #tm to convert to a calendar time representation.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
      </parameters>
    </function>
    <function-macro name="named_timeout_add"
                    c:identifier="e_named_timeout_add"
                    version="3.12"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2633">Similar to g_timeout_add(), but also names the #GSource for use in
debugging and profiling.  The name is formed from @function and the
&lt;literal&gt;PACKAGE&lt;/literal&gt; definintion from a &amp;lt;config.h&amp;gt; file.</doc>
      <source-position filename="e-data-server-util.h" line="207"/>
      <parameters>
        <parameter name="interval">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2635">the time between calls to the function, in milliseconds
           (1/1000ths of a second)</doc>
        </parameter>
        <parameter name="function">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2637">function to call</doc>
        </parameter>
        <parameter name="data">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2638">data to pass to @function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="named_timeout_add_full"
                    c:identifier="e_named_timeout_add_full"
                    version="3.12"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2649">Similar to g_timeout_add_full(), but also names the #GSource for use
in debugging and profiling.  The name is formed from @function and the
&lt;literal&gt;PACKAGE&lt;/literal&gt; definition from a &amp;lt;config.h&amp;gt; file.</doc>
      <source-position filename="e-data-server-util.h" line="213"/>
      <parameters>
        <parameter name="priority">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2651">the priority of the timeout source, typically in the
           range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH</doc>
        </parameter>
        <parameter name="interval">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2653">the time between calls to the function, in milliseconds
           (1/1000ths of a second)</doc>
        </parameter>
        <parameter name="function">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2655">function to call</doc>
        </parameter>
        <parameter name="data">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2656">data to pass to @function</doc>
        </parameter>
        <parameter name="notify">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2657">function to call when the timeout is removed, or %NULL</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="named_timeout_add_seconds"
                    c:identifier="e_named_timeout_add_seconds"
                    version="3.12"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2668">Similar to g_timeout_add_seconds(), but also names the #GSource for use
in debugging and profiling.  The name is formed from @function and the
&lt;literal&gt;PACKAGE&lt;/literal&gt; definition from a &amp;lt;config.h&amp;gt; file.</doc>
      <source-position filename="e-data-server-util.h" line="219"/>
      <parameters>
        <parameter name="interval">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2670">the time between calls to the function, in seconds</doc>
        </parameter>
        <parameter name="function">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2671">function to call</doc>
        </parameter>
        <parameter name="data">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2672">data to pass to @function</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="named_timeout_add_seconds_full"
                    c:identifier="e_named_timeout_add_seconds_full"
                    version="3.12"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2683">Similar to g_timeout_add_seconds_full(), but also names the #GSource for
use in debugging and profiling.  The name is formed from @function and the
&lt;literal&gt;PACKAGE&lt;/literal&gt; definition from a &amp;lt;config.h&amp;gt; file.</doc>
      <source-position filename="e-data-server-util.h" line="225"/>
      <parameters>
        <parameter name="priority">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2685">the priority of the timeout source, typically in the
           range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH</doc>
        </parameter>
        <parameter name="interval">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2687">the time between calls to the function, in seconds</doc>
        </parameter>
        <parameter name="function">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2688">function to call</doc>
        </parameter>
        <parameter name="data">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2689">data to pass to @function</doc>
        </parameter>
        <parameter name="notify">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2690">function to call when the timeout is removed, or %NULL</doc>
        </parameter>
      </parameters>
    </function-macro>
    <function name="oauth2_service_util_set_to_form"
              c:identifier="e_oauth2_service_util_set_to_form"
              moved-to="OAuth2Service.util_set_to_form"
              version="3.28">
      <doc xml:space="preserve"
           filename="e-oauth2-service.c"
           line="1544">Sets @value for @name to @form. The @form should be
the one used in e_oauth2_service_prepare_authentication_uri_query(),
e_oauth2_service_prepare_get_token_form() or
e_oauth2_service_prepare_refresh_token_form().

If the @value is %NULL, then the property named @name is removed
from the @form instead.</doc>
      <source-position filename="e-oauth2-service.h" line="246"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="form" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1546">a #GHashTable</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1547">a property name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1548">a property value</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="oauth2_service_util_take_to_form"
              c:identifier="e_oauth2_service_util_take_to_form"
              moved-to="OAuth2Service.util_take_to_form"
              version="3.28">
      <doc xml:space="preserve"
           filename="e-oauth2-service.c"
           line="1574">Takes ownership of @value and sets it for @name to @form. The @value
will be freed with g_free(), when no longer needed. The @form should be
the one used in e_oauth2_service_prepare_authentication_uri_query(),
e_oauth2_service_prepare_get_token_form() or
e_oauth2_service_prepare_refresh_token_form().

If the @value is %NULL, then the property named @name is removed
from the @form instead.</doc>
      <source-position filename="e-oauth2-service.h" line="249"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="form" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1576">a #GHashTable</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1577">a property name</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="value"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-oauth2-service.c"
               line="1578">a property value</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="operation_pool_new"
              c:identifier="e_operation_pool_new"
              moved-to="OperationPool.new"
              version="3.2"
              introspectable="0">
      <source-position filename="e-operation-pool.h" line="39"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-operation-pool.c"
             line="36">a new #EOperationPool with the given settings.
  Free it with e_operation_pool_free(), when no longer needed.</doc>
        <type name="OperationPool" c:type="EOperationPool*"/>
      </return-value>
      <parameters>
        <parameter name="max_threads" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-operation-pool.c"
               line="32">Maximum number of threads for this pool</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="thread_func" transfer-ownership="none" closure="2">
          <doc xml:space="preserve"
               filename="e-operation-pool.c"
               line="33">Function to run for a given thread</doc>
          <type name="GLib.Func" c:type="GFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-operation-pool.c"
               line="34">The user data to pass to @thread_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="queue_transfer"
              c:identifier="e_queue_transfer"
              version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1197">Transfers the contents of @src_queue to the tail of @dst_queue.
When the operation is complete, @src_queue will be empty.</doc>
      <source-position filename="e-data-server-util.h" line="89"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="src_queue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1199">a source #GQueue</doc>
          <type name="GLib.Queue" c:type="GQueue*"/>
        </parameter>
        <parameter name="dst_queue" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1200">a destination #GQueue</doc>
          <type name="GLib.Queue" c:type="GQueue*"/>
        </parameter>
      </parameters>
    </function>
    <function name="secret_store_delete_sync"
              c:identifier="e_secret_store_delete_sync"
              version="3.18"
              throws="1">
      <doc xml:space="preserve"
           filename="e-secret-store.c"
           line="387">Deletes the secret for @uid from either the default keyring or
session keyring.

Note the boolean return value indicates whether the delete operation
itself completed successfully, not whether the secret was found and
deleted. If no such secret was found, the function will still return
%TRUE. If an error occurs, the function sets @error and returns %FALSE.</doc>
      <source-position filename="e-secret-store.h" line="42"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-secret-store.c"
             line="401">%TRUE on success, %FALSE on error</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="389">a unique identifier of the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="390">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="secret_store_lookup_sync"
              c:identifier="e_secret_store_lookup_sync"
              version="3.18"
              throws="1">
      <doc xml:space="preserve"
           filename="e-secret-store.c"
           line="332">Looks up a secret for the @uid. Both the default and session keyrings
are queried.

Note the boolean return value indicates whether the lookup operation
itself completed successfully, not whether the secret was found. If
no secret was found, the function will set @out_secret to %NULL,
but still return %TRUE. If an error occurs, the function sets @error
and returns %FALSE.</doc>
      <source-position filename="e-secret-store.h" line="37"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-secret-store.c"
             line="348">%TRUE on success, %FALSE on error</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="334">a unique identifier of the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="out_secret"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="335">return location for the secret, or %NULL</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="336">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="secret_store_store_sync"
              c:identifier="e_secret_store_store_sync"
              version="3.18"
              throws="1">
      <doc xml:space="preserve"
           filename="e-secret-store.c"
           line="275">Stores the @secret for the @uid.

If @permanently is %TRUE, the secret is stored in the default keyring.
Otherwise the secret is stored in the memory-only session keyring. If
an error occurs, the function sets @error and returns %FALSE.</doc>
      <source-position filename="e-secret-store.h" line="30"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-secret-store.c"
             line="290">%TRUE on success, %FALSE on error</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="uid" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="277">a unique identifier of the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="secret" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="278">the secret to store</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="label" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="279">human readable description of the secret</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="permanently" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="280">store permanently or just for the session</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-secret-store.c"
               line="281">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="soup_logger_attach"
              c:identifier="e_soup_logger_attach"
              version="3.38">
      <doc xml:space="preserve"
           filename="e-soup-logger.c"
           line="166">Remembers what had been read from the @input_stream and prints it
to stdout when the @message is finished. The function assumes
ownership of the @input_stream.</doc>
      <source-position filename="e-soup-logger.h" line="29"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-soup-logger.c"
             line="175">a new input stream, to be used instead of the @input_stream.
   It should be freed with g_object_unref(), when no longer needed.</doc>
        <type name="Gio.InputStream" c:type="GInputStream*"/>
      </return-value>
      <parameters>
        <parameter name="message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-logger.c"
               line="168">a #SoupMessage</doc>
          <type name="Soup.Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="input_stream" transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-soup-logger.c"
               line="169">a #GInputStream, associated with the @message</doc>
          <type name="Gio.InputStream" c:type="GInputStream*"/>
        </parameter>
      </parameters>
    </function>
    <function name="soup_ssl_trust_connect"
              c:identifier="e_soup_ssl_trust_connect"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-soup-ssl-trust.c"
           line="122">Sets up automatic SSL certificate trust handling for @soup_message using the trust
data stored in @source's WebDAV extension. If @soup_message is about to be sent on
an SSL connection with an invalid certificate, the code checks if the WebDAV
extension already has a trust response for that certificate and verifies it
with e_source_webdav_verify_ssl_trust(). If the verification fails, then
the @soup_message send also fails.

This works by connecting to the "network-event" signal on @soup_message and
connecting to the "accept-certificate" signal on each #GTlsConnection for
which @soup_message reports a #G_SOCKET_CLIENT_TLS_HANDSHAKING event. These
handlers are torn down automatically when @soup_message is disposed. This process
is not thread-safe; it is sufficient for safety if all use of @soup_message's
session and the disposal of @soup_message occur in the same thread.</doc>
      <source-position filename="e-soup-ssl-trust.h" line="31"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="soup_message" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-ssl-trust.c"
               line="124">a #SoupMessage about to be sent to the source</doc>
          <type name="Soup.Message" c:type="SoupMessage*"/>
        </parameter>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-soup-ssl-trust.c"
               line="125">an #ESource that uses WebDAV</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
      </parameters>
    </function>
    <function name="strftime" c:identifier="e_strftime">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="751">This function is a wrapper around the strftime (3) function, which
converts the &amp;percnt;l and &amp;percnt;k (12h and 24h) format variables
if necessary.</doc>
      <source-position filename="e-data-server-util.h" line="78"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="762">The number of characters placed in @s.</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="753">The string array to store the result in.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="754">The size of array @s.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="755">The formatting to use on @tm.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="756">The time value to format.</doc>
          <type name="gpointer" c:type="const tm*"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_format_date_and_time"
              c:identifier="e_time_format_date_and_time">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1943">Creates a string representation of the time value @date_tm and
stores it in @buffer.  @buffer_size should be at least 64 to be
safe. If @show_midnight is %FALSE, and the time is midnight, then
only the date is stored in @buffer. If @show_zero_seconds is
%FALSE, then if the time has zero seconds only the hour and minute
of the time are stored in @buffer.</doc>
      <source-position filename="e-time-utils.h" line="71"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="date_tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1945">The #tm to convert to a string.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
        <parameter name="use_24_hour_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1946">A #gboolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="show_midnight" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1947">A #gboolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="show_zero_seconds" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1948">A #gboolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1949">A #char buffer to store the time string in.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="buffer_size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1950">The length of @buffer.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_format_time" c:identifier="e_time_format_time">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1999">Creates a string representation of a time value in @date_tm and
stores it in @buffer. @buffer_size should be at least 64.</doc>
      <source-position filename="e-time-utils.h" line="79"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="date_tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2001">The #tm to convert to a string.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
        <parameter name="use_24_hour_format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2002">A #gboolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="show_zero_seconds" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2003">A #gboolean.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </parameter>
        <parameter name="buffer" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2004">The #char buffer to store the result in.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="buffer_size" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="2005">The length of @buffer.</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_get_d_fmt_with_4digit_year"
              c:identifier="e_time_get_d_fmt_with_4digit_year"
              version="2.22">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="2118">Retrieves a date format string with a 4-digit year (D_FMT on systems with
nl_langinfo() available). In case the current locale doesn't support 4-digit
year, the function returns format as specified by the locale.

Free the returned string with g_free().</doc>
      <source-position filename="e-time-utils.h" line="97"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="2127">a newly-allocated date format string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="time_parse_date" c:identifier="e_time_parse_date">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1871">Takes in a date string entered by the user and tries to convert it to
a struct #tm.</doc>
      <source-position filename="e-time-utils.h" line="52"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="1879">An #ETimeParseStatus result code indicating whether
@value was an empty string, a valid date, or an invalid date.</doc>
        <type name="TimeParseStatus" c:type="ETimeParseStatus"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1873">A date string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="result"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1874">Return value for the parsed date.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_parse_date_and_time"
              c:identifier="e_time_parse_date_and_time">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1783">Parses a string @value containing a date and a time and stores the
result in @result. The date in @value is expected to be in a format
like "Wed 3/13/00 14:20:00", though gettext() is used to support the
appropriate local formats. There is also some leniency on the
format of the string, e.g. the weekday can be skipped or 12-hour
formats with am/pm can be used.</doc>
      <source-position filename="e-time-utils.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="1795">E_TIME_PARSE_OK if the string was successfully parsed,
         E_TIME_PARSE_NONE if the string was empty, or
         E_TIME_PARSE_INVALID if the string could not be parsed.</doc>
        <type name="TimeParseStatus" c:type="ETimeParseStatus"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1785">the string to parse a date and time from</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="result"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1786">a #tm to store the result in</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_parse_date_and_time_ex"
              c:identifier="e_time_parse_date_and_time_ex"
              version="2.22">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1634">Parses a string @value containing a date and a time and stores the
result in @result. The date in @value is expected to be in a format
like "Wed 3/13/00 14:20:00", though gettext() is used to support the
appropriate local formats. There is also some leniency on the
format of the string, e.g. the weekday can be skipped or 12-hour
formats with am/pm can be used.</doc>
      <source-position filename="e-time-utils.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="1648">E_TIME_PARSE_OK if the string was successfully parsed,
         E_TIME_PARSE_NONE if the string was empty, or
         E_TIME_PARSE_INVALID if the string could not be parsed.</doc>
        <type name="TimeParseStatus" c:type="ETimeParseStatus"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1636">The string to parse a date and time from.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="result"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1637">A #tm to store the result in.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
        <parameter name="two_digit_year" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1638">set to TRUE, is parsing with two-digit year, else FALSE,
   but only when not NULL.</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_parse_date_ex"
              c:identifier="e_time_parse_date_ex"
              version="2.22">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1806">Takes in a date string entered by the user and tries to convert it to
a struct #tm.</doc>
      <source-position filename="e-time-utils.h" line="61"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="1816">An #ETimeParseStatus result code indicating whether
@value was an empty string, a valid date, or an invalid date.</doc>
        <type name="TimeParseStatus" c:type="ETimeParseStatus"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1808">A date string.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="result"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1809">Return value for the parsed date.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
        <parameter name="two_digit_year" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1810">set to TRUE, is parsing with two-digit year, else FALSE,
   but only when not NULL.</doc>
          <type name="gboolean" c:type="gboolean*"/>
        </parameter>
      </parameters>
    </function>
    <function name="time_parse_time" c:identifier="e_time_parse_time">
      <doc xml:space="preserve"
           filename="e-time-utils.c"
           line="1889">Parses @value, a string containing a time. @value is expected to be
in a format like "14:20:00". gettext() is used to
support the appropriate local formats and slightly
different formats, such as 12-hour formats with am/pm,
are accepted as well.</doc>
      <source-position filename="e-time-utils.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-time-utils.c"
             line="1900">An #ETimeParseStatus result code indicating whether
@value was an empty string, a valid date, or an invalid date.</doc>
        <type name="TimeParseStatus" c:type="ETimeParseStatus"/>
      </return-value>
      <parameters>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1891">The string to parse a time from.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="result"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-time-utils.c"
               line="1892">A #tm to store the result in.</doc>
          <type name="gpointer" c:type="tm*"/>
        </parameter>
      </parameters>
    </function>
    <function name="timeout_add_seconds_with_name"
              c:identifier="e_timeout_add_seconds_with_name"
              version="3.12">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2741">Similar to g_timeout_add_seconds_full(), but also names the #GSource as
@name.

You might find e_named_timeout_add_seconds() or
e_named_timeout_add_seconds_full() more convenient.  Those macros name
the #GSource implicitly.</doc>
      <source-position filename="e-data-server-util.h" line="237"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2759">the ID (greater than 0) of the event source</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2743">the priority of the timeout source, typically in the
           range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2745">the time between calls to the function, in seconds</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2746">debug name for the source</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="notified"
                   closure="4"
                   destroy="5">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2747">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2748">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2749">function to call when the timeout is removed,
         or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="timeout_add_with_name"
              c:identifier="e_timeout_add_with_name"
              version="3.12">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2701">Similar to g_timeout_add_full(), but also names the #GSource as @name.

You might find e_named_timeout_add() or e_named_timeout_add_full() more
convenient.  Those macros name the #GSource implicitly.</doc>
      <source-position filename="e-data-server-util.h" line="231"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2718">the ID (greather than 0) of the event source</doc>
        <type name="guint" c:type="guint"/>
      </return-value>
      <parameters>
        <parameter name="priority" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2703">the priority of the timeout source, typically in the
           range between #G_PRIORITY_DEFAULT and #G_PRIORITY_HIGH</doc>
          <type name="gint" c:type="gint"/>
        </parameter>
        <parameter name="interval" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2705">the time between calls to the function, in milliseconds
           (1/1000ths of a second)</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="name"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2707">debug name for the source</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="function"
                   transfer-ownership="none"
                   scope="notified"
                   closure="4"
                   destroy="5">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2708">function to call</doc>
          <type name="GLib.SourceFunc" c:type="GSourceFunc"/>
        </parameter>
        <parameter name="data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2709">data to pass to @function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="notify"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2710">function to call when the timeout is removed,
         or %NULL</doc>
          <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
        </parameter>
      </parameters>
    </function>
    <function name="type_traverse"
              c:identifier="e_type_traverse"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2905">Calls @func for all instantiable subtypes of @parent_type.

This is often useful for extending functionality by way of #EModule.
A module may register a subtype of @parent_type in its e_module_load()
function.  Then later on the application will call e_type_traverse()
to instantiate all registered subtypes of @parent_type.</doc>
      <source-position filename="e-data-server-util.h" line="279"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent_type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2907">the root #GType to traverse from</doc>
          <type name="GType" c:type="GType"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="call"
                   closure="2">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2908">the function to call for each visited #GType</doc>
          <type name="TypeFunc" c:type="ETypeFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2909">user data to pass to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="uid_new"
              c:identifier="e_uid_new"
              deprecated="1"
              deprecated-version="3.26">
      <doc xml:space="preserve"
           filename="e-uid.c"
           line="25">Generate a new unique string for use e.g. in account lists.</doc>
      <doc-deprecated xml:space="preserve">Use e_util_generate_uid() instead.</doc-deprecated>
      <source-position filename="e-uid.h" line="33"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-uid.c"
             line="30">The newly generated UID.  The caller should free the string
when it's done with it.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="utf8_strftime" c:identifier="e_utf8_strftime">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="814">The UTF-8 equivalent of e_strftime ().</doc>
      <source-position filename="e-data-server-util.h" line="74"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="823">The number of characters placed in @s.</doc>
        <type name="gsize" c:type="gsize"/>
      </return-value>
      <parameters>
        <parameter name="string" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="816">The string array to store the result in.</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
        <parameter name="max" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="817">The size of array @s.</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="fmt" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="818">The formatting to use on @tm.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="tm"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="819">The time value to format.</doc>
          <type name="gpointer" c:type="const tm*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_can_use_collection_as_credential_source"
              c:identifier="e_util_can_use_collection_as_credential_source"
              version="3.28">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="3185">Checks whether the @collection_source can be used as a credential source
for the @child_source. The relationship is not tested in the function.
When the @collection_source is %NULL, then it simply returns %FALSE.</doc>
      <source-position filename="e-data-server-util.h" line="292"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="3194">whether @collection_source can be used as a credential source
   for @child_source, that is, whether they share credentials.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="collection_source"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="3187">a collection #ESource, or %NULL</doc>
          <type name="gpointer" c:type="_ESource*"/>
        </parameter>
        <parameter name="child_source"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="3188">a children of @collection_source</doc>
          <type name="gpointer" c:type="_ESource*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_copy_object_slist"
              c:identifier="e_util_copy_object_slist"
              version="3.4"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1095">Copies #GSList of #GObject&lt;!-- --&gt;s at the end of @copy_to.</doc>
      <doc-deprecated xml:space="preserve">Use g_slist_copy_deep() instead, and optionally
                 g_slist_concat() to concatenate the copied list
                 to another #GSList.</doc-deprecated>
      <source-position filename="e-data-server-util.h" line="249"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1102">New head of @copy_to.
Returned pointer can be freed with e_util_free_object_slist().</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="GObject.Object"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="copy_to"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1097">Where to copy; can be %NULL</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GObject.Object"/>
          </type>
        </parameter>
        <parameter name="objects" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1098">#GSList of #GObject&lt;!-- --&gt;s to be copied</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="GObject.Object"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="util_copy_string_slist"
              c:identifier="e_util_copy_string_slist"
              version="3.4"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1067">Copies #GSList of strings at the end of @copy_to.</doc>
      <doc-deprecated xml:space="preserve">Use g_slist_copy_deep() instead, and optionally
                 g_slist_concat() to concatenate the copied list
                 to another #GSList.</doc-deprecated>
      <source-position filename="e-data-server-util.h" line="247"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1074">New head of @copy_to.
Returned pointer can be freed with e_util_free_string_slist().</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="copy_to"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1069">Where to copy; can be %NULL</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="strings" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1070">#GSList of strings to be copied</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="util_debug_print"
              c:identifier="e_util_debug_print"
              version="3.30"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2825">Prints a text according to @format and its arguments to stdout
prefixed with @domain in brackets [] and the current date and time.
This function doesn't check whether the logging is enabled, it's up
to the caller to determine it, the function only prints the information
in a consistent format:
[domain] YYYY-MM-DD hh:mm:ss.ms - format

See: e_util_debug_printv()</doc>
      <source-position filename="e-data-server-util.h" line="261"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2827">a debug domain</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2828">a printf-like format</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2829">arguments for the @format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="util_debug_printv"
              c:identifier="e_util_debug_printv"
              version="3.30"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2854">Prints a text according to @format and its @args to stdout
prefixed with @domain in brackets [] and the current date and time.
This function doesn't check whether the logging is enabled, it's up
to the caller to determine it, the function only prints the information
in a consistent form:
[@domain] YYYY-MM-DD hh:mm:ss.ms - @format

See: e_util_debug_print()</doc>
      <source-position filename="e-data-server-util.h" line="264"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="domain" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2856">a debug domain</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2857">a printf-like format</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="args" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2858">arguments for the @format</doc>
          <type name="va_list" c:type="va_list"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_ensure_gdbus_string"
              c:identifier="e_util_ensure_gdbus_string"
              version="3.0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="695">If @str is a valid UTF-8 string, the function returns @str and does
not set @gdbus_str.

If @str is an invalid UTF-8 string, the function calls
e_util_utf8_make_valid() and points @gdbus_str to the newly-allocated,
valid UTF-8 string, and also returns it.  The caller should free the
string pointed to by @gdbus_str with g_free().

If @str is %NULL, the function returns an empty string and does not
set @gdbus_str.

Admittedly, the function semantics are a little awkward.  The example
below illustrates the easiest way to cope with the @gdbus_str argument:

|[
    const gchar *trusted_utf8;
    gchar *allocated = NULL;

    trusted_utf8 = e_util_ensure_gdbus_string (untrusted_utf8, &amp;allocated);

    Do stuff with trusted_utf8, then clear it.

    trusted_utf8 = NULL;

    g_free (allocated);
    allocated = NULL;
]|</doc>
      <source-position filename="e-data-server-util.h" line="65"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="728">a valid UTF-8 string</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="697">a possibly invalid UTF-8 string, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="gdbus_str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="698">return location for the corrected string</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_free_nullable_object_slist"
              c:identifier="e_util_free_nullable_object_slist"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1156">Calls g_object_unref() on each member of @objects if non-%NULL and then frees
also @objects itself.</doc>
      <source-position filename="e-data-server-util.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="objects" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1158">a #GSList of nullable #GObject&lt;!-- --&gt;s</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GObject.Object"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="util_free_object_slist"
              c:identifier="e_util_free_object_slist"
              version="3.4"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1139">Calls g_object_unref() on each member of @objects and then frees
also @objects itself.</doc>
      <doc-deprecated xml:space="preserve">Use g_slist_free_full() instead.</doc-deprecated>
      <source-position filename="e-data-server-util.h" line="246"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="objects" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1141">a #GSList of #GObject&lt;!-- --&gt;s</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="GObject.Object"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="util_free_string_slist"
              c:identifier="e_util_free_string_slist"
              version="3.4"
              deprecated="1"
              deprecated-version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1123">Frees memory previously allocated by e_util_strv_to_slist().</doc>
      <doc-deprecated xml:space="preserve">Use g_slist_free_full() instead.</doc-deprecated>
      <source-position filename="e-data-server-util.h" line="245"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="strings" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1125">a #GSList of strings (gchar *)</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="util_generate_uid"
              c:identifier="e_util_generate_uid"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="3068">Generates a unique identificator, which can be used as part of
the Message-ID header, or iCalendar component UID, or vCard UID.
The resulting string doesn't contain any host name, it's
a hexa-decimal string with no particular meaning.

Free the returned string with g_free(), when no longer needed.</doc>
      <source-position filename="e-data-server-util.h" line="288"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="3078">generated unique identificator as
   a newly allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
    </function>
    <function name="util_get_source_full_name"
              c:identifier="e_util_get_source_full_name">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="2948">Constructs a full name of the @source with all of its parents
of the form: "&amp;lt;account-name&amp;gt; : &amp;lt;parent&amp;gt;/&amp;lt;source&amp;gt;" where
the "&amp;lt;parent&amp;gt;/" part can be repeated zero or more times, depending
on the deep level of the @source.</doc>
      <source-position filename="e-data-server-util.h" line="283"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="2958">Full name of the @source as a newly allocated
   string, which should be freed with g_free() when done with it.

Since 3.18</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="registry"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2950">an #ESourceRegistry</doc>
          <type name="gpointer" c:type="_ESourceRegistry*"/>
        </parameter>
        <parameter name="source"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="2951">an #ESource</doc>
          <type name="gpointer" c:type="_ESource*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_gthread_id"
              c:identifier="e_util_gthread_id"
              version="2.32">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="872">Returns a 64-bit integer hopefully uniquely identifying the
thread. To be used in debugging output and logging only.
The returned value is just a cast of a pointer to the 64-bit integer.

There is no guarantee that calling e_util_gthread_id () on one
thread first and later after that thread has dies on another won't
return the same integer.

On Linux and Win32, known to really return a unique id for each
thread existing at a certain time. No guarantee that ids won't be
reused after a thread has terminated, though.</doc>
      <source-position filename="e-data-server-util.h" line="67"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="888">A 64-bit integer.</doc>
        <type name="guint64" c:type="guint64"/>
      </return-value>
      <parameters>
        <parameter name="thread" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="874">A #GThread pointer</doc>
          <type name="GLib.Thread" c:type="GThread*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_identity_can_send"
              c:identifier="e_util_identity_can_send"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="3125">Checks whether the @identity_source can be used for sending, which means
whether it has configures send mail source.</doc>
      <source-position filename="e-data-server-util.h" line="290"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="3133">Whether @identity_source can be used to send messages</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="registry"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="3127">an #ESourceRegistry</doc>
          <type name="gpointer" c:type="_ESourceRegistry*"/>
        </parameter>
        <parameter name="identity_source"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="3128">an #ESource with mail identity extension</doc>
          <type name="gpointer" c:type="_ESource*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_safe_free_string"
              c:identifier="e_util_safe_free_string"
              version="3.16">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1176">Calls g_free() on @string, but before it rewrites its content with zeros.
This is suitable to free strings with passwords.</doc>
      <source-position filename="e-data-server-util.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1178">a string to free</doc>
          <type name="utf8" c:type="gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_slist_to_strv"
              c:identifier="e_util_slist_to_strv"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1003">Convert list of strings into NULL-terminates array of strings.</doc>
      <source-position filename="e-data-server-util.h" line="83"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1009">Newly allocated %NULL-terminated array of strings.
Returned pointer should be freed with g_strfreev().

Note: Pair function for this is e_util_strv_to_slist().</doc>
        <array c:type="gchar**">
          <type name="utf8"/>
        </array>
      </return-value>
      <parameters>
        <parameter name="strings" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1005">a #GSList of strings (const gchar *)</doc>
          <type name="GLib.SList" c:type="const GSList*">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="util_strcmp0" c:identifier="e_util_strcmp0" version="3.32">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="201">Compares @str1 and @str2 like g_strcmp0(), except it handles %NULL and
empty strings as equal.</doc>
      <source-position filename="e-data-server-util.h" line="47"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="209">an integer less than 0 when @str1 is before @str2; 0 when
   the strings are equal and an integer greated than 0 when @str1 is after @str2.</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="str1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="203">a C string on %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="str2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="204">another C string or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_strdup_strip"
              c:identifier="e_util_strdup_strip"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="170">Duplicates @string and strips off any leading or trailing whitespace.
The resulting string is returned unless it is empty or %NULL, in which
case the function returns %NULL.

Free the returned string with g_free().</doc>
      <source-position filename="e-data-server-util.h" line="46"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="180">a newly-allocated, stripped copy of @string, or %NULL</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="string"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="172">a string value, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_strstrcase" c:identifier="e_util_strstrcase">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="227">Find the first instance of @needle in @haystack, ignoring case for
bytes that are ASCII characters.</doc>
      <source-position filename="e-data-server-util.h" line="49"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="235">A pointer to the start of @needle in @haystack, or NULL if
         @needle is not found.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="haystack" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="229">The string to search in.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="needle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="230">The string to search for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_strv_equal"
              c:identifier="e_util_strv_equal"
              version="3.12">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="129">Compares @v1 and @v2 for equality, handling %NULL gracefully.

The arguments types are generic for compatibility with #GEqualFunc.</doc>
      <source-position filename="e-data-server-util.h" line="44"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="138">whether @v1 and @v2 are identical</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="v1"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="131">a %NULL-terminated string array, or %NULL</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
        <parameter name="v2"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="132">another %NULL-terminated string array, or %NULL</doc>
          <type name="gpointer" c:type="gconstpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_strv_to_slist"
              c:identifier="e_util_strv_to_slist"
              version="3.4">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1037">Convert NULL-terminated array of strings to a list of strings.</doc>
      <source-position filename="e-data-server-util.h" line="84"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1043">Newly allocated #GSList of
newly allocated strings. The returned pointer should be freed with
e_util_free_string_slist().

Note: Pair function for this is e_util_slist_to_strv().</doc>
        <type name="GLib.SList" c:type="GSList*">
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="strv" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1039">a NULL-terminated array of strings (const gchar *)</doc>
          <type name="utf8" c:type="const gchar* const*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_unicode_get_utf8"
              c:identifier="e_util_unicode_get_utf8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="263">Get a UTF-8 character from the beginning of @text.</doc>
      <source-position filename="e-data-server-util.h" line="51"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="270">A pointer to the next character in @text after @out.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="265">The string to take the UTF-8 character from.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="out" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="266">The location to store the UTF-8 character in.</doc>
          <type name="gunichar" c:type="gunichar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_unref_in_thread"
              c:identifier="e_util_unref_in_thread"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="3036">Unrefs the given @object in a dedicated thread. This is useful when unreffing
object deep in call stack when the caller might still use the object and
this being the last reference to it.</doc>
      <source-position filename="e-data-server-util.h" line="286"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="3038">a #GObject</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_data_make_valid"
              c:identifier="e_util_utf8_data_make_valid"
              version="3.6">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="605">Returns a newly-allocated NULL-terminated string with invalid characters
replaced by Unicode replacement characters (U+FFFD).
For %NULL @data returns newly allocated empty string ("").</doc>
      <source-position filename="e-data-server-util.h" line="62"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="614">a newly-allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="607">UTF-8 binary data</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="data_bytes" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="608">length of the binary data</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_decompose"
              c:identifier="e_util_utf8_decompose"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="538">Converts the @text into a decomposed variant and strips it, which
allows also cheap case insensitive comparision afterwards. This
produces an output as being used in e_util_utf8_strstrcasedecomp().</doc>
      <source-position filename="e-data-server-util.h" line="60"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="546">A newly allocated string, a decomposed
   variant of the @text. Free with g_free(), when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="text" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="540">a UTF-8 string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_make_valid"
              c:identifier="e_util_utf8_make_valid"
              version="3.0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="584">Returns a newly-allocated copy of @str, with invalid characters
replaced by Unicode replacement characters (U+FFFD).
For %NULL @str returns newly allocated empty string ("").</doc>
      <source-position filename="e-data-server-util.h" line="61"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="592">a newly-allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="586">a UTF-8 string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_normalize"
              c:identifier="e_util_utf8_normalize"
              version="3.8">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="661">Normalizes @str by making it all lower case and removing any accents from it.</doc>
      <source-position filename="e-data-server-util.h" line="64"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="667">The normalized version of @str, or %NULL if @str was not valid UTF-8</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="663">a UTF-8 string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_remove_accents"
              c:identifier="e_util_utf8_remove_accents"
              version="2.28">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="501">Returns a newly-allocated copy of @str with accents removed.</doc>
      <source-position filename="e-data-server-util.h" line="59"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="507">a newly-allocated string</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="str" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="503">a UTF-8 string, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_strcasecmp"
              c:identifier="e_util_utf8_strcasecmp">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="468">Compares two UTF-8 strings using approximate case-insensitive ordering.</doc>
      <source-position filename="e-data-server-util.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="475">&lt; 0 if @s1 compares before @s2, 0 if they compare equal,
         &gt; 0 if @s1 compares after @s2</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="s1" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="470">a UTF-8 string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="s2" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="471">another UTF-8 string</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_strstrcase"
              c:identifier="e_util_utf8_strstrcase">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="283">Find the first instance of @needle in @haystack, ignoring case. (No
proper case folding or decomposing is done.) Both @needle and
@haystack are UTF-8 strings.</doc>
      <source-position filename="e-data-server-util.h" line="53"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="292">A pointer to the first instance of @needle in @haystack, or
         %NULL if no match is found, or if either of the strings are
         not legal UTF-8 strings.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="haystack" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="285">The string to search in.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="needle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="286">The string to search for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="util_utf8_strstrcasedecomp"
              c:identifier="e_util_utf8_strstrcasedecomp">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="387">Find the first instance of @needle in @haystack, where both @needle
and @haystack are UTF-8 strings. Both strings are stripped and
decomposed for comparison, and case is ignored.</doc>
      <source-position filename="e-data-server-util.h" line="55"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="396">A pointer to the first instance of @needle in @haystack, or
         %NULL if either of the strings are not legal UTF-8 strings.</doc>
        <type name="utf8" c:type="const gchar*"/>
      </return-value>
      <parameters>
        <parameter name="haystack" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="389">The string to search in.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="needle" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="390">The string to search for.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="weak_ref_free"
              c:identifier="e_weak_ref_free"
              version="3.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1246">Frees a #GWeakRef created by e_weak_ref_new().</doc>
      <source-position filename="e-data-server-util.h" line="92"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="weak_ref" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1248">a #GWeakRef</doc>
          <type name="GObject.WeakRef" c:type="GWeakRef*"/>
        </parameter>
      </parameters>
    </function>
    <function name="weak_ref_new"
              c:identifier="e_weak_ref_new"
              version="3.10"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-data-server-util.c"
           line="1223">Allocates a new #GWeakRef and calls g_weak_ref_set() with @object.

Free the returned #GWeakRef with e_weak_ref_free().</doc>
      <source-position filename="e-data-server-util.h" line="91"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-data-server-util.c"
             line="1231">a new #GWeakRef</doc>
        <type name="GObject.WeakRef" c:type="GWeakRef*"/>
      </return-value>
      <parameters>
        <parameter name="object"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-data-server-util.c"
               line="1225">a #GObject or %NULL</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_access_control_entry_free"
              c:identifier="e_webdav_access_control_entry_free"
              moved-to="WebDAVAccessControlEntry.free"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-webdav-session.c"
           line="537">Frees an #EWebDAVAccessControlEntry previously created with e_webdav_access_control_entry_new()
or e_webdav_access_control_entry_copy(). The function does nothing, if @ptr is %NULL.</doc>
      <source-position filename="e-webdav-session.h" line="300"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="539">an #EWebDAVAccessControlEntry</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_discover_free_discovered_sources"
              c:identifier="e_webdav_discover_free_discovered_sources"
              version="3.18">
      <doc xml:space="preserve"
           filename="e-webdav-discover.c"
           line="433">Frees a @GSList of discovered sources returned from
e_webdav_discover_sources_finish() or e_webdav_discover_sources_sync().</doc>
      <source-position filename="e-webdav-discover.h" line="51"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="discovered_sources" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="435">A #GSList of discovered sources</doc>
          <type name="GLib.SList" c:type="GSList*">
            <type name="WebDAVDiscoveredSource"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_discover_sources"
              c:identifier="e_webdav_discover_sources"
              version="3.18">
      <doc xml:space="preserve"
           filename="e-webdav-discover.c"
           line="529">Asynchronously runs discovery of the WebDAV sources (CalDAV and CardDAV), eventually
limited by the @only_supports filter, which can be %E_WEBDAV_DISCOVER_SUPPORTS_NONE
to search all types. Note that the list of returned calendars can be more general,
thus check for its actual support type for further filtering of the results.
The @url_use_path can be used to override actual server path, or even complete URL,
for the given @source.

When the operation is finished, @callback will be called. You can then
call e_webdav_discover_sources_finish() to get the result of the operation.</doc>
      <source-position filename="e-webdav-discover.h" line="54"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="531">an #ESource from which to take connection details</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
        <parameter name="url_use_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="532">optional URL override, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_supports" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="533">bit-or of EWebDAVDiscoverSupports, to limit what type of sources to search</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="credentials"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="534">credentials to use for authentication to the server</doc>
          <type name="NamedParameters" c:type="const ENamedParameters*"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="535">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="6">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="536">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="538">data to pass to the callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_discover_sources_finish"
              c:identifier="e_webdav_discover_sources_finish"
              version="3.18"
              throws="1">
      <doc xml:space="preserve"
           filename="e-webdav-discover.c"
           line="616">Finishes the operation started with e_webdav_discover_sources(). If an
error occurred, the function will set @error and return %FALSE. The function
can return success and no discovered sources, the same as it can return failure,
but still set some output arguments, like the certificate related output
arguments with SOUP_STATUS_SSL_FAILED error.

The return value of @out_certificate_pem should be freed with g_free()
when no longer needed.

The return value of @out_discovered_sources should be freed
with e_webdav_discover_free_discovered_sources() when no longer needed.

The return value of @out_calendar_user_addresses should be freed
with g_slist_free_full (calendar_user_addresses, g_free); when
no longer needed.</doc>
      <source-position filename="e-webdav-discover.h" line="62"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-webdav-discover.c"
             line="647">%TRUE on success, %FALSE on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="618">an #ESource on which the operation was started</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
        <parameter name="result" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="619">a #GAsyncResult</doc>
          <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
        </parameter>
        <parameter name="out_certificate_pem"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="620">optional return location
  for a server SSL certificate in PEM format, when the operation failed
  with an SSL error</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="out_certificate_errors"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="623">optional #GTlsCertificateFlags,
  with certificate error flags when the operation failed with SSL error</doc>
          <type name="Gio.TlsCertificateFlags" c:type="GTlsCertificateFlags*"/>
        </parameter>
        <parameter name="out_discovered_sources"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="625">a #GSList
  of all discovered sources</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="WebDAVDiscoveredSource"/>
          </type>
        </parameter>
        <parameter name="out_calendar_user_addresses"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="627">a #GSList of
  all discovered mail addresses for calendar sources</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_discover_sources_full"
              c:identifier="e_webdav_discover_sources_full"
              version="3.30">
      <doc xml:space="preserve"
           filename="e-webdav-discover.c"
           line="566">This is the same as e_webdav_discover_sources(), it only allows to
provide a callback function (with its user_data), to reference an additional
#ESource. It's good to avoid creating its own #ESourceRegistry instance to
get it.

When the operation is finished, @callback will be called. You can then
call e_webdav_discover_sources_finish() to get the result of the operation.</doc>
      <source-position filename="e-webdav-discover.h" line="95"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="568">an #ESource from which to take connection details</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
        <parameter name="url_use_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="569">optional URL override, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_supports" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="570">bit-or of EWebDAVDiscoverSupports, to limit what type of sources to search</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="credentials"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="571">credentials to use for authentication to the server</doc>
          <type name="NamedParameters" c:type="const ENamedParameters*"/>
        </parameter>
        <parameter name="ref_source_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="5">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="572">optional callback to use to get an ESource</doc>
          <type name="WebDAVDiscoverRefSourceFunc"
                c:type="EWebDAVDiscoverRefSourceFunc"/>
        </parameter>
        <parameter name="ref_source_func_user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="573">user data for @ref_source_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="574">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
        <parameter name="callback"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="async"
                   closure="8">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="575">a #GAsyncReadyCallback to call when the request
           is satisfied</doc>
          <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="577">data to pass to the callback function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_discover_sources_full_sync"
              c:identifier="e_webdav_discover_sources_full_sync"
              version="3.30"
              throws="1">
      <doc xml:space="preserve"
           filename="e-webdav-discover.c"
           line="775">This is the same as e_webdav_discover_sources_sync(), it only allows to
provide a callback function (with its user_data), to reference an additional
#ESource. It's good to avoid creating its own #ESourceRegistry instance to
get it.</doc>
      <source-position filename="e-webdav-discover.h" line="105"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-webdav-discover.c"
             line="800">%TRUE on success, %FALSE on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="777">an #ESource from which to take connection details</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
        <parameter name="url_use_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="778">optional URL override, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_supports" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="779">bit-or of EWebDAVDiscoverSupports, to limit what type of sources to search</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="credentials"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="780">credentials to use for authentication to the server</doc>
          <type name="NamedParameters" c:type="const ENamedParameters*"/>
        </parameter>
        <parameter name="ref_source_func"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   scope="call"
                   closure="5">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="781">optional callback to use to get an ESource</doc>
          <type name="WebDAVDiscoverRefSourceFunc"
                c:type="EWebDAVDiscoverRefSourceFunc"/>
        </parameter>
        <parameter name="ref_source_func_user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="782">user data for @ref_source_func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
        <parameter name="out_certificate_pem"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="783">optional return location
  for a server SSL certificate in PEM format, when the operation failed
  with an SSL error</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="out_certificate_errors"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="786">optional #GTlsCertificateFlags,
  with certificate error flags when the operation failed with SSL error</doc>
          <type name="Gio.TlsCertificateFlags" c:type="GTlsCertificateFlags*"/>
        </parameter>
        <parameter name="out_discovered_sources"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="788">a #GSList
  of all discovered sources</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="WebDAVDiscoveredSource"/>
          </type>
        </parameter>
        <parameter name="out_calendar_user_addresses"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="790">a #GSList of
  all discovered mail addresses for calendar sources</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="792">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_discover_sources_sync"
              c:identifier="e_webdav_discover_sources_sync"
              version="3.18"
              throws="1">
      <doc xml:space="preserve"
           filename="e-webdav-discover.c"
           line="713">Synchronously runs discovery of the WebDAV sources (CalDAV and CardDAV), eventually
limited by the @only_supports filter, which can be %E_WEBDAV_DISCOVER_SUPPORTS_NONE
to search all types. Note that the list of returned calendars can be more general,
thus check for its actual support type for further filtering of the results.
The @url_use_path can be used to override actual server path, or even complete URL,
for the given @source.

If an error occurred, the function will set @error and return %FALSE. The function
can return success and no discovered sources, the same as it can return failure,
but still set some output arguments, like the certificate related output
arguments with SOUP_STATUS_SSL_FAILED error.

The return value of @out_certificate_pem should be freed with g_free()
when no longer needed.

The return value of @out_discovered_sources should be freed
with e_webdav_discover_free_discovered_sources() when no longer needed.

The return value of @out_calendar_user_addresses should be freed
with g_slist_free_full (calendar_user_addresses, g_free); when
no longer needed.</doc>
      <source-position filename="e-webdav-discover.h" line="70"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-webdav-discover.c"
             line="753">%TRUE on success, %FALSE on failure</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="source" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="715">an #ESource from which to take connection details</doc>
          <type name="Source" c:type="ESource*"/>
        </parameter>
        <parameter name="url_use_path"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="716">optional URL override, or %NULL</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="only_supports" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="717">bit-or of EWebDAVDiscoverSupports, to limit what type of sources to search</doc>
          <type name="guint32" c:type="guint32"/>
        </parameter>
        <parameter name="credentials"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="718">credentials to use for authentication to the server</doc>
          <type name="NamedParameters" c:type="const ENamedParameters*"/>
        </parameter>
        <parameter name="out_certificate_pem"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="719">optional return location
  for a server SSL certificate in PEM format, when the operation failed
  with an SSL error</doc>
          <type name="utf8" c:type="gchar**"/>
        </parameter>
        <parameter name="out_certificate_errors"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="722">optional #GTlsCertificateFlags,
  with certificate error flags when the operation failed with SSL error</doc>
          <type name="Gio.TlsCertificateFlags" c:type="GTlsCertificateFlags*"/>
        </parameter>
        <parameter name="out_discovered_sources"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="724">a #GSList
  of all discovered sources</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="WebDAVDiscoveredSource"/>
          </type>
        </parameter>
        <parameter name="out_calendar_user_addresses"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full"
                   optional="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="726">a #GSList of
  all discovered mail addresses for calendar sources</doc>
          <type name="GLib.SList" c:type="GSList**">
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="cancellable"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-discover.c"
               line="728">optional #GCancellable object, or %NULL</doc>
          <type name="Gio.Cancellable" c:type="GCancellable*"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_privilege_free"
              c:identifier="e_webdav_privilege_free"
              moved-to="WebDAVPrivilege.free"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-webdav-session.c"
           line="428">Frees an #EWebDAVPrivilege previously created with e_webdav_privilege_new()
or e_webdav_privilege_copy(). The function does nothing, if @ptr is %NULL.</doc>
      <source-position filename="e-webdav-session.h" line="262"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="430">an #EWebDAVPrivilege</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_property_change_free"
              c:identifier="e_webdav_property_change_free"
              moved-to="WebDAVPropertyChange.free"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-webdav-session.c"
           line="257">Frees an #EWebDAVPropertyChange previously created with e_webdav_property_change_new_set(),
e_webdav_property_change_new_remove() or or e_webdav_property_change_copy().
The function does nothing, if @ptr is %NULL.</doc>
      <source-position filename="e-webdav-session.h" line="203"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="259">an #EWebDAVPropertyChange</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="webdav_resource_free"
              c:identifier="e_webdav_resource_free"
              moved-to="WebDAVResource.free"
              version="3.26">
      <doc xml:space="preserve"
           filename="e-webdav-session.c"
           line="140">Frees an #EWebDAVResource previously created with e_webdav_resource_new()
or e_webdav_resource_copy(). The function does nothing, if @ptr is %NULL.</doc>
      <source-position filename="e-webdav-session.h" line="136"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="ptr"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-webdav-session.c"
               line="142">an #EWebDAVResource</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_destroy_hash" c:identifier="e_xml_destroy_hash">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="159">Frees the memory used by @hash and its contents.</doc>
      <source-position filename="e-xml-hash-utils.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="161">the #GHashTable to destroy</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
      </parameters>
    </function>
    <function name="xml_dup_node_content"
              c:identifier="e_xml_dup_node_content"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="591">Duplicates content of the @node. If the @node is %NULL, then the
function does nothing and returns also %NULL.

Unlike e_xml_get_node_text(), this includes also any element sub-structure
of the @node, if any such exists.</doc>
      <source-position filename="e-xml-utils.h" line="74"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="601">the @node content as #xmlChar string,
   or %NULL, when the content could not be read or was not set. Free
   the non-%NULL value with xmlFree(), when no longer needed.

See: e_xml_find_child_and_dup_content(), e_xml_get_node_text()</doc>
        <type name="libxml2.Char" c:type="xmlChar*"/>
      </return-value>
      <parameters>
        <parameter name="node"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="593">an #xmlNode</doc>
          <type name="libxml2.Node" c:type="const xmlNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_child"
              c:identifier="e_xml_find_child"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="565">Searches the children nodes of the @parent for an element named @name in namespace @ns_href.</doc>
      <source-position filename="e-xml-utils.h" line="71"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="573">an #xmlNode of the given name, or %NULL, if not found.
   It also returns %NULL, when the @parent is %NULL.

See: e_xml_find_sibling(), e_xml_find_children_nodes()</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="parent"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="567">an #xmlNode, parent of which immediate children to search</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="568">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="569">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_child_and_dup_content"
              c:identifier="e_xml_find_child_and_dup_content"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="618">Searches the children nodes of the @parent for an element named @name in namespace @ns_href
and returns its content. This combines e_xml_find_child() and e_xml_dup_node_content() calls.</doc>
      <source-position filename="e-xml-utils.h" line="75"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="627">the found node content as #xmlChar string,
   or %NULL, when the node could not be found or the content could not be read
   or was not set. Free the non-%NULL value with xmlFree(), when no longer needed.

See: e_xml_find_child_and_get_text()</doc>
        <type name="libxml2.Char" c:type="xmlChar*"/>
      </return-value>
      <parameters>
        <parameter name="parent"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="620">an #xmlNode, parent of which immediate children to search</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="621">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="622">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_child_and_get_text"
              c:identifier="e_xml_find_child_and_get_text"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="688">Searches the children nodes of the @parent for an element named @name in namespace @ns_href
and returns its text content.

It combines e_xml_find_child() and e_xml_get_node_text() calls.</doc>
      <source-position filename="e-xml-utils.h" line="79"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="699">the found node text as #xmlChar string,
   or %NULL, when the node could not be found or the content could not be read
   or was not set.

See: e_xml_find_child_and_dup_content(), e_xml_find_children_nodes()</doc>
        <type name="libxml2.Char" c:type="const xmlChar*"/>
      </return-value>
      <parameters>
        <parameter name="parent"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="690">an #xmlNode, parent of which immediate children to search</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="691">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="692">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_children_nodes"
              c:identifier="e_xml_find_children_nodes"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="722">Retrieve multiple nodes in one go, in an efficient way. It can be
quicker than traversing the children of the @parent @count times
in certain circumstances.

The variable parameters expect triple of:
  const gchar *ns_href;
  const gchar *name;
  xmlNode **out_node;
where the ns_href is a namespace href the node should have set,
or %NULL for none namespace; the name is an element name to search for.
The names should not be included more than once.</doc>
      <source-position filename="e-xml-utils.h" line="82"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="724">an #xmlNode, whose children to search</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="count" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="725">how many nodes will be read</doc>
          <type name="guint" c:type="guint"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="726">triple of arguments describing the nodes and their out variable</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_in_hierarchy"
              c:identifier="e_xml_find_in_hierarchy"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="787">Checks whether the @parent has a hierarchy of children described by pair
of 'ns_href' and 'name'.

Note: It requires two %NULL-s at the end of the arguments, because the `ns_href' can
   be %NULL, thus it could not distinguish between no namespace href and the end of
   the hierarchy children, thus it stops only on the 'name' being %NULL.</doc>
      <source-position filename="e-xml-utils.h" line="85"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="801">an #xmlNode referencing the node in the hierarchy
   of the children of the @parent, or %NULL, when no such found.</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="parent"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="789">an #xmlNode, or %NULL, in which case function does nothing and just returns %NULL</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="child_ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="790">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="child_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="791">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="792">a two-%NULL-terminated pair of hierarchy children</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_next_sibling"
              c:identifier="e_xml_find_next_sibling"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="538">Searches for the next sibling node of the @sibling for an element named @name in namespace @ns_href.
Unlike e_xml_find_sibling(), it skips the @sibling itself.</doc>
      <source-position filename="e-xml-utils.h" line="68"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="547">an #xmlNode of the given name, or %NULL, if not found
   It also returns %NULL, when the @sibling is %NULL.

See: e_xml_find_sibling(), e_xml_find_child()</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="sibling"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="540">an #xmlNode, where to search from</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="541">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="542">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_find_sibling"
              c:identifier="e_xml_find_sibling"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="507">Searches the sibling nodes of the @sibling for an element named @name in namespace @ns_href.
It checks the @sibling itself too, but it doesn't check the previous siblings of the @sibling.</doc>
      <source-position filename="e-xml-utils.h" line="65"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="516">an #xmlNode of the given name, or %NULL, if not found
   It also returns %NULL, when the @sibling is %NULL.

See: e_xml_find_next_sibling(), e_xml_find_child()</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="sibling"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="509">an #xmlNode, where to start searching</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="510">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="511">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_from_hash"
              c:identifier="e_xml_from_hash"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="120">Uses the key/value pair representation of an XML structure in @hash
to build an equivalent #xmlDoc. This is the reverse of e_xml_to_hash().</doc>
      <source-position filename="e-xml-hash-utils.h" line="43"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.c"
             line="129">the #xmlDoc created from the data in @hash</doc>
        <type name="libxml2.Doc" c:type="xmlDoc*"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="122">The #GHashTable to extract the XML from</doc>
          <type name="GLib.HashTable" c:type="GHashTable*">
            <type name="utf8"/>
            <type name="utf8"/>
          </type>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="123">The #EXmlHashType used to store the XML</doc>
          <type name="XmlHashType" c:type="EXmlHashType"/>
        </parameter>
        <parameter name="root_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="124">The name to call the new #xmlDoc</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_child_by_name"
              c:identifier="e_xml_get_child_by_name"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="178">Attempts to find a child element of @parent named @child_name.
If no such child exists, the function returns %NULL.</doc>
      <source-position filename="e-xml-utils.h" line="37"/>
      <return-value nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="186">a child XML node structure, or %NULL</doc>
        <type name="libxml2.Node" c:type="xmlNode*"/>
      </return-value>
      <parameters>
        <parameter name="parent" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="180">an XML node structure</doc>
          <type name="libxml2.Node" c:type="const xmlNode*"/>
        </parameter>
        <parameter name="child_name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="181">element name of a child node</doc>
          <type name="libxml2.Char" c:type="const xmlChar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_get_node_text"
              c:identifier="e_xml_get_node_text"
              version="3.38"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="650">Retrieves content of the @node. If the @node is %NULL, then the
function does nothing and returns also %NULL.

This is similar to e_xml_dup_node_content(), except it does not
allocate new memory for the string. It also doesn't traverse
the element structure, is returns the first text node's value
only. It can be used to avoid unnecessary allocations, when
reading element values with a single text node as a child.</doc>
      <source-position filename="e-xml-utils.h" line="78"/>
      <return-value transfer-ownership="none" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="663">The @node content, or %NULL.

See: e_xml_dup_node_content()</doc>
        <type name="libxml2.Char" c:type="const xmlChar*"/>
      </return-value>
      <parameters>
        <parameter name="node"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="652">an #xmlNode</doc>
          <type name="libxml2.Node" c:type="const xmlNode*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_initialize_in_main"
              c:identifier="e_xml_initialize_in_main"
              version="3.28"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="42">Initializes libxml library global memory. This should be called
in the main thread. The function does nothing, when it had been
called already.</doc>
      <source-position filename="e-xml-utils.h" line="32"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
    </function>
    <function name="xml_is_element_name"
              c:identifier="e_xml_is_element_name"
              version="3.38"
              introspectable="0">
      <source-position filename="e-xml-utils.h" line="62"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="480">Whether the @node is an element node of name @name and with a namespace href set to @ns_href</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="node"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="476">an #xmlNode</doc>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </parameter>
        <parameter name="ns_href"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="477">a namespace href the node should have set, or %NULL for none namespace</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="name" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="478">an element name to search for</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_new_xpath_context_with_namespaces"
              c:identifier="e_xml_new_xpath_context_with_namespaces"
              version="3.26"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="228">Creates a new #xmlXPathContextPtr on @doc with preregistered
namespaces. The namepsaces are pair of (prefix, href), terminated
by %NULL.</doc>
      <source-position filename="e-xml-utils.h" line="43"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="237">a new #xmlXPathContextPtr. Free the returned
   pointer with xmlXPathFreeContext() when no longer needed.</doc>
        <type c:type="xmlXPathContext*"/>
      </return-value>
      <parameters>
        <parameter name="doc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="230">an #xmlDocPtr</doc>
          <type name="libxml2.Doc" c:type="xmlDoc*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="231">%NULL-terminated list of pairs (prefix, href) with namespaces</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_parse_data"
              c:identifier="e_xml_parse_data"
              version="3.26"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="205">Parses XML data into an #xmlDocPtr. Free returned pointer
with xmlFreeDoc(), when no longer needed.</doc>
      <source-position filename="e-xml-utils.h" line="40"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="213">a new #xmlDocPtr with parsed @data,
   or %NULL on error.</doc>
        <type name="libxml2.Doc" c:type="xmlDoc*"/>
      </return-value>
      <parameters>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="207">an XML data</doc>
          <array length="1" zero-terminated="0" c:type="gconstpointer">
            <type name="guint8"/>
          </array>
        </parameter>
        <parameter name="length" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="208">length of data, should be greated than zero</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_parse_file"
              c:identifier="e_xml_parse_file"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="65">Reads a local XML file and parses the contents into an XML document
structure.  If the XML file cannot be read or its contents are malformed,
the function returns %NULL.</doc>
      <source-position filename="e-xml-utils.h" line="34"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="73">an XML document structure, or %NULL</doc>
        <type name="libxml2.Doc" c:type="xmlDoc*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="67">path to an XML file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_save_file" c:identifier="e_xml_save_file">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="93">Writes the given XML document structure to the file given by @filename.
If an error occurs while saving, the function returns -1 and sets errno.</doc>
      <source-position filename="e-xml-utils.h" line="35"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="101">0 on success, -1 on failure</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="95">path to a file to save to</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="doc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="96">an XML document structure</doc>
          <type name="libxml2.Doc" c:type="xmlDoc*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_to_hash" c:identifier="e_xml_to_hash">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="34">Creates a #GHashTable representation of the #xmlDoc @doc.
If @type is * @E_XML_HASH_TYPE_PROPERTY, all XML nodes will be
indexed in the #GHashTable by name. If @type is
%E_XML_HASH_TYPE_OBJECT_UID, then XML objects will be indexed in
the hash by their UID (other nodes will still be indexed by name).</doc>
      <source-position filename="e-xml-hash-utils.h" line="41"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.c"
             line="45">The newly-created #GHashTable representation
of @doc.</doc>
        <type name="GLib.HashTable" c:type="GHashTable*">
          <type name="utf8"/>
          <type name="utf8"/>
        </type>
      </return-value>
      <parameters>
        <parameter name="doc" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="36">The #xmlDoc to store in a hash table.</doc>
          <type name="libxml2.Doc" c:type="xmlDoc*"/>
        </parameter>
        <parameter name="type" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="37">The value type to use as a key in the hash table.</doc>
          <type name="XmlHashType" c:type="EXmlHashType"/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_xpath_context_register_namespaces"
              c:identifier="e_xml_xpath_context_register_namespaces"
              version="3.26"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="273">Registers one or more additional namespaces. It's a caller's error
to try to register a namespace with the same prefix again, unless
the prefix uses the same namespace href.</doc>
      <source-position filename="e-xml-utils.h" line="46"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="xpath_ctx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="275">an #xmlXPathContextPtr</doc>
          <type c:type="xmlXPathContext*"/>
        </parameter>
        <parameter name="prefix" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="276">namespace prefix</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="href" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="277">namespace href</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="278">%NULL-terminated list of pairs (prefix, href) with additional namespaces</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_xpath_eval"
              c:identifier="e_xml_xpath_eval"
              version="3.26"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="329">Evaluates path specified by @format and returns its #xmlXPathObjectPtr,
in case the path evaluates to a non-empty node set. See also
e_xml_xpath_eval_as_string() which evaluates the path to string.</doc>
      <source-position filename="e-xml-utils.h" line="52"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="339">a new #xmlXPathObjectPtr which
   references given path, or %NULL if path cannot be found or when
   it evaluates to an empty nodeset. Free returned pointer with
   xmlXPathFreeObject(), when no longer needed.</doc>
        <type c:type="xmlXPathObject*"/>
      </return-value>
      <parameters>
        <parameter name="xpath_ctx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="331">an #xmlXPathContextPtr</doc>
          <type c:type="xmlXPathContext*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="332">printf-like format specifier of path to evaluate</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="333">arguments for the @format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_xpath_eval_as_string"
              c:identifier="e_xml_xpath_eval_as_string"
              version="3.26"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="377">Evaluates path specified by @format and returns its result as string,
in case the path evaluates to a non-empty node set. See also
e_xml_xpath_eval() which evaluates the path to an #xmlXPathObjectPtr.</doc>
      <source-position filename="e-xml-utils.h" line="55"/>
      <return-value transfer-ownership="full" nullable="1">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="387">a new string which contains value
   of the given path, or %NULL if path cannot be found or when
   it evaluates to an empty nodeset. Free returned pointer with
   g_free(), when no longer needed.</doc>
        <type name="utf8" c:type="gchar*"/>
      </return-value>
      <parameters>
        <parameter name="xpath_ctx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="379">an #xmlXPathContextPtr</doc>
          <type c:type="xmlXPathContext*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="380">printf-like format specifier of path to evaluate</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="381">arguments for the @format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xml_xpath_eval_exists"
              c:identifier="e_xml_xpath_eval_exists"
              version="3.26"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-utils.c"
           line="435">Evaluates path specified by @format and returns whether it exists.</doc>
      <source-position filename="e-xml-utils.h" line="58"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-xml-utils.c"
             line="443">%TRUE, when the given XPath exists, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="xpath_ctx" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="437">an #xmlXPathContextPtr</doc>
          <type c:type="xmlXPathContext*"/>
        </parameter>
        <parameter name="format" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="438">printf-like format specifier of path to evaluate</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="..." transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-utils.c"
               line="439">arguments for the @format</doc>
          <varargs/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_add" c:identifier="e_xmlhash_add">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="219">Adds a new key/value pair to the #EXmlHash @hash.</doc>
      <source-position filename="e-xml-hash-utils.h" line="70"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="221">the #EXmlHash to add an entry to</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="222">the key to use for the entry</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="223">the value of the new entry</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_compare" c:identifier="e_xmlhash_compare">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="267">Compares the value with key equal to @key in @hash against
@compare_data.</doc>
      <source-position filename="e-xml-hash-utils.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.c"
             line="276">E_XMLHASH_STATUS_SAME if the value and @compare_data are
         equal,E_XMLHASH_STATUS_DIFFERENT if they are different, or
         E_XMLHASH_STATUS_NOT_FOUND if there is no entry in @hash with
         its key equal to @key.</doc>
        <type name="XmlHashStatus" c:type="EXmlHashStatus"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="269">the #EXmlHash to compare against</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="270">the key of the hash entry to compare with</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
        <parameter name="compare_data" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="271">the data to compare against the hash entry</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_destroy" c:identifier="e_xmlhash_destroy">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="384">Frees the memory associated with @hash.</doc>
      <source-position filename="e-xml-hash-utils.h" line="85"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="386">The #EXmlHash to destroy.</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_foreach_key" c:identifier="e_xmlhash_foreach_key">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="319">Executes @func against each key/value pair in @hash.</doc>
      <source-position filename="e-xml-hash-utils.h" line="78"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="321">an #EXmlHash</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="322">the #EXmlHashFunc to execute on the data in @hash</doc>
          <type name="XmlHashFunc" c:type="EXmlHashFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="323">the data to pass to @func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_foreach_key_remove"
              c:identifier="e_xmlhash_foreach_key_remove">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="342">Calls g_hash_table_foreach_remove() on @hash&lt;!-- --&gt;'s internal hash
table.  See g_hash_table_foreach_remove() for details.</doc>
      <source-position filename="e-xml-hash-utils.h" line="81"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="344">an #EXmlHash</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
        <parameter name="func"
                   transfer-ownership="none"
                   scope="async"
                   closure="2">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="345">the #EXmlHashFunc to execute on the data in @hash</doc>
          <type name="XmlHashRemoveFunc" c:type="EXmlHashRemoveFunc"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="346">the data to pass to @func</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_new"
              c:identifier="e_xmlhash_new"
              introspectable="0">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="182">Creates a new #EXmlHash from the file @filename. If @filename does
not already exist, an empty #EXmlHash will be created.</doc>
      <source-position filename="e-xml-hash-utils.h" line="69"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="e-xml-hash-utils.c"
             line="189">The new #EXmlHash structure, or %NULL if unable to parse
         @filename.</doc>
        <type name="XmlHash" c:type="EXmlHash*"/>
      </return-value>
      <parameters>
        <parameter name="filename" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="184">the name of an XML file</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_remove" c:identifier="e_xmlhash_remove">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="240">Remove the entry in @hash with key equal to @key, if it exists.</doc>
      <source-position filename="e-xml-hash-utils.h" line="73"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="242">the #EXmlHash to remove an entry from</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
        <parameter name="key" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="243">the key of the entry to remove</doc>
          <type name="utf8" c:type="const gchar*"/>
        </parameter>
      </parameters>
    </function>
    <function name="xmlhash_write" c:identifier="e_xmlhash_write">
      <doc xml:space="preserve"
           filename="e-xml-hash-utils.c"
           line="362">Writes the XML represented by @hash to the file originally passed
to e_xmlhash_new().</doc>
      <source-position filename="e-xml-hash-utils.h" line="84"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="hash" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="e-xml-hash-utils.c"
               line="364">The #EXmlHash to write.</doc>
          <type name="XmlHash" c:type="EXmlHash*"/>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
