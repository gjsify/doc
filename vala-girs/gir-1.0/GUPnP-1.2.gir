<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="GSSDP" version="1.2"/>
  <include name="Gio" version="2.0"/>
  <include name="Soup" version="2.4"/>
  <include name="libxml2" version="2.0"/>
  <package name="gupnp-1.2"/>
  <c:include name="libgupnp/gupnp.h"/>
  <namespace name="GUPnP"
             version="1.2"
             shared-library="libgupnp-1.2.so.0"
             c:identifier-prefixes="GUPnP"
             c:symbol-prefixes="gupnp">
    <interface name="Acl"
               c:symbol-prefix="acl"
               c:type="GUPnPAcl"
               version="0.20.11"
               glib:type-name="GUPnPAcl"
               glib:get-type="gupnp_acl_get_type"
               glib:type-struct="AclInterface">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-acl.c"
           line="22">#GUPnPAcl provides either synchronous or asynchronous functions to check
whether a peer sould be able to access a resource or not.</doc>
      <source-position filename="../libgupnp/gupnp-acl.h" line="92"/>
      <virtual-method name="can_sync" invoker="can_sync" version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.c"
             line="151">Check whether gupnp_acl_is_allowed_async() is supported.</doc>
        <source-position filename="../libgupnp/gupnp-acl.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="153">A #GUPnPAcl
@returns %TRUE, if gupnp_acl_is_allowed_async() is supported, %FALSE
otherwise.</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_allowed" invoker="is_allowed" version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.c"
             line="44">Check whether an IP address is allowed to access this resource.</doc>
        <source-position filename="../libgupnp/gupnp-acl.h" line="62"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="46">an instance of #GUPnPAcl</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="47">The #GUPnPDevice associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPDevice*"/>
          </parameter>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="49">The #GUPnPService associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPService*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="51">The path being served.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="52">IP address of the peer.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="53">The User-Agent header of the peer or %NULL if not
unknown.
@returns %TRUE if the peer is allowed, %FALSE otherwise</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_allowed_async"
                      invoker="is_allowed_async"
                      version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.c"
             line="79">Optional. Check asynchronously whether an IP address is allowed to access
this resource. Use this function if the process of verifying the access right
is expected to take some time, for example when using D-Bus etc.

If this function is supported, gupnp_acl_can_sync() should return %TRUE.

Use gupnp_acl_is_allowed_finish() to retrieve the result.</doc>
        <source-position filename="../libgupnp/gupnp-acl.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="81">a #GUPnPAcl</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="82">The #GUPnPDevice associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPDevice*"/>
          </parameter>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="84">The #GUPnPService associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPService*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="86">The path being served.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="87">IP address of the peer</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="88">The User-Agent header of the peer or %NULL if not
unknown.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="90">A #GCancellable which can be used to cancel the
operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="92">Callback to call after the function is done.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="93">Some user data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="is_allowed_finish"
                      invoker="is_allowed_finish"
                      version="0.20.11"
                      throws="1">
        <source-position filename="../libgupnp/gupnp-acl.h" line="79"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="131">An instance of #GUPnPAcl</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="132">%GAsyncResult obtained from the callback in gupnp_acl_is_allowed_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="can_sync"
              c:identifier="gupnp_acl_can_sync"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.c"
             line="151">Check whether gupnp_acl_is_allowed_async() is supported.</doc>
        <source-position filename="../libgupnp/gupnp-acl.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="153">A #GUPnPAcl
@returns %TRUE, if gupnp_acl_is_allowed_async() is supported, %FALSE
otherwise.</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_allowed"
              c:identifier="gupnp_acl_is_allowed"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.c"
             line="44">Check whether an IP address is allowed to access this resource.</doc>
        <source-position filename="../libgupnp/gupnp-acl.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="46">an instance of #GUPnPAcl</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="47">The #GUPnPDevice associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPDevice*"/>
          </parameter>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="49">The #GUPnPService associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPService*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="51">The path being served.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="52">IP address of the peer.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="53">The User-Agent header of the peer or %NULL if not
unknown.
@returns %TRUE if the peer is allowed, %FALSE otherwise</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_allowed_async"
              c:identifier="gupnp_acl_is_allowed_async"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.c"
             line="79">Optional. Check asynchronously whether an IP address is allowed to access
this resource. Use this function if the process of verifying the access right
is expected to take some time, for example when using D-Bus etc.

If this function is supported, gupnp_acl_can_sync() should return %TRUE.

Use gupnp_acl_is_allowed_finish() to retrieve the result.</doc>
        <source-position filename="../libgupnp/gupnp-acl.h" line="103"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="81">a #GUPnPAcl</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
          <parameter name="device"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="82">The #GUPnPDevice associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPDevice*"/>
          </parameter>
          <parameter name="service"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="84">The #GUPnPService associated with @path or %NULL if
unknown.</doc>
            <type name="gpointer" c:type="_GUPnPService*"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="86">The path being served.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="address" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="87">IP address of the peer</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="agent"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="88">The User-Agent header of the peer or %NULL if not
unknown.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="90">A #GCancellable which can be used to cancel the
operation.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="92">Callback to call after the function is done.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="93">Some user data.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="is_allowed_finish"
              c:identifier="gupnp_acl_is_allowed_finish"
              version="0.20.11"
              throws="1">
        <source-position filename="../libgupnp/gupnp-acl.h" line="114"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="131">An instance of #GUPnPAcl</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-acl.c"
                 line="132">%GAsyncResult obtained from the callback in gupnp_acl_is_allowed_async()</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
    </interface>
    <record name="AclInterface"
            c:type="GUPnPAclInterface"
            glib:is-gtype-struct-for="Acl"
            version="0.20.11">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-acl.h"
           line="41">Implement a simple access control list for GUPnP.</doc>
      <source-position filename="../libgupnp/gupnp-acl.h" line="92"/>
      <field name="parent">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-acl.h"
             line="43">The parent interface.</doc>
        <type name="GObject.TypeInterface" c:type="GTypeInterface"/>
      </field>
      <field name="is_allowed">
        <callback name="is_allowed">
          <source-position filename="../libgupnp/gupnp-acl.h" line="62"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="46">an instance of #GUPnPAcl</doc>
              <type name="Acl" c:type="GUPnPAcl*"/>
            </parameter>
            <parameter name="device"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="47">The #GUPnPDevice associated with @path or %NULL if
unknown.</doc>
              <type name="gpointer" c:type="_GUPnPDevice*"/>
            </parameter>
            <parameter name="service"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="49">The #GUPnPService associated with @path or %NULL if
unknown.</doc>
              <type name="gpointer" c:type="_GUPnPService*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="51">The path being served.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="52">IP address of the peer.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="agent"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="53">The User-Agent header of the peer or %NULL if not
unknown.
@returns %TRUE if the peer is allowed, %FALSE otherwise</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_allowed_async">
        <callback name="is_allowed_async">
          <source-position filename="../libgupnp/gupnp-acl.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="81">a #GUPnPAcl</doc>
              <type name="Acl" c:type="GUPnPAcl*"/>
            </parameter>
            <parameter name="device"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="82">The #GUPnPDevice associated with @path or %NULL if
unknown.</doc>
              <type name="gpointer" c:type="_GUPnPDevice*"/>
            </parameter>
            <parameter name="service"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="84">The #GUPnPService associated with @path or %NULL if
unknown.</doc>
              <type name="gpointer" c:type="_GUPnPService*"/>
            </parameter>
            <parameter name="path" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="86">The path being served.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="address" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="87">IP address of the peer</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="agent"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="88">The User-Agent header of the peer or %NULL if not
unknown.</doc>
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="cancellable"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="90">A #GCancellable which can be used to cancel the
operation.</doc>
              <type name="Gio.Cancellable" c:type="GCancellable*"/>
            </parameter>
            <parameter name="callback"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       scope="async"
                       closure="8">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="92">Callback to call after the function is done.</doc>
              <type name="Gio.AsyncReadyCallback"
                    c:type="GAsyncReadyCallback"/>
            </parameter>
            <parameter name="user_data"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1"
                       closure="8">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="93">Some user data.</doc>
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="is_allowed_finish">
        <callback name="is_allowed_finish" throws="1">
          <source-position filename="../libgupnp/gupnp-acl.h" line="79"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="131">An instance of #GUPnPAcl</doc>
              <type name="Acl" c:type="GUPnPAcl*"/>
            </parameter>
            <parameter name="res" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="132">%GAsyncResult obtained from the callback in gupnp_acl_is_allowed_async()</doc>
              <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="can_sync">
        <callback name="can_sync">
          <source-position filename="../libgupnp/gupnp-acl.h" line="83"/>
          <return-value transfer-ownership="none">
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="self" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="../libgupnp/gupnp-acl.c"
                   line="153">A #GUPnPAcl
@returns %TRUE, if gupnp_acl_is_allowed_async() is supported, %FALSE
otherwise.</doc>
              <type name="Acl" c:type="GUPnPAcl*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-acl.h" line="88"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-acl.h" line="89"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-acl.h" line="90"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-acl.h" line="91"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <glib:boxed glib:name="BinBase64"
                c:symbol-prefix="bin_base64"
                glib:type-name="GUPnPBinBase64"
                glib:get-type="gupnp_bin_base64_get_type">
    </glib:boxed>
    <glib:boxed glib:name="BinHex"
                c:symbol-prefix="bin_hex"
                glib:type-name="GUPnPBinHex"
                glib:get-type="gupnp_bin_hex_get_type">
    </glib:boxed>
    <class name="Context"
           c:symbol-prefix="context"
           c:type="GUPnPContext"
           parent="GSSDP.Client"
           glib:type-name="GUPnPContext"
           glib:get-type="gupnp_context_get_type"
           glib:type-struct="ContextClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-context.c"
           line="25">#GUPnPContext wraps the networking bits that are used by the various
GUPnP classes. It automatically starts a web server on demand.

For debugging, it is possible to see the messages being sent and received by
exporting &lt;envar&gt;GUPNP_DEBUG&lt;/envar&gt;.</doc>
      <source-position filename="../libgupnp/gupnp-context.h" line="46"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="gupnp_context_new" throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="671">Create a new #GUPnPContext with the specified @main_context, @iface and
@port.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="49"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="681">A new #GUPnPContext object, or %NULL on an error</doc>
          <type name="Context" c:type="GUPnPContext*"/>
        </return-value>
        <parameters>
          <parameter name="iface"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="673">The network interface to use, or %NULL to
auto-detect.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="675">Port to run on, or 0 if you don't care what port is used.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="add_server_handler"
              c:identifier="gupnp_context_add_server_handler"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1532">Add a #SoupServerCallback to the #GUPnPContext&lt;!-- --&gt;'s #SoupServer.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="99"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1534">a #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="use_acl" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1535">%TRUE, if the path should query the GUPnPContext::acl before
serving the resource, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1537">the toplevel path for the handler.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1538">callback to invoke for requests under @path</doc>
            <type name="Soup.ServerCallback" c:type="SoupServerCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1539">the user_data passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="destroy"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1540">A #GDestroyNotify for @user_data or %NULL if none.</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_acl"
              c:identifier="gupnp_context_get_acl"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1388">Access the #GUPnPAcl associated with this client. If there isn't any,
retturns %NULL. The returned ACL must not be freed.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="92"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="1395">The access control list associated with this context or %NULL
if no acl is set.</doc>
          <type name="Acl" c:type="GUPnPAcl*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1390">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_default_language"
              c:identifier="gupnp_context_get_default_language"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="815">Get the default Content-Language header for this context.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="821">The default content of the Content-Language
header.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="817">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port" c:identifier="gupnp_context_get_port">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="696">Get the port that the SOAP server is running on.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="702">The port the SOAP server is running on.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="698">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_server" c:identifier="gupnp_context_get_server">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="579">Get the #SoupServer HTTP server that GUPnP is using.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="585">The #SoupServer used by GUPnP. Do not unref this when finished.</doc>
          <type name="Soup.Server" c:type="SoupServer*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="581">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_session"
              c:identifier="gupnp_context_get_session"
              version="0.12.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="542">Get the #SoupSession object that GUPnP is using.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="60"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="548">The #SoupSession used by GUPnP. Do not unref
this when finished.</doc>
          <type name="Soup.Session" c:type="SoupSession*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="544">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subscription_timeout"
              c:identifier="gupnp_context_get_subscription_timeout">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="741">Get the event subscription timeout (in seconds), or 0 meaning there is no
timeout.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="748">The event subscription timeout in seconds.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="743">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="host_path" c:identifier="gupnp_context_host_path">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1254">Start hosting @local_path at @server_path. Files with the path
@local_path.LOCALE (if they exist) will be served up when LOCALE is
specified in the request's Accept-Language header.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="77"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1256">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="local_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1257">Path to the local file or folder to be hosted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="server_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1258">Web server path where @local_path should be hosted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="host_path_for_agent"
              c:identifier="gupnp_context_host_path_for_agent"
              version="0.13.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1305">Use this method to serve different local path to specific user-agent(s). The
path @server_path must already be hosted by @context.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="1315">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1307">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="local_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1308">Path to the local file or folder to be hosted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="server_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1309">Web server path already being hosted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="user_agent" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1310">The user-agent as a #GRegex.</doc>
            <type name="GLib.Regex" c:type="GRegex*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_server_handler"
              c:identifier="gupnp_context_remove_server_handler"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1592">Remove a #SoupServerCallback from the #GUPnPContext&lt;!-- --&gt;'s #SoupServer.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1594">a #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1595">the toplevel path for the handler.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rewrite_uri"
              c:identifier="gupnp_context_rewrite_uri"
              version="1.1.1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1612">Utility function to re-write an uri to the IPv6 link-local form which has
the zone index appended to the IP address.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="111"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context.c"
               line="1620">A re-written version of the @uri if the context is on a link-local
IPv6 address, a copy of the @uri otherwise or %NULL if @uri was invalid</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1614">a #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1615">an uri to rewrite if necessary</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_acl"
              c:identifier="gupnp_context_set_acl"
              version="0.20.11">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1411">Attach or remove the assoicated access control list to this context. If
@acl is %NULL, the current access control list will be removed.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1413">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="acl"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1414">The new access control list or %NULL to remove the
current list.</doc>
            <type name="Acl" c:type="GUPnPAcl*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_default_language"
              c:identifier="gupnp_context_set_default_language"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="775">Set the default language for the Content-Length header to @language.

If the client sends an Accept-Language header the UPnP HTTP server
is required to send a Content-Language header in return. If there are
no files hosted in languages which match the requested ones the
Content-Language header is set to this value. The default value is "en".</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="70"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="777">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="language" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="778">A language tag as defined in RFC 2616 3.10</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subscription_timeout"
              c:identifier="gupnp_context_set_subscription_timeout">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="718">Sets the event subscription timeout to @timeout. Use 0 if you don't
want subscriptions to time out. Note that any client side subscriptions
will automatically be renewed.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="720">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="timeout" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="721">Event subscription timeout in seconds</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="unhost_path" c:identifier="gupnp_context_unhost_path">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="1352">Stop hosting the file or folder at @server_path.</doc>
        <source-position filename="../libgupnp/gupnp-context.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1354">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </instance-parameter>
          <parameter name="server_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context.c"
                 line="1355">Web server path where the file or folder is hosted</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <property name="acl"
                version="0.20.11"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="523">An access control list.</doc>
        <type name="Acl"/>
      </property>
      <property name="default-language"
                version="0.17.0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="501">The content of the Content-Language header id the client
sends Accept-Language and no language-specific pages to serve
exist. The property defaults to 'en'.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="port"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="428">The port to run on. Set to 0 if you don't care what port to run on.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="server" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="446">The #SoupServer HTTP server used by GUPnP.</doc>
        <type name="Soup.Server"/>
      </property>
      <property name="session" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="463">The #SoupSession object used by GUPnP.</doc>
        <type name="Soup.Session"/>
      </property>
      <property name="subscription-timeout"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context.c"
             line="480">The preferred subscription timeout: the number of seconds after
which subscriptions are renewed. Set to '0' if subscriptions
are never to time out.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <field name="parent_instance">
        <type name="GSSDP.Client" c:type="GSSDPClient"/>
      </field>
    </class>
    <record name="ContextClass"
            c:type="GUPnPContextClass"
            glib:is-gtype-struct-for="Context">
      <source-position filename="../libgupnp/gupnp-context.h" line="46"/>
      <field name="parent_class">
        <type name="GSSDP.ClientClass" c:type="GSSDPClientClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-context.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-context.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-context.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-context.h" line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ContextManager"
           c:symbol-prefix="context_manager"
           c:type="GUPnPContextManager"
           version="0.13.0"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GUPnPContextManager"
           glib:get-type="gupnp_context_manager_get_type"
           glib:type-struct="ContextManagerClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-context-manager.c"
           line="26">A Utility class that takes care of creation and destruction of
#GUPnPContext objects for all available network interfaces as they go up
(connect) and down (disconnect), respectively.</doc>
      <source-position filename="../libgupnp/gupnp-context-manager.h"
                       line="52"/>
      <function name="create"
                c:identifier="gupnp_context_manager_create"
                version="0.17.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="609">Factory-method to create a new #GUPnPContextManager. The final type of the
#GUPnPContextManager depends on the compile-time selection or - in case of
NetworkManager - on its availability during runtime. If it is not available,
the implementation falls back to the basic Unix context manager instead.

Equivalent to calling #gupnp_context_manager_create_full (%GSSDP_UDA_VERSION_1_0, %G_SOCKET_FAMILY_IPV4, port);</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="55"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context-manager.c"
               line="620">A new #GUPnPContextManager object.</doc>
          <type name="ContextManager" c:type="GUPnPContextManager*"/>
        </return-value>
        <parameters>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="611">Port to create contexts for, or 0 if you don't care what port is used.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <function name="create_full"
                c:identifier="gupnp_context_manager_create_full"
                version="1.1.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="632">Factory-method to create a new #GUPnPContextManager. The final type of the
#GUPnPContextManager depends on the compile-time selection or - in case of
NetworkManager - on its availability during runtime. If it is not available,
the implementation falls back to the basic Unix context manager instead.</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="58"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context-manager.c"
               line="644">A new #GUPnPContextManager object.</doc>
          <type name="ContextManager" c:type="GUPnPContextManager*"/>
        </return-value>
        <parameters>
          <parameter name="uda_version" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="634">#GSSDPUDAVersion the created contexts should implement
(UDA 1.0 or 1.1). For %GSSDP_UDA_VERSION_UNSPECIFIED for default.</doc>
            <type name="GSSDP.UDAVersion" c:type="GSSDPUDAVersion"/>
          </parameter>
          <parameter name="family" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="636">#GSocketFamily to create the context for</doc>
            <type name="Gio.SocketFamily" c:type="GSocketFamily"/>
          </parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="637">Port to create contexts for, or 0 if you don't care what port is used.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_port"
              c:identifier="gupnp_context_manager_get_port"
              version="0.19.1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="795">Get the network port associated with this context manager.</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context-manager.c"
               line="800">The network port asssociated with this context manager.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="797">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_socket_family"
              c:identifier="gupnp_context_manager_get_socket_family">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="837">Get the #GSocketFamily the contexts are created for. Can be
%G_SOCKET_FAMILY_IPV6, %G_SOCKET_FAMILY_IPV4 or %G_SOCKET_FAMILY_INVALID for
both</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context-manager.c"
               line="845">The socket family</doc>
          <type name="Gio.SocketFamily" c:type="GSocketFamily"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="839">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uda_version"
              c:identifier="gupnp_context_manager_get_uda_version">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="860">Get the UDA protocol version the contexts are implementing</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context-manager.c"
               line="866">The UDA protocol version</doc>
          <type name="GSSDP.UDAVersion" c:type="GSSDPUDAVersion"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="862">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_white_list"
              c:identifier="gupnp_context_manager_get_white_list">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="816">Get the #GUPnPWhiteList associated with @manager.</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-context-manager.c"
               line="822">The #GUPnPWhiteList asssociated with this
context manager.</doc>
          <type name="WhiteList" c:type="GUPnPWhiteList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="818">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="manage_control_point"
              c:identifier="gupnp_context_manager_manage_control_point"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="741">By calling this function, you are asking @manager to keep a reference to
@control_point until its associated #GUPnPContext is no longer available.
You usually want to call this function from
#GUPnPContextManager::context-available handler after you create a
#GUPnPControlPoint object for the newly available context.</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="743">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
          <parameter name="control_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="744">The #GUPnPControlPoint to be taken care of</doc>
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="manage_root_device"
              c:identifier="gupnp_context_manager_manage_root_device"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="768">By calling this function, you are asking @manager to keep a reference to
@root_device when its associated #GUPnPContext is no longer available. You
usually want to call this function from
#GUPnPContextManager::context-available handler after you create a
#GUPnPRootDevice object for the newly available context.</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="770">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
          <parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="771">The #GUPnPRootDevice to be taken care of</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </parameter>
        </parameters>
      </method>
      <method name="rescan_control_points"
              c:identifier="gupnp_context_manager_rescan_control_points"
              version="0.20.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="708">This function starts a rescan on every control point managed by @manager.
Only the active control points send discovery messages.
This function should be called when servers are suspected to have
disappeared.</doc>
        <source-position filename="../libgupnp/gupnp-context-manager.h"
                         line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="manager" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="710">A #GUPnPContextManager</doc>
            <type name="ContextManager" c:type="GUPnPContextManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="family"
                version="1.1.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="509">The socket family to create contexts for. Use %G_SOCKET_FAMILY_INVALID
for any or %G_SOCKET_FAMILY_IPV4 for IPv4 contexts or
%G_SOCKET_FAMILY_IPV6 for IPv6 contexts</doc>
        <type name="Gio.SocketFamily"/>
      </property>
      <property name="port"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="491">Port the contexts listen on, or 0 if you don't care what
port is used by #GUPnPContext objects created by this object.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="uda-version"
                version="1.1.2"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="530">The UDA version the contexts will support. Use %GSSDP_UDA_VERSION_UNSPECIFIED
for using the default UDA version.</doc>
        <type name="GSSDP.UDAVersion"/>
      </property>
      <property name="white-list" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="550">The white list to use.</doc>
        <type name="WhiteList"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <glib:signal name="context-available" when="first">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="567">Signals the availability of new #GUPnPContext.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="570">The now available #GUPnPContext</doc>
            <type name="Context"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="context-unavailable" when="first">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-context-manager.c"
             line="585">Signals the unavailability of a #GUPnPContext.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-context-manager.c"
                 line="588">The now unavailable #GUPnPContext</doc>
            <type name="Context"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ContextManagerClass"
            c:type="GUPnPContextManagerClass"
            glib:is-gtype-struct-for="ContextManager">
      <source-position filename="../libgupnp/gupnp-context-manager.h"
                       line="52"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-context-manager.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-context-manager.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-context-manager.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-context-manager.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="ControlError"
                 glib:type-name="GUPnPControlError"
                 glib:get-type="gupnp_control_error_get_type"
                 c:type="GUPnPControlError"
                 glib:error-domain="gupnp-control-error">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-error.h"
           line="80">#GError codes used for errors in the #GUPNP_CONTROL_ERROR domain, during
invocation of service actions.</doc>
      <member name="invalid_action"
              value="401"
              c:identifier="GUPNP_CONTROL_ERROR_INVALID_ACTION"
              glib:nick="invalid-action">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="82">The action name was invalid.</doc>
      </member>
      <member name="invalid_args"
              value="402"
              c:identifier="GUPNP_CONTROL_ERROR_INVALID_ARGS"
              glib:nick="invalid-args">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="83">The action arguments were invalid.</doc>
      </member>
      <member name="out_of_sync"
              value="403"
              c:identifier="GUPNP_CONTROL_ERROR_OUT_OF_SYNC"
              glib:nick="out-of-sync">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="84">Out of sync (deprecated).</doc>
      </member>
      <member name="action_failed"
              value="501"
              c:identifier="GUPNP_CONTROL_ERROR_ACTION_FAILED"
              glib:nick="action-failed">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="85">The action failed.</doc>
      </member>
      <function name="quark" c:identifier="gupnp_control_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="ControlPoint"
           c:symbol-prefix="control_point"
           c:type="GUPnPControlPoint"
           parent="GSSDP.ResourceBrowser"
           glib:type-name="GUPnPControlPoint"
           glib:get-type="gupnp_control_point_get_type"
           glib:type-struct="ControlPointClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-control-point.c"
           line="22">#GUPnPControlPoint handles device and service discovery. After creating
a control point and activating it using gssdp_resource_browser_set_active(),
the ::device-proxy-available, ::service-proxy-available,
::device-proxy-unavailable and ::service-proxy-unavailable signals will
be emitted whenever the availability of a device or service matching
the specified discovery target changes.</doc>
      <source-position filename="../libgupnp/gupnp-control-point.h" line="63"/>
      <constructor name="new" c:identifier="gupnp_control_point_new">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1140">Create a new #GUPnPControlPoint with the specified @context and @target.

@target should be a service or device name, such as
&lt;literal&gt;urn:schemas-upnp-org:service:WANIPConnection:1&lt;/literal&gt; or
&lt;literal&gt;urn:schemas-upnp-org:device:MediaRenderer:1&lt;/literal&gt;.</doc>
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-control-point.c"
               line="1151">A new #GUPnPControlPoint object.</doc>
          <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1142">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1143">The search target</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full" c:identifier="gupnp_control_point_new_full">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1166">Create a new #GUPnPControlPoint with the specified @context, @factory and
@target.

@target should be a service or device name, such as
&lt;literal&gt;urn:schemas-upnp-org:service:WANIPConnection:1&lt;/literal&gt; or
&lt;literal&gt;urn:schemas-upnp-org:device:MediaRenderer:1&lt;/literal&gt;.</doc>
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="70"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-control-point.c"
               line="1179">A new #GUPnPControlPoint object.</doc>
          <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1168">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1169">A #GUPnPResourceFactory</doc>
            <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
          </parameter>
          <parameter name="target" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1170">The search target</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="device_proxy_available">
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="DeviceProxy" c:type="GUPnPDeviceProxy*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="device_proxy_unavailable">
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="DeviceProxy" c:type="GUPnPDeviceProxy*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_proxy_available">
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="service_proxy_unavailable">
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
          <parameter name="proxy" transfer-ownership="none">
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_context"
              c:identifier="gupnp_control_point_get_context">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1198">Get the #GUPnPControlPoint associated with @control_point.</doc>
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-control-point.c"
               line="1204">The #GUPnPContext.</doc>
          <type name="Context" c:type="GUPnPContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1200">A #GUPnPControlPoint</doc>
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource_factory"
              c:identifier="gupnp_control_point_get_resource_factory">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1263">Get the #GUPnPResourceFactory used by the @control_point.</doc>
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-control-point.c"
               line="1269">A #GUPnPResourceFactory.</doc>
          <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1265">A #GUPnPControlPoint</doc>
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_device_proxies"
              c:identifier="gupnp_control_point_list_device_proxies">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1219">Get the #GList of discovered #GUPnPDeviceProxy objects. Do not free the list
nor its elements.</doc>
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-control-point.c"
               line="1226">a #GList of
#GUPnPDeviceProxy objects.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="DeviceProxy"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1221">A #GUPnPControlPoint</doc>
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_service_proxies"
              c:identifier="gupnp_control_point_list_service_proxies">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1241">Get the #GList of discovered #GUPnPServiceProxy objects. Do not free the
list nor its elements.</doc>
        <source-position filename="../libgupnp/gupnp-control-point.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-control-point.c"
               line="1248">a #GList
of #GUPnPServiceProxy objects.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="ServiceProxy"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="control_point" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1243">A #GUPnPControlPoint</doc>
            <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="resource-factory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1037">The resource factory to use. Set to NULL for default factory.</doc>
        <type name="ResourceFactory"/>
      </property>
      <field name="parent_instance">
        <type name="GSSDP.ResourceBrowser" c:type="GSSDPResourceBrowser"/>
      </field>
      <glib:signal name="device-proxy-available" when="last">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1055">The ::device-proxy-available signal is emitted whenever a new
device has become available.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1058">The now available #GUPnPDeviceProxy</doc>
            <type name="DeviceProxy"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="device-proxy-unavailable" when="last">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1076">The ::device-proxy-unavailable signal is emitted whenever a
device is not available any more.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1079">The now unavailable #GUPnPDeviceProxy</doc>
            <type name="DeviceProxy"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-proxy-available" when="last">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1097">The ::service-proxy-available signal is emitted whenever a new
service has become available.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1100">The now available #GUPnPServiceProxy</doc>
            <type name="ServiceProxy"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="service-proxy-unavailable" when="last">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-control-point.c"
             line="1118">The ::service-proxy-unavailable signal is emitted whenever a
service is not available any more.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-control-point.c"
                 line="1121">The now unavailable #GUPnPServiceProxy</doc>
            <type name="ServiceProxy"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ControlPointClass"
            c:type="GUPnPControlPointClass"
            glib:is-gtype-struct-for="ControlPoint">
      <source-position filename="../libgupnp/gupnp-control-point.h" line="63"/>
      <field name="parent_class">
        <type name="GSSDP.ResourceBrowserClass"
              c:type="GSSDPResourceBrowserClass"/>
      </field>
      <field name="device_proxy_available">
        <callback name="device_proxy_available">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control_point" transfer-ownership="none">
              <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="DeviceProxy" c:type="GUPnPDeviceProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="device_proxy_unavailable">
        <callback name="device_proxy_unavailable">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control_point" transfer-ownership="none">
              <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="DeviceProxy" c:type="GUPnPDeviceProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_proxy_available">
        <callback name="service_proxy_available">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control_point" transfer-ownership="none">
              <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="service_proxy_unavailable">
        <callback name="service_proxy_unavailable">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="control_point" transfer-ownership="none">
              <type name="ControlPoint" c:type="GUPnPControlPoint*"/>
            </parameter>
            <parameter name="proxy" transfer-ownership="none">
              <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-control-point.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <glib:boxed glib:name="Date"
                c:symbol-prefix="date"
                glib:type-name="GUPnPDate"
                glib:get-type="gupnp_date_get_type">
    </glib:boxed>
    <glib:boxed glib:name="DateTime"
                c:symbol-prefix="date_time"
                glib:type-name="GUPnPDateTime"
                glib:get-type="gupnp_date_time_get_type">
    </glib:boxed>
    <glib:boxed glib:name="DateTimeTZ"
                c:symbol-prefix="date_time_tz"
                glib:type-name="GUPnPDateTimeTZ"
                glib:get-type="gupnp_date_time_tz_get_type">
    </glib:boxed>
    <class name="Device"
           c:symbol-prefix="device"
           c:type="GUPnPDevice"
           parent="DeviceInfo"
           glib:type-name="GUPnPDevice"
           glib:get-type="gupnp_device_get_type"
           glib:type-struct="DeviceClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-device.c"
           line="22">#GUPnPDevice allows for retrieving a device's subdevices
and services. #GUPnPDevice implements the #GUPnPDeviceInfo
interface.</doc>
      <source-position filename="../libgupnp/gupnp-device.h" line="45"/>
      <property name="root-device"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device.c"
             line="235">The containing #GUPnPRootDevice, or NULL if this is the root
device.</doc>
        <type name="RootDevice"/>
      </property>
      <field name="parent_instance">
        <type name="DeviceInfo" c:type="GUPnPDeviceInfo"/>
      </field>
    </class>
    <record name="DeviceClass"
            c:type="GUPnPDeviceClass"
            glib:is-gtype-struct-for="Device">
      <source-position filename="../libgupnp/gupnp-device.h" line="45"/>
      <field name="parent_class">
        <type name="DeviceInfoClass" c:type="GUPnPDeviceInfoClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-device.h" line="41"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-device.h" line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-device.h" line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-device.h" line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="DeviceInfo"
           c:symbol-prefix="device_info"
           c:type="GUPnPDeviceInfo"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GUPnPDeviceInfo"
           glib:get-type="gupnp_device_info_get_type"
           glib:type-struct="DeviceInfoClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-device-info.c"
           line="22">The #GUPnPDeviceInfo base abstract class provides methods for querying
device information.</doc>
      <source-position filename="../libgupnp/gupnp-device-info.h" line="63"/>
      <virtual-method name="get_element" introspectable="0">
        <source-position filename="../libgupnp/gupnp-device-info.h" line="48"/>
        <return-value>
          <type name="libxml2.Node" c:type="xmlNode*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_context" c:identifier="gupnp_device_info_get_context">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="389">Get the associated #GUPnPContext.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="395">A #GUPnPContext.</doc>
          <type name="Context" c:type="GUPnPContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="391">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description_value"
              c:identifier="gupnp_device_info_get_description_value"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1123">This function provides generic access to the contents of arbitrary elements
in the device description file.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="130"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1131">a newly allocated string or %NULL if the device
              description doesn't contain the given @element</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1125">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
          <parameter name="element" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1126">Name of the description element to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device" c:identifier="gupnp_device_info_get_device">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1248">Get the service with type @type directly contained in @info as
a new object implementing #GUPnPDeviceInfo, or %NULL if no such device
was found. The returned object should be unreffed when done.

Note that devices are not cached internally, so that every time you call
this function a new object is created. The application must cache any used
devices if it wishes to keep them around and re-use them.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="139"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1261">A new #GUPnPDeviceInfo.</doc>
          <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1250">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1251">The type of the device to be retrieved.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_device_type"
              c:identifier="gupnp_device_info_get_device_type">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="474">Get the UPnP device type.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="480">A constant string, or %NULL.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="476">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_friendly_name"
              c:identifier="gupnp_device_info_get_friendly_name">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="499">Get the friendly name of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="505">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="501">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon_url"
              c:identifier="gupnp_device_info_get_icon_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="756">Get a URL pointing to the icon most closely matching the
given criteria, or %NULL. If @requested_mime_type is set, only icons with
this mime type will be returned. If @requested_depth is set, only icons with
this or lower depth will be returned. If @requested_width and/or
@requested_height are set, only icons that are this size or smaller are
returned, unless @prefer_bigger is set, in which case the next biggest icon
will be returned. The returned strings should be freed.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="784">a string, or %NULL.  g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="758">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
          <parameter name="requested_mime_type"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="759">The requested file
format, or %NULL for any</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="requested_depth" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="761">The requested color depth, or -1 for any</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="requested_width" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="762">The requested width, or -1 for any</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="requested_height" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="763">The requested height, or -1 for any</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="prefer_bigger" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="764">%TRUE if a bigger, rather than a smaller icon should be
returned if no exact match could be found</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
          <parameter name="mime_type"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="766">The location where to store the the format
of the returned icon, or %NULL. The returned string should be freed after
use</doc>
            <type name="utf8" c:type="char**"/>
          </parameter>
          <parameter name="depth"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="769">The location where to store the depth of the
returned icon, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="width"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="771">The location where to store the width of the
returned icon, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
          <parameter name="height"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="773">The location where to store the height of the
returned icon, or %NULL</doc>
            <type name="gint" c:type="int*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="gupnp_device_info_get_location">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="409">Get the location of the device description file.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="415">A constant string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="411">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer"
              c:identifier="gupnp_device_info_get_manufacturer">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="520">Get the manufacturer of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="85"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="526">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="522">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_manufacturer_url"
              c:identifier="gupnp_device_info_get_manufacturer_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="541">Get a URL pointing to the manufacturer's website.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="547">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="543">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model_description"
              c:identifier="gupnp_device_info_get_model_description">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="563">Get the description of the device model.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="91"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="569">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="565">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model_name"
              c:identifier="gupnp_device_info_get_model_name">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="584">Get the model name of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="94"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="590">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="586">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model_number"
              c:identifier="gupnp_device_info_get_model_number">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="605">Get the model number of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="97"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="611">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="607">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_model_url"
              c:identifier="gupnp_device_info_get_model_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="626">Get a URL pointing to the device model's website.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="632">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="628">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_presentation_url"
              c:identifier="gupnp_device_info_get_presentation_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="690">Get a URL pointing to the device's presentation page, for web-based
administration.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="121"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="697">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="692">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_resource_factory"
              c:identifier="gupnp_device_info_get_resource_factory">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="369">Get the #GUPnPResourceFactory used by the @device_info.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="375">A #GUPnPResourceFactory.</doc>
          <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device_info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="371">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_serial_number"
              c:identifier="gupnp_device_info_get_serial_number">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="648">Get the serial number of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="654">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="650">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service" c:identifier="gupnp_device_info_get_service">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1411">Get the service with type @type directly contained in @info as a new object
implementing #GUPnPServiceInfo, or %NULL if no such device was found. The
returned object should be unreffed when done.

Note that services are not cached internally, so that every time you call
this function a new object is created. The application must cache any used
services if it wishes to keep them around and re-use them.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="149"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1424">A #GUPnPServiceInfo.</doc>
          <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1413">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1414">The type of the service to be retrieved.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_udn" c:identifier="gupnp_device_info_get_udn">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="449">Get the Unique Device Name of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="455">A constant string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="451">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_upc" c:identifier="gupnp_device_info_get_upc">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="669">Get the Universal Product Code of the device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="675">A string, or %NULL. g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="671">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url_base"
              c:identifier="gupnp_device_info_get_url_base">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="429">Get the URL base of this device.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="435">A #SoupURI.</doc>
          <type name="Soup.URI" c:type="const SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="431">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_device_types"
              c:identifier="gupnp_device_info_list_device_types">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1203">Get a #GList of strings representing the types of the devices
directly contained in @info.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="136"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1210">A #GList of strings. The
elements should be g_free()'d and the list should be g_list_free()'d.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1205">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_devices"
              c:identifier="gupnp_device_info_list_devices">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1151">Get a #GList of new objects implementing #GUPnPDeviceInfo
representing the devices directly contained in @info. The returned list
should be g_list_free()'d and the elements should be g_object_unref()'d.

Note that devices are not cached internally, so that every time you
call this function new objects are created. The application
must cache any used devices if it wishes to keep them around and re-use
them.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="133"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1164">a #GList of
new #GUPnPDeviceInfo objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="DeviceInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1153">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_dlna_capabilities"
              c:identifier="gupnp_device_info_list_dlna_capabilities"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1064">Get a #GList of strings that represent the device capabilities as announced
in the device description file using the &amp;lt;dlna:X_DLNACAP&amp;gt; element.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="127"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1071">a #GList of newly allocated strings or
%NULL if the device description doesn't contain the &amp;lt;dlna:X_DLNACAP&amp;gt;
element.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1066">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_dlna_device_class_identifier"
              c:identifier="gupnp_device_info_list_dlna_device_class_identifier"
              version="0.20.4">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1017">Get a #GList of strings that represent the device class and version as
announced in the device description file using the &amp;lt;dlna:X_DLNADOC&amp;gt;
element.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="124"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1024">a #GList of newly allocated strings or
%NULL if the device description doesn't contain the &amp;lt;dlna:X_DLNADOC&amp;gt;
element.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1019">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_service_types"
              c:identifier="gupnp_device_info_list_service_types">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1366">Get a #GList of strings representing the types of the services
directly contained in @info.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="146"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1373">A #GList of strings. The
elements should be g_free()'d and the list should be g_list_free()'d.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1368">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_services"
              c:identifier="gupnp_device_info_list_services">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="1315">Get a #GList of new objects implementing #GUPnPServiceInfo representing the
services directly contained in @info. The returned list should be
g_list_free()'d and the elements should be g_object_unref()'d.

Note that services are not cached internally, so that every time you call
function new objects are created. The application must cache any used
services if it wishes to keep them around and re-use them.</doc>
        <source-position filename="../libgupnp/gupnp-device-info.h"
                         line="143"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-device-info.c"
               line="1327">A #GList of
new #GUPnPServiceInfo objects.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="ServiceInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-device-info.c"
                 line="1317">A #GUPnPDeviceInfo</doc>
            <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="236">The #GUPnPContext to use.</doc>
        <type name="Context"/>
      </property>
      <property name="device-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="291">The device type.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="document"
                stability="Private"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="327">Private property.</doc>
        <type name="XMLDoc"/>
      </property>
      <property name="element"
                stability="Private"
                readable="0"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="348">Private property.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="location"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="254">The location of the device description file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="resource-factory"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="218">The resource factory to use. Set to NULL for default factory.</doc>
        <type name="ResourceFactory"/>
      </property>
      <property name="udn"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="273">The UDN of this device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="url-base"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-device-info.c"
             line="309">The URL base (#SoupURI).</doc>
        <type name="Soup.URI"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="DeviceInfoClass"
            c:type="GUPnPDeviceInfoClass"
            glib:is-gtype-struct-for="DeviceInfo">
      <source-position filename="../libgupnp/gupnp-device-info.h" line="63"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="get_element" introspectable="0">
        <callback name="get_element" introspectable="0">
          <source-position filename="../libgupnp/gupnp-device-info.h"
                           line="48"/>
          <return-value>
            <type name="libxml2.Node" c:type="xmlNode*"/>
          </return-value>
          <parameters>
            <parameter name="info" transfer-ownership="none">
              <type name="DeviceInfo" c:type="GUPnPDeviceInfo*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-device-info.h"
                           line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-device-info.h"
                           line="60"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-device-info.h"
                           line="61"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-device-info.h"
                           line="62"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="DeviceProxy"
           c:symbol-prefix="device_proxy"
           c:type="GUPnPDeviceProxy"
           parent="DeviceInfo"
           glib:type-name="GUPnPDeviceProxy"
           glib:get-type="gupnp_device_proxy_get_type"
           glib:type-struct="DeviceProxyClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-device-proxy.c"
           line="22">#GUPnPDeviceProxy allows for retrieving proxies for a device's subdevices
and services. #GUPnPDeviceProxy implements the #GUPnPDeviceInfo interface.</doc>
      <source-position filename="../libgupnp/gupnp-device-proxy.h" line="46"/>
      <field name="parent_instance">
        <type name="DeviceInfo" c:type="GUPnPDeviceInfo"/>
      </field>
    </class>
    <record name="DeviceProxyClass"
            c:type="GUPnPDeviceProxyClass"
            glib:is-gtype-struct-for="DeviceProxy">
      <source-position filename="../libgupnp/gupnp-device-proxy.h" line="46"/>
      <field name="parent_class">
        <type name="DeviceInfoClass" c:type="GUPnPDeviceInfoClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-device-proxy.h"
                           line="42"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-device-proxy.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-device-proxy.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-device-proxy.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="EventingError"
                 glib:type-name="GUPnPEventingError"
                 glib:get-type="gupnp_eventing_error_get_type"
                 c:type="GUPnPEventingError"
                 glib:error-domain="gupnp-eventing-error">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-error.h"
           line="60">#GError codes used for errors in the #GUPNP_EVENTING_ERROR domain, during
eventing of state variables.</doc>
      <member name="subscription_failed"
              value="0"
              c:identifier="GUPNP_EVENTING_ERROR_SUBSCRIPTION_FAILED"
              glib:nick="subscription-failed">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="62">The subscription attempt failed.</doc>
      </member>
      <member name="subscription_lost"
              value="1"
              c:identifier="GUPNP_EVENTING_ERROR_SUBSCRIPTION_LOST"
              glib:nick="subscription-lost">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="63">The subscription was lost.</doc>
      </member>
      <member name="notify_failed"
              value="2"
              c:identifier="GUPNP_EVENTING_ERROR_NOTIFY_FAILED"
              glib:nick="notify-failed">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="64">The notification failed.</doc>
      </member>
      <function name="quark" c:identifier="gupnp_eventing_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="ResourceFactory"
           c:symbol-prefix="resource_factory"
           c:type="GUPnPResourceFactory"
           parent="GObject.Object"
           glib:type-name="GUPnPResourceFactory"
           glib:get-type="gupnp_resource_factory_get_type"
           glib:type-struct="ResourceFactoryClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-resource-factory.c"
           line="24">#GUPnPResourceFactory objects are used by #GUPnPControlPoint,
#GUPnPDeviceProxy and #GUPnPDevice to create resource proxy and resource
objects. Register UPnP type - #GType pairs to have resource or resource proxy
objects created with the specified #GType whenever an object for a resource
of the specified UPnP type is requested. The #GType&lt;!-- --&gt;s need
to be derived from the relevant resource or resource proxy type (e.g.
a device proxy type needs to be derived from #GUPnPDeviceProxy).</doc>
      <source-position filename="../libgupnp/gupnp-resource-factory.h"
                       line="47"/>
      <constructor name="new" c:identifier="gupnp_resource_factory_new">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-resource-factory.c"
             line="103">Create a new #GUPnPResourceFactory object.</doc>
        <source-position filename="../libgupnp/gupnp-resource-factory.h"
                         line="50"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-resource-factory.c"
               line="108">A #GUPnPResourceFactory object.</doc>
          <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
        </return-value>
      </constructor>
      <function name="get_default"
                c:identifier="gupnp_resource_factory_get_default">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-resource-factory.c"
             line="116">Get the default singleton #GUPnPResourceFactory object.</doc>
        <source-position filename="../libgupnp/gupnp-resource-factory.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-resource-factory.c"
               line="121">A @GUPnPResourceFactory object.</doc>
          <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
        </return-value>
      </function>
      <method name="register_resource_proxy_type"
              c:identifier="gupnp_resource_factory_register_resource_proxy_type">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-resource-factory.c"
             line="474">Registers the GType @type for the proxy of resource of UPnP type @upnp_type.
After this call, the factory @factory will create object of GType @type each
time it is asked to create a resource proxy object for UPnP type @upnp_type.

Note: GType @type must be a derived type of #GUPNP_TYPE_DEVICE_PROXY if
resource is a device or #GUPNP_TYPE_SERVICE_PROXY if its a service.</doc>
        <source-position filename="../libgupnp/gupnp-resource-factory.h"
                         line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="476">A #GUPnPResourceFactory.</doc>
            <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
          </instance-parameter>
          <parameter name="upnp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="477">The UPnP type name of the resource.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="478">The requested GType assignment for the resource proxy.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="register_resource_type"
              c:identifier="gupnp_resource_factory_register_resource_type">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-resource-factory.c"
             line="419">Registers the GType @type for the resource of UPnP type @upnp_type. After
this call, the factory @factory will create object of GType @type each time
it is asked to create a resource object for UPnP type @upnp_type.

You can either register a type for a concrete version of a device or service
such as urn:schemas-upnp-org:service:AVTransport:2 or version-independently,
urn:schemas-upnp-org:service:AVTransport. If you register for an explicit
version of a service, it will be an exact match.

Note: GType @type must be a derived type of #GUPNP_TYPE_DEVICE if resource is
a device or #GUPNP_TYPE_SERVICE if its a service.</doc>
        <source-position filename="../libgupnp/gupnp-resource-factory.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="421">A #GUPnPResourceFactory.</doc>
            <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
          </instance-parameter>
          <parameter name="upnp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="422">The UPnP type name of the resource.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="423">The requested GType assignment for the resource.</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_resource_proxy_type"
              c:identifier="gupnp_resource_factory_unregister_resource_proxy_type">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-resource-factory.c"
             line="502">Unregisters the GType assignment for the proxy of resource of UPnP type
@upnp_type.</doc>
        <source-position filename="../libgupnp/gupnp-resource-factory.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-resource-factory.c"
               line="510">%TRUE if GType assignment was removed successfully, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="504">A #GUPnPResourceFactory.</doc>
            <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
          </instance-parameter>
          <parameter name="upnp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="505">The UPnP type name of the resource.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="unregister_resource_type"
              c:identifier="gupnp_resource_factory_unregister_resource_type">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-resource-factory.c"
             line="451">Unregisters the GType assignment for the resource of UPnP type @upnp_type.</doc>
        <source-position filename="../libgupnp/gupnp-resource-factory.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-resource-factory.c"
               line="458">%TRUE if GType assignment was removed successfully, %FALSE
otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="453">A #GUPnPResourceFactory.</doc>
            <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
          </instance-parameter>
          <parameter name="upnp_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-resource-factory.c"
                 line="454">The UPnP type name of the resource.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ResourceFactoryClass"
            c:type="GUPnPResourceFactoryClass"
            glib:is-gtype-struct-for="ResourceFactory">
      <source-position filename="../libgupnp/gupnp-resource-factory.h"
                       line="47"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-resource-factory.h"
                           line="43"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-resource-factory.h"
                           line="44"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-resource-factory.h"
                           line="45"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-resource-factory.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="RootDevice"
           c:symbol-prefix="root_device"
           c:type="GUPnPRootDevice"
           parent="Device"
           glib:type-name="GUPnPRootDevice"
           glib:get-type="gupnp_root_device_get_type"
           glib:type-struct="RootDeviceClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-root-device.c"
           line="22">#GUPnPRootDevice allows for implementing root devices.</doc>
      <source-position filename="../libgupnp/gupnp-root-device.h" line="54"/>
      <implements name="Gio.Initable"/>
      <constructor name="new" c:identifier="gupnp_root_device_new" throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="559">Create a new #GUPnPRootDevice object, automatically loading and parsing
device description document from @description_path.</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="57"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="571">A new @GUPnPRootDevice object.</doc>
          <type name="RootDevice" c:type="GUPnPRootDevice*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="561">The #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </parameter>
          <parameter name="description_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="562">Path to device description document. This could either
be an absolute path or path relative to @description_dir.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description_dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="564">Path to directory where description documents are provided.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_full"
                   c:identifier="gupnp_root_device_new_full"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="591">Create a new #GUPnPRootDevice, automatically loading and parsing
device description document from @description_path if @description_doc is
%NULL.</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="606">A new #GUPnPRootDevice object.</doc>
          <type name="RootDevice" c:type="GUPnPRootDevice*"/>
        </return-value>
        <parameters>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="593">A #GUPnPContext</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </parameter>
          <parameter name="factory" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="594">A #GUPnPResourceFactory</doc>
            <type name="ResourceFactory" c:type="GUPnPResourceFactory*"/>
          </parameter>
          <parameter name="description_doc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="595">Device description document, or %NULL</doc>
            <type name="XMLDoc" c:type="GUPnPXMLDoc*"/>
          </parameter>
          <parameter name="description_path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="596">Path to device description document. This could either
be an absolute path or path relative to @description_dir.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="description_dir" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="598">Path to directory where description documents are provided.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_available"
              c:identifier="gupnp_root_device_get_available">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="654">Get whether or not @root_device is available (announcing its presence).</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="660">%TRUE if @root_device is available, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="656">A #GUPnPRootDevice</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description_dir"
              c:identifier="gupnp_root_device_get_description_dir">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="714">Get the path to the directory containing description documents related to
@root_device.</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="86"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="721">The path to description document directory of @root_device.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="716">A #GUPnPRootDevice</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_description_path"
              c:identifier="gupnp_root_device_get_description_path">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="694">Get the path to the device description document of @root_device.</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="82"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="700">The path to device description document of @root_device.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="696">A #GUPnPRootDevice</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_relative_location"
              c:identifier="gupnp_root_device_get_relative_location">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="674">Get the relative location of @root_device.</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="680">The relative location of @root_device.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="676">A #GUPnPRootDevice</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ssdp_resource_group"
              c:identifier="gupnp_root_device_get_ssdp_resource_group"
              version="0.19.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="735">Get the #GSSDPResourceGroup used by @root_device.</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="90"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-root-device.c"
               line="741">The #GSSDPResourceGroup of @root_device.</doc>
          <type name="GSSDP.ResourceGroup" c:type="GSSDPResourceGroup*"/>
        </return-value>
        <parameters>
          <instance-parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="737">A #GUPnPRootDevice</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_available"
              c:identifier="gupnp_root_device_set_available">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="631">Controls whether or not @root_device is available (announcing
its presence).</doc>
        <source-position filename="../libgupnp/gupnp-root-device.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="root_device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="633">A #GUPnPRootDevice</doc>
            <type name="RootDevice" c:type="GUPnPRootDevice*"/>
          </instance-parameter>
          <parameter name="available" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-root-device.c"
                 line="634">%TRUE if @root_device should be available</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="available" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="541">TRUE if this device is available.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="description-dir"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="522">The path to directory where description documents are provided.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="description-doc"
                version="0.13.0"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="481">Device description document. Constructor property.</doc>
        <type name="XMLDoc"/>
      </property>
      <property name="description-path"
                version="0.13.0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-root-device.c"
             line="501">The path to device description document. This could either be an
absolute path or path relative to GUPnPRootDevice:description-dir.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Device" c:type="GUPnPDevice"/>
      </field>
    </class>
    <record name="RootDeviceClass"
            c:type="GUPnPRootDeviceClass"
            glib:is-gtype-struct-for="RootDevice">
      <source-position filename="../libgupnp/gupnp-root-device.h" line="54"/>
      <field name="parent_class">
        <type name="DeviceClass" c:type="GUPnPDeviceClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-root-device.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-root-device.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-root-device.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-root-device.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <enumeration name="RootdeviceError"
                 glib:type-name="GUPnPRootdeviceError"
                 glib:get-type="gupnp_rootdevice_error_get_type"
                 c:type="GUPnPRootdeviceError"
                 glib:error-domain="gupnp-root-device-error">
      <member name="no_context"
              value="0"
              c:identifier="GUPNP_ROOT_DEVICE_ERROR_NO_CONTEXT"
              glib:nick="no-context">
      </member>
      <member name="no_description_path"
              value="1"
              c:identifier="GUPNP_ROOT_DEVICE_ERROR_NO_DESCRIPTION_PATH"
              glib:nick="no-description-path">
      </member>
      <member name="no_description_folder"
              value="2"
              c:identifier="GUPNP_ROOT_DEVICE_ERROR_NO_DESCRIPTION_FOLDER"
              glib:nick="no-description-folder">
      </member>
      <member name="no_network"
              value="3"
              c:identifier="GUPNP_ROOT_DEVICE_ERROR_NO_NETWORK"
              glib:nick="no-network">
      </member>
      <member name="fail"
              value="4"
              c:identifier="GUPNP_ROOT_DEVICE_ERROR_FAIL"
              glib:nick="fail">
      </member>
      <function name="quark" c:identifier="gupnp_rootdevice_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <enumeration name="ServerError"
                 glib:type-name="GUPnPServerError"
                 glib:get-type="gupnp_server_error_get_type"
                 c:type="GUPnPServerError"
                 glib:error-domain="gupnp-server-error">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-error.h"
           line="34">#GError codes used for errors in the #GUPNP_SERVER_ERROR domain, when there
is communication with another server.</doc>
      <member name="internal_server_error"
              value="0"
              c:identifier="GUPNP_SERVER_ERROR_INTERNAL_SERVER_ERROR"
              glib:nick="internal-server-error">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="36">Internal server error.</doc>
      </member>
      <member name="not_found"
              value="1"
              c:identifier="GUPNP_SERVER_ERROR_NOT_FOUND"
              glib:nick="not-found">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="37">The resource was not found.</doc>
      </member>
      <member name="not_implemented"
              value="2"
              c:identifier="GUPNP_SERVER_ERROR_NOT_IMPLEMENTED"
              glib:nick="not-implemented">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="38">This method is not implemented.</doc>
      </member>
      <member name="invalid_response"
              value="3"
              c:identifier="GUPNP_SERVER_ERROR_INVALID_RESPONSE"
              glib:nick="invalid-response">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="39">Invalid response.</doc>
      </member>
      <member name="invalid_url"
              value="4"
              c:identifier="GUPNP_SERVER_ERROR_INVALID_URL"
              glib:nick="invalid-url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="40">Invalid URL.</doc>
      </member>
      <member name="other"
              value="5"
              c:identifier="GUPNP_SERVER_ERROR_OTHER"
              glib:nick="other">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="41">Unknown/unhandled error.</doc>
      </member>
      <function name="quark" c:identifier="gupnp_server_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <class name="Service"
           c:symbol-prefix="service"
           c:type="GUPnPService"
           parent="ServiceInfo"
           glib:type-name="GUPnPService"
           glib:get-type="gupnp_service_get_type"
           glib:type-struct="ServiceClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service.c"
           line="22">#GUPnPService allows for handling incoming actions and state variable
notification. #GUPnPService implements the #GUPnPServiceInfo interface.</doc>
      <source-position filename="../libgupnp/gupnp-service.h" line="72"/>
      <virtual-method name="action_invoked">
        <source-position filename="../libgupnp/gupnp-service.h" line="56"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="notify_failed" introspectable="0">
        <source-position filename="../libgupnp/gupnp-service.h" line="63"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="callback_urls" transfer-ownership="none">
            <type name="GLib.List" c:type="const GList*">
              <type name="gpointer" c:type="gpointer"/>
            </type>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="query_variable">
        <source-position filename="../libgupnp/gupnp-service.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="freeze_notify" c:identifier="gupnp_service_freeze_notify">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="2148">Causes new notifications to be queued up until gupnp_service_thaw_notify()
is called.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="151"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2150">A #GUPnPService</doc>
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="notify"
              c:identifier="gupnp_service_notify"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1856">Notifies listening clients that the properties listed in @Varargs
have changed to the specified values.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="138"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1858">A #GUPnPService</doc>
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1859">Tuples of variable name, variable type, and variable value,
terminated with %NULL.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_valist"
              c:identifier="gupnp_service_notify_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1878">See gupnp_service_notify(); this version takes a va_list for
use by language bindings.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="142"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1880">A #GUPnPService</doc>
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1881">A va_list of tuples of variable name, variable type, and variable
value, terminated with %NULL.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="notify_value" c:identifier="gupnp_service_notify_value">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="2111">Notifies listening clients that @variable has changed to @value.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="146"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2113">A #GUPnPService</doc>
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2114">The name of the variable to notify</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2115">The value of the variable</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="signals_autoconnect"
              c:identifier="gupnp_service_signals_autoconnect"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="2309">A convenience function that attempts to connect all possible
#GUPnPService::action-invoked and #GUPnPService::query-variable signals to
appropriate callbacks for the service @service. It uses service introspection
and #GModule&lt;!-- --&gt;'s introspective features. It is very simillar to
gtk_builder_connect_signals() except that it attempts to guess the names of
the signal handlers on its own.

For this function to do its magic, the application must name the callback
functions for #GUPnPService::action-invoked signals by striping the CamelCase
off the action names and either prepend "on_" or append "_cb" to them. Same
goes for #GUPnPService::query-variable signals, except that "query_" should
be prepended to the variable name. For example, callback function for
&lt;varname&gt;GetSystemUpdateID&lt;/varname&gt; action should be either named as
"get_system_update_id_cb" or "on_get_system_update_id" and callback function
for the query of "SystemUpdateID" state variable should be named
&lt;function&gt;query_system_update_id_cb&lt;/function&gt; or
&lt;function&gt;on_query_system_update_id&lt;/function&gt;.

&lt;note&gt;This function will not work correctly if #GModule is not supported
on the platform or introspection is not available for @service.&lt;/note&gt;

&lt;warning&gt;This function can not and therefore does not guarantee that the
resulting signal connections will be correct as it depends heavily on a
particular naming schemes described above.&lt;/warning&gt;</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="157"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2311">A #GUPnPService</doc>
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2312">the data to pass to each of the callbacks</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="thaw_notify" c:identifier="gupnp_service_thaw_notify">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="2167">Sends out any pending notifications, and stops queuing of new ones.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="service" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="2169">A #GUPnPService</doc>
            <type name="Service" c:type="GUPnPService*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="root-device"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1769">The containing #GUPnPRootDevice.</doc>
        <type name="RootDevice"/>
      </property>
      <field name="parent_instance">
        <type name="ServiceInfo" c:type="GUPnPServiceInfo"/>
      </field>
      <glib:signal name="action-invoked" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1787">Emitted whenever an action is invoked. Handler should process
@action and must call either gupnp_service_action_return() or
gupnp_service_action_return_error().</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1790">The invoked #GUPnPServiceAction</doc>
            <type name="ServiceAction"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="notify-failed" when="last">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1833">Emitted whenever notification of a client fails.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="callback_url" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1836">A #GList of callback URLs</doc>
            <type name="GLib.List" c:type="gpointer">
              <type name="Soup.URI"/>
            </type>
          </parameter>
          <parameter name="reason" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1837">A pointer to a #GError describing why the notify failed</doc>
            <type name="GLib.Error" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="query-variable" when="last" detailed="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1809">Emitted whenever @service needs to know the value of @variable.
Handler should fill @value with the value of @variable.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1812">The variable that is being queried</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="value"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="1813">The location of the #GValue of the variable</doc>
            <type name="GObject.Value" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServiceAction"
            c:type="GUPnPServiceAction"
            glib:type-name="GUPnPServiceAction"
            glib:get-type="gupnp_service_action_get_type"
            c:symbol-prefix="service_action">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service.h"
           line="40">Opaque structure for holding in-progress action data.</doc>
      <source-position filename="../libgupnp/gupnp-service.h" line="45"/>
      <method name="get"
              c:identifier="gupnp_service_action_get"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="361">Retrieves the specified action arguments.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="82"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="363">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="364">tuples of argument name, argument type, and argument value
location, terminated with %NULL.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_argument_count"
              c:identifier="gupnp_service_action_get_argument_count"
              version="0.17.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="537">Get the number of IN arguments from the @action and return it.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service.c"
               line="543">The number of IN arguments from the @action.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="539">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gvalue"
              c:identifier="gupnp_service_action_get_gvalue"
              shadows="get_value"
              version="0.13.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="507">Retrieves the value of @argument into a GValue of type @type and returns it.
The method exists only and only to satify PyGI, please use
gupnp_service_action_get_value() and ignore this if possible.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="100"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service.c"
               line="517">Value as #GValue associated with @action.
g_value_unset() and g_slice_free() it after usage.</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="509">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="argument" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="510">The name of the argument to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="511">The type of argument to retrieve</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_locales"
              c:identifier="gupnp_service_action_get_locales">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="343">Get an ordered (preferred first) #GList of locales preferred by
the client. Free list and elements after use.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="79"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service.c"
               line="350">A #GList of #char*
locale names.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="345">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_message"
              c:identifier="gupnp_service_action_get_message"
              version="0.13.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="797">Get the #SoupMessage associated with @action. Mainly intended for
applications to be able to read HTTP headers received from clients.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service.c"
               line="804">#SoupMessage associated with @action. Unref
after using it.</doc>
          <type name="Soup.Message" c:type="SoupMessage*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="799">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gupnp_service_action_get_name">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="327">Get the name of @action.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service.c"
               line="333">The name of @action</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="329">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_valist"
              c:identifier="gupnp_service_action_get_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="382">See gupnp_service_action_get(); this version takes a va_list for
use by language bindings.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="384">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="385">va_list of tuples of argument name, argument type, and argument
value location.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_value"
              c:identifier="gupnp_service_action_get_value"
              shadowed-by="get_gvalue"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="470">Retrieves the value of @argument into @value.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="472">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="argument" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="473">The name of the argument to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="474">The #GValue to store the value of the argument, initialized
to the correct type.</doc>
            <type name="GObject.Value" c:type="GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_values"
              c:identifier="gupnp_service_action_get_values"
              version="0.13.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="425">A variant of #gupnp_service_action_get that uses #GList instead of varargs.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service.c"
               line="433">The values as #GList of
#GValue. g_list_free() the returned list and g_value_unset() and g_slice_free()
each element.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="GObject.Value"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="427">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="arg_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="428">A #GList of argument names as string</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="arg_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="429">A #GList of argument types as #GType</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GType"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="return" c:identifier="gupnp_service_action_return">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="698">Return succesfully.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="123"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="700">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="return_error"
              c:identifier="gupnp_service_action_return_error">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="714">Return @error_code.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="716">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="error_code" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="717">The error code</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="error_description" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="718">The error description, or %NULL if @error_code is
one of #GUPNP_CONTROL_ERROR_INVALID_ACTION,
#GUPNP_CONTROL_ERROR_INVALID_ARGS, #GUPNP_CONTROL_ERROR_OUT_OF_SYNC or
#GUPNP_CONTROL_ERROR_ACTION_FAILED, in which case a description is
provided automatically.</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set"
              c:identifier="gupnp_service_action_set"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="553">Sets the specified action return values.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="555">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="556">tuples of return value name, return value type, and
actual return value, terminated with %NULL.</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="set_valist"
              c:identifier="gupnp_service_action_set_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="574">See gupnp_service_action_set(); this version takes a va_list for
use by language bindings.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="576">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="577">va_list of tuples of return value name, return value type, and
actual return value.</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_value" c:identifier="gupnp_service_action_set_value">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="667">Sets the value of @argument to @value.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="669">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="argument" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="670">The name of the return value to retrieve</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="value" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="671">The #GValue to store the return value</doc>
            <type name="GObject.Value" c:type="const GValue*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_values"
              c:identifier="gupnp_service_action_set_values"
              version="0.13.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="620">Sets the specified action return values.</doc>
        <source-position filename="../libgupnp/gupnp-service.h" line="113"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="622">A #GUPnPServiceAction</doc>
            <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
          </instance-parameter>
          <parameter name="arg_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="623">A #GList of argument names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="arg_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service.c"
                 line="624">The #GList of values (as
#GValues) that line up with @arg_names.</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="ServiceActionArgDirection"
                 glib:type-name="GUPnPServiceActionArgDirection"
                 glib:get-type="gupnp_service_action_arg_direction_get_type"
                 c:type="GUPnPServiceActionArgDirection">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-introspection.h"
           line="40">Represents the direction of a service state variable.</doc>
      <member name="in"
              value="0"
              c:identifier="GUPNP_SERVICE_ACTION_ARG_DIRECTION_IN"
              glib:nick="in">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="42">An "in" variable, to the service.</doc>
      </member>
      <member name="out"
              value="1"
              c:identifier="GUPNP_SERVICE_ACTION_ARG_DIRECTION_OUT"
              glib:nick="out">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="43">An "out" variable, from the service.</doc>
      </member>
    </enumeration>
    <record name="ServiceActionArgInfo" c:type="GUPnPServiceActionArgInfo">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-introspection.h"
           line="53">This structure contains information about the argument of service action.</doc>
      <source-position filename="../libgupnp/gupnp-service-introspection.h"
                       line="68"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="55">The name of the action argument.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="direction" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="56">The direction of the action argument.</doc>
        <type name="ServiceActionArgDirection"
              c:type="GUPnPServiceActionArgDirection"/>
      </field>
      <field name="related_state_variable" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="57">The name of the state variable associated with this
argument.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="retval" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="59">Whether this argument is the return value of the action.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
    </record>
    <record name="ServiceActionInfo" c:type="GUPnPServiceActionInfo">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-introspection.h"
           line="70">This structure contains information about a service action.</doc>
      <source-position filename="../libgupnp/gupnp-service-introspection.h"
                       line="81"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="72">The name of the action argument.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="arguments" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="73">A GList of all the arguments
(of type #GUPnPServiceActionArgInfo) of this action.</doc>
        <type name="GLib.List">
          <type name="ServiceActionArgInfo"/>
        </type>
      </field>
    </record>
    <record name="ServiceClass"
            c:type="GUPnPServiceClass"
            glib:is-gtype-struct-for="Service">
      <source-position filename="../libgupnp/gupnp-service.h" line="72"/>
      <field name="parent_class">
        <type name="ServiceInfoClass" c:type="GUPnPServiceInfoClass"/>
      </field>
      <field name="action_invoked">
        <callback name="action_invoked">
          <source-position filename="../libgupnp/gupnp-service.h" line="56"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="GUPnPService*"/>
            </parameter>
            <parameter name="action" transfer-ownership="none">
              <type name="ServiceAction" c:type="GUPnPServiceAction*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="query_variable">
        <callback name="query_variable">
          <source-position filename="../libgupnp/gupnp-service.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="GUPnPService*"/>
            </parameter>
            <parameter name="variable" transfer-ownership="none">
              <type name="utf8" c:type="const char*"/>
            </parameter>
            <parameter name="value" transfer-ownership="none">
              <type name="GObject.Value" c:type="GValue*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="notify_failed" introspectable="0">
        <callback name="notify_failed" introspectable="0">
          <source-position filename="../libgupnp/gupnp-service.h" line="63"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="service" transfer-ownership="none">
              <type name="Service" c:type="GUPnPService*"/>
            </parameter>
            <parameter name="callback_urls" transfer-ownership="none">
              <type name="GLib.List" c:type="const GList*">
                <type name="gpointer" c:type="gpointer"/>
              </type>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-service.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-service.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-service.h" line="70"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-service.h" line="71"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ServiceInfo"
           c:symbol-prefix="service_info"
           c:type="GUPnPServiceInfo"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GUPnPServiceInfo"
           glib:get-type="gupnp_service_info_get_type"
           glib:type-struct="ServiceInfoClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-info.c"
           line="22">The #GUPnPDeviceInfo base abstract class provides methods for querying
service information.</doc>
      <source-position filename="../libgupnp/gupnp-service-info.h" line="50"/>
      <method name="get_context" c:identifier="gupnp_service_info_get_context">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="391">Get the #GUPnPContext associated with @info.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="397">A #GUPnPContext.</doc>
          <type name="Context" c:type="GUPnPContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="393">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_control_url"
              c:identifier="gupnp_service_info_get_control_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="540">Get the control URL for this service, or %NULL..</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="89"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="546">A string. This string should be freed with g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="542">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_event_subscription_url"
              c:identifier="gupnp_service_info_get_event_subscription_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="562">Get the event subscription URL for this service, or %NULL.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="568">A string. This string should be freed with g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="564">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gupnp_service_info_get_id">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="497">Get the ID of this service, or %NULL if there is no ID.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="83"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="503">A string. This string should be freed with g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="499">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_introspection_async"
              c:identifier="gupnp_service_info_get_introspection_async">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="688">Note that introspection object is created from the information in service
description document (SCPD) provided by the service so it can not be created
if the service does not provide an SCPD.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="95"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="690">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="691">callback to be called when introspection object is ready.</doc>
            <type name="ServiceIntrospectionCallback"
                  c:type="GUPnPServiceIntrospectionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="692">user_data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_introspection_async_full"
              c:identifier="gupnp_service_info_get_introspection_async_full"
              version="0.20.9">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="710">Note that introspection object is created from the information in service
description document (SCPD) provided by the service so it can not be created
if the service does not provide an SCPD.

If @cancellable is used to cancel the call, @callback will be called with
error code %G_IO_ERROR_CANCELLED.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="712">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="713">callback to be called when introspection object is ready.</doc>
            <type name="ServiceIntrospectionCallback"
                  c:type="GUPnPServiceIntrospectionCallback"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="714">GCancellable that can be used to cancel the call, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="715">user_data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_location"
              c:identifier="gupnp_service_info_get_location">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="411">Get the location of the device description file.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="71"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="417">A constant string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="413">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_scpd_url"
              c:identifier="gupnp_service_info_get_scpd_url">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="518">Get the SCPD URL for this service, or %NULL if there is no SCPD.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="524">A string. This string should be freed with g_free() after use.</doc>
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="520">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_service_type"
              c:identifier="gupnp_service_info_get_service_type">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="471">Get the UPnP service type, or %NULL.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="477">A constant string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="473">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_udn" c:identifier="gupnp_service_info_get_udn">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="451">Get the Unique Device Name of the containing device.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="457">A constant string.</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="453">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_url_base"
              c:identifier="gupnp_service_info_get_url_base">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="431">Get the URL base of this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="437">A constant #SoupURI.</doc>
          <type name="Soup.URI" c:type="const SoupURI*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="433">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="introspect_async"
              c:identifier="gupnp_service_info_introspect_async"
              version="1.2.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="827">Note that introspection object is created from the information in service
description document (SCPD) provided by the service so it can not be created
if the service does not provide an SCPD.

If @cancellable is used to cancel the call, @callback will be called with
error code %G_IO_ERROR_CANCELLED.</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="829">A #GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="830">#GCancellable that can be used to cancel the call, or %NULL.</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="831">callback to be called when introspeciton object is ready.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="832">user_data to be passed to the callback.</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="introspect_finish"
              c:identifier="gupnp_service_info_introspect_finish"
              version="1.2.2"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="857">Finish an asynchronous call initiated with
gupnp_service_info_introspect_async().</doc>
        <source-position filename="../libgupnp/gupnp-service-info.h"
                         line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.c"
               line="866">%NULL, if the call had an error, a
#GUPnPServiceIntrospection object otherwise.</doc>
          <type name="ServiceIntrospection"
                c:type="GUPnPServiceIntrospection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="info" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="859">A GUPnPServiceInfo</doc>
            <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-info.c"
                 line="860">A #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="context"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="258">The #GUPnPContext to use.</doc>
        <type name="Context"/>
      </property>
      <property name="document"
                stability="Private"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="349">Private property.</doc>
        <type name="XMLDoc"/>
      </property>
      <property name="element"
                stability="Private"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="370">Private property.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <property name="location"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="276">The location of the device description file.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="service-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="313">The service type.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="udn"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="295">The UDN of the containing device.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="url-base"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-info.c"
             line="331">The URL base (#SoupURI).</doc>
        <type name="Soup.URI"/>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="ServiceInfoClass"
            c:type="GUPnPServiceInfoClass"
            glib:is-gtype-struct-for="ServiceInfo">
      <source-position filename="../libgupnp/gupnp-service-info.h" line="50"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-service-info.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-service-info.h"
                           line="47"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-service-info.h"
                           line="48"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-service-info.h"
                           line="49"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <class name="ServiceIntrospection"
           c:symbol-prefix="service_introspection"
           c:type="GUPnPServiceIntrospection"
           parent="GObject.Object"
           glib:type-name="GUPnPServiceIntrospection"
           glib:get-type="gupnp_service_introspection_get_type"
           glib:type-struct="ServiceIntrospectionClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-introspection.c"
           line="24">The #GUPnPServiceIntrospection class provides methods for service
introspection based on information contained in its service description
document (SCPD). There is no constructor provided for this class, please use
#gupnp_service_info_get_introspection or
#gupnp_service_info_get_introspection_async to create an
#GUPnPServiceIntrospection object for a specific service.

Note that all the introspection information is retreived from the service
description document (SCPD) provided by the service and hence can not be
guaranteed to be complete. A UPnP service is required to provide an SCPD but
unfortunately, many services either do not provide this document or the
document does not provide any or all of the introspection information.

This class exposes internals of the UPnP protocol and should not need
to be used for regular device or control point development.</doc>
      <source-position filename="../libgupnp/gupnp-service-introspection.h"
                       line="34"/>
      <method name="get_action"
              c:identifier="gupnp_service_introspection_get_action">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="894">Returns the action by the name @action_name in this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-introspection.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-introspection.c"
               line="901">the action or %NULL. Do not modify or free
it.</doc>
          <type name="ServiceActionInfo"
                c:type="const GUPnPServiceActionInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="introspection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="896">A #GUPnPServiceIntrospection</doc>
            <type name="ServiceIntrospection"
                  c:type="GUPnPServiceIntrospection*"/>
          </instance-parameter>
          <parameter name="action_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="897">The name of the action to retrieve</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_state_variable"
              c:identifier="gupnp_service_introspection_get_state_variable">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="854">Returns the state variable by the name @variable_name in this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-introspection.h"
                         line="138"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-introspection.c"
               line="861">the state variable or %NULL. Do not modify or
free it.</doc>
          <type name="ServiceStateVariableInfo"
                c:type="const GUPnPServiceStateVariableInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="introspection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="856">A #GUPnPServiceIntrospection</doc>
            <type name="ServiceIntrospection"
                  c:type="GUPnPServiceIntrospection*"/>
          </instance-parameter>
          <parameter name="variable_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="857">The name of the variable to retrieve</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="list_action_names"
              c:identifier="gupnp_service_introspection_list_action_names">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="744">Returns a GList of names of all the actions in this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-introspection.h"
                         line="117"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-introspection.c"
               line="750">A GList of names of all
the actions or %NULL. Do not modify or free it or its contents.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="introspection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="746">A #GUPnPServiceIntrospection</doc>
            <type name="ServiceIntrospection"
                  c:type="GUPnPServiceIntrospection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_actions"
              c:identifier="gupnp_service_introspection_list_actions">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="773">Returns a #GList of all the actions (of type #GUPnPServiceActionInfo) in
this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-introspection.h"
                         line="121"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-introspection.c"
               line="780">A
#GList of all the actions or %NULL. Do not modify or free it or its
contents.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="ServiceActionInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="introspection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="775">A #GUPnPServiceIntrospection</doc>
            <type name="ServiceIntrospection"
                  c:type="GUPnPServiceIntrospection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_state_variable_names"
              c:identifier="gupnp_service_introspection_list_state_variable_names">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="818">Returns a #GList of names of all the state variables in this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-introspection.h"
                         line="130"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-introspection.c"
               line="824">A #GList of names of all
the state variables or %NULL. Do not modify or free it or its contents.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="introspection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="820">A #GUPnPServiceIntrospection</doc>
            <type name="ServiceIntrospection"
                  c:type="GUPnPServiceIntrospection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="list_state_variables"
              c:identifier="gupnp_service_introspection_list_state_variables">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="795">Returns a GList of all the state variables (of type
#GUPnPServiceStateVariableInfo) in this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-introspection.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-introspection.c"
               line="802">
A #GList of all the state variables or %NULL. Do not modify or free it or
its contents.</doc>
          <type name="GLib.List" c:type="const GList*">
            <type name="ServiceStateVariableInfo"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="introspection" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-introspection.c"
                 line="797">A #GUPnPServiceIntrospection</doc>
            <type name="ServiceIntrospection"
                  c:type="GUPnPServiceIntrospection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="scpd"
                readable="0"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.c"
             line="206">The scpd of the device description file.</doc>
        <type name="gpointer" c:type="gpointer"/>
      </property>
    </class>
    <callback name="ServiceIntrospectionCallback"
              c:type="GUPnPServiceIntrospectionCallback">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-info.h"
           line="52">Callback notifying that @introspection for @info has been obtained.</doc>
      <source-position filename="../libgupnp/gupnp-service-info.h" line="61"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="info" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.h"
               line="54">The #GUPnPServiceInfo introspection was requested for</doc>
          <type name="ServiceInfo" c:type="GUPnPServiceInfo*"/>
        </parameter>
        <parameter name="introspection"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.h"
               line="55">The new #GUPnPServiceIntrospection object, or NULL</doc>
          <type name="ServiceIntrospection"
                c:type="GUPnPServiceIntrospection*"/>
        </parameter>
        <parameter name="error"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.h"
               line="56">The #GError that occurred, or NULL</doc>
          <type name="GLib.Error" c:type="const GError*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-info.h"
               line="57">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ServiceIntrospectionClass"
            c:type="GUPnPServiceIntrospectionClass"
            glib:is-gtype-struct-for="ServiceIntrospection">
      <source-position filename="../libgupnp/gupnp-service-introspection.h"
                       line="34"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="ServiceProxy"
           c:symbol-prefix="service_proxy"
           c:type="GUPnPServiceProxy"
           parent="ServiceInfo"
           glib:type-name="GUPnPServiceProxy"
           glib:get-type="gupnp_service_proxy_get_type"
           glib:type-struct="ServiceProxyClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-proxy.c"
           line="22">#GUPnPServiceProxy sends commands to a remote UPnP service and handles
incoming event notifications. #GUPnPServiceProxy implements the
#GUPnPServiceInfo interface.</doc>
      <source-position filename="../libgupnp/gupnp-service-proxy.h" line="54"/>
      <virtual-method name="subscription_lost">
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="reason" transfer-ownership="none">
            <type name="GLib.Error" c:type="const GError*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_notify"
              c:identifier="gupnp_service_proxy_add_notify"
              shadowed-by="add_notify_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1123">Sets up @callback to be called whenever a change notification for
@variable is recieved.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="173"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1134">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1125">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1126">The variable to add notification for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1127">The type of the variable</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1128">The callback to call when @variable changes</doc>
            <type name="ServiceProxyNotifyCallback"
                  c:type="GUPnPServiceProxyNotifyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1129">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_notify_full"
              c:identifier="gupnp_service_proxy_add_notify_full"
              shadows="add_notify"
              version="0.20.12">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1152">Sets up @callback to be called whenever a change notification for
@variable is recieved.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="180"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1166">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1154">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1155">The variable to add notification for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1156">The type of the variable</doc>
            <type name="GType" c:type="GType"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1157">The callback to call when @variable changes</doc>
            <type name="ServiceProxyNotifyCallback"
                  c:type="GUPnPServiceProxyNotifyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1158">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1159">Function to call when the notification is removed, or %NULL</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_raw_notify"
              c:identifier="gupnp_service_proxy_add_raw_notify"
              version="0.20.12">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1228">Get a notification for anything that happens on the peer. @value in
@callback will be of type #G_TYPE_POINTER and contain the pre-parsed
#xmlDoc. Do NOT free or modify this document.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="188"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1240">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1230">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="notified"
                     closure="1"
                     destroy="2">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1231">The callback to call when the peer issues any
variable notification.</doc>
            <type name="ServiceProxyNotifyCallback"
                  c:type="GUPnPServiceProxyNotifyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1233">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1234">A #GDestroyNotify for @user_data</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_action"
              c:identifier="gupnp_service_proxy_begin_action"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.1.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="557">Sends action @action with parameters @Varargs to the service exposed by
@proxy asynchronously, calling @callback on completion. From @callback, call
gupnp_service_proxy_end_action() to check for errors, to retrieve return
values, and to free the #GUPnPServiceProxyAction.</doc>
        <doc-deprecated xml:space="preserve">Use gupnp_service_proxy_action_new() and
gupnp_service_proxy_action_call_action_async()</doc-deprecated>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="572">A #GUPnPServiceProxyAction handle. This will be freed when
gupnp_service_proxy_cancel_action() or
gupnp_service_proxy_end_action_valist().</doc>
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="559">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="560">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="561">The callback to call when sending the action has succeeded
or failed</doc>
            <type name="ServiceProxyActionCallback"
                  c:type="GUPnPServiceProxyActionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="563">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="564">tuples of in parameter name, in parameter type, and in parameter
value, terminated with %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_action_list"
              c:identifier="gupnp_service_proxy_begin_action_list"
              version="0.13.3">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="871">A variant of #gupnp_service_proxy_begin_action that takes lists of
in-parameter names, types and values.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="886">A #GUPnPServiceProxyAction handle. This will
be freed when calling gupnp_service_proxy_cancel_action() or
gupnp_service_proxy_end_action_list().</doc>
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="873">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="874">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="in_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="875">#GList of 'in' parameter
names (as strings)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="in_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="877">#GList of values (as
#GValue) that line up with @in_names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.Value"/>
            </type>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="879">The callback to call when sending the action has succeeded or
failed</doc>
            <type name="ServiceProxyActionCallback"
                  c:type="GUPnPServiceProxyActionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="881">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="begin_action_valist"
              c:identifier="gupnp_service_proxy_begin_action_valist"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.1.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="822">See gupnp_service_proxy_begin_action().</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="123"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="834">A #GUPnPServiceProxyAction handle. This will
be freed when calling gupnp_service_proxy_cancel_action() or
gupnp_service_proxy_end_action_valist().</doc>
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="824">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="825">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="826">The callback to call when sending the action has succeeded
or failed</doc>
            <type name="ServiceProxyActionCallback"
                  c:type="GUPnPServiceProxyActionCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="828">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="829">A va_list of tuples of in parameter name, in parameter type, and
in parameter value</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_action"
              c:identifier="gupnp_service_proxy_call_action"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="2129">Synchronously call the @action on the remote UPnP service.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="263"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="2139">%NULL on error, @action if successful.</doc>
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2131">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2132">An action</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2133">A #GCancellable which can be used to cancel the
current action call</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_action_async"
              c:identifier="gupnp_service_proxy_call_action_async">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="2065">Start a call on the remote UPnP service using the pre-configured @action.
Use gupnp_service_proxy_call_action_finish() in the @callback to finalize
the call and gupnp_service_proxy_action_get_result(),
gupnp_service_proxy_action_get_result_hash() or
gupnp_service_proxy_action_get_result_list() to extract the result of the
remote call.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="250"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2067">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2068">An action</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2069">A #GCancellable which can be used to cancel the
current action call</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2071">A #GAsyncReadyCallback to call when the action is
finished.</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2073">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="call_action_finish"
              c:identifier="gupnp_service_proxy_call_action_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="2108">Finish an asynchronous call initiated with
gupnp_service_proxy_call_action_async().</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="258"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="2117">%NULL, if the call had an error, the action otherwise.</doc>
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2110">a #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2111">a #GAsyncResult</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="cancel_action"
              c:identifier="gupnp_service_proxy_cancel_action"
              deprecated="1"
              deprecated-version="1.1.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1098">Cancels @action, freeing the @action handle.</doc>
        <doc-deprecated xml:space="preserve">Use the #GCancellable passed to
gupnp_service_proxy_call_action_async() or gupnp_service_proxy_call_action()</doc-deprecated>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="169"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1100">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1101">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
        </parameters>
      </method>
      <method name="end_action"
              c:identifier="gupnp_service_proxy_end_action"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="917">Retrieves the result of @action. The out parameters in @Varargs will be
filled in, and if an error occurred, @error will be set. In case of
an UPnP error the error code will be the same in @error.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="140"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="930">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="919">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="920">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="921">The location where to store any error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="922">tuples of out parameter name, out parameter type, and out parameter
value location, terminated with %NULL. The out parameter values should be
freed after use</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="end_action_hash"
              c:identifier="gupnp_service_proxy_end_action_hash"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1054">See gupnp_service_proxy_end_action(); this version takes a #GHashTable for
runtime generated parameter lists.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="162"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1065">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1056">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1057">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
          <parameter name="hash"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1059">A #GHashTable of
out parameter name and initialised #GValue pairs</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="end_action_list"
              c:identifier="gupnp_service_proxy_end_action_list"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1002">A variant of #gupnp_service_proxy_end_action that takes lists of
out-parameter names, types and place-holders for values. The returned list
in @out_values must be freed using #g_list_free and each element in it using
#g_value_unset and #g_slice_free.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1019">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1004">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1005">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
          <parameter name="out_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1007">#GList of 'out' parameter
names (as strings)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="out_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1009">#GList of types (as #GType)
that line up with @out_names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GType"/>
            </type>
          </parameter>
          <parameter name="out_values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1011">#GList of values
(as #GValue) that line up with @out_names and @out_types.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="end_action_valist"
              c:identifier="gupnp_service_proxy_end_action_valist"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="962">See gupnp_service_proxy_end_action().</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="146"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="973">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="964">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="965">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="966">The location where to store any error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="967">A va_list of tuples of out parameter name, out parameter type,
and out parameter value location. The out parameter values should be
freed after use</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_subscribed"
              c:identifier="gupnp_service_proxy_get_subscribed">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="2045">Returns if we are subscribed to this service.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="210"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="2051">%TRUE if we are subscribed to this service, otherwise %FALSE.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2047">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_notify"
              c:identifier="gupnp_service_proxy_remove_notify">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1259">Cancels the variable change notification for @callback and @user_data.

Up to version 0.20.9 this function must not be called directlya or
indirectly from a #GUPnPServiceProxyNotifyCallback associated with this
service proxy, even if it is for another variable. In later versions such
calls are allowed.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1273">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1261">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="variable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1262">The variable to add notification for</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="2">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1263">The callback to call when @variable changes</doc>
            <type name="ServiceProxyNotifyCallback"
                  c:type="GUPnPServiceProxyNotifyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1264">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_raw_notify"
              c:identifier="gupnp_service_proxy_remove_raw_notify">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="1338">Cancels the variable change notification for @callback and @user_data.

This function must not be called directly or indirectly from a
#GUPnPServiceProxyNotifyCallback associated with this service proxy, even
if it is for another variable.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="200"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="1350">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1340">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     scope="call"
                     closure="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1341">The callback to call when @variable changes</doc>
            <type name="ServiceProxyNotifyCallback"
                  c:type="GUPnPServiceProxyNotifyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="1342">User data for @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_action"
              c:identifier="gupnp_service_proxy_send_action"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.1.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="378">Sends action @action with parameters @Varargs to the service exposed by
@proxy synchronously. If an error occurred, @error will be set. In case of
a UPnPError the error code will be the same in @error.</doc>
        <doc-deprecated xml:space="preserve">Use gupnp_service_proxy_action_new() and
gupnp_service_proxy_call_action()</doc-deprecated>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="93"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="391">%TRUE if sending the action was succesful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="380">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="381">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="382">The location where to store any error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="383">tuples of in parameter name, in parameter type, and in parameter
value, followed by %NULL, and then tuples of out parameter name,
out parameter type, and out parameter value location, terminated with %NULL</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="send_action_list"
              c:identifier="gupnp_service_proxy_send_action_list"
              shadowed-by="send_action_list"
              deprecated="1"
              deprecated-version="1.1.2"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="483">The synchronous variant of #gupnp_service_proxy_begin_action_list and
#gupnp_service_proxy_end_action_list.</doc>
        <doc-deprecated xml:space="preserve">Use gupnp_service_proxy_action_new_from_list() and gupnp_service_proxy_call_action()</doc-deprecated>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="502">%TRUE if sending the action was succesful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="485">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="486">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="in_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="487">#GList of 'in' parameter
names (as strings)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="in_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="489">#GList of values (as
#GValue) that line up with @in_names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.Value"/>
            </type>
          </parameter>
          <parameter name="out_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="491">#GList of 'out' parameter
names (as strings)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="out_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="493">#GList of types (as #GType)
that line up with @out_names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GType"/>
            </type>
          </parameter>
          <parameter name="out_values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="495">#GList of values
(as #GValue) that line up with @out_names and @out_types.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="send_action_valist"
              c:identifier="gupnp_service_proxy_send_action_valist"
              introspectable="0"
              deprecated="1"
              deprecated-version="1.1.2">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="417">See gupnp_service_proxy_send_action().</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.c"
               line="428">%TRUE if sending the action was succesful.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="419">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="420">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="421">The location where to store any error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="var_args" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="422">va_list of tuples of in parameter name, in parameter type, and in
parameter value, followed by %NULL, and then tuples of out parameter name,
out parameter type, and out parameter value location</doc>
            <type name="va_list" c:type="va_list"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subscribed"
              c:identifier="gupnp_service_proxy_set_subscribed">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="2011">(Un)subscribes to this service.

Note that the relevant messages are not immediately sent but queued.
If you want to unsubcribe from this service because the application
is quitting, rely on automatic synchronised unsubscription on object
destruction instead.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="206"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="proxy" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2013">A #GUPnPServiceProxy</doc>
            <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
          </instance-parameter>
          <parameter name="subscribed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="2014">%TRUE to subscribe to this service</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="subscribed" writable="1" transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="337">Whether we are subscribed to this service.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent_instance">
        <type name="ServiceInfo" c:type="GUPnPServiceInfo"/>
      </field>
      <glib:signal name="subscription-lost" when="last">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy.c"
             line="355">Emitted whenever the subscription to this service has been lost due
to an error condition.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy.c"
                 line="358">A pointer to a #GError describing why the subscription has
been lost</doc>
            <type name="GLib.Error" c:type="gpointer"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServiceProxyAction"
            c:type="GUPnPServiceProxyAction"
            glib:type-name="GUPnPServiceProxyAction"
            glib:get-type="gupnp_service_proxy_action_get_type"
            c:symbol-prefix="service_proxy_action">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-proxy.h"
           line="56">Opaque structure for holding in-progress action data.</doc>
      <source-position filename="../libgupnp/gupnp-service-proxy.h" line="61"/>
      <constructor name="new"
                   c:identifier="gupnp_service_proxy_action_new"
                   introspectable="0">
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="215"/>
        <return-value transfer-ownership="full">
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <varargs/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_list"
                   c:identifier="gupnp_service_proxy_action_new_from_list">
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="219"/>
        <return-value transfer-ownership="full">
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="291">An action</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="in_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="292">#GList of 'in' parameter
names (as strings)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="in_values" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="294">#GList of values (as
#GValue) that line up with @in_names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_result"
              c:identifier="gupnp_service_proxy_action_get_result"
              introspectable="0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy-action.c"
             line="457">Retrieves the result of @action. The out parameters in @Varargs will be
filled in, and if an error occurred, @error will be set. In case of
an UPnP error the error code will be the same in @error.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="233"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy-action.c"
               line="469">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="459">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </instance-parameter>
          <parameter name="error"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="460">The location where to store any error, or %NULL</doc>
            <type name="GLib.Error" c:type="GError**"/>
          </parameter>
          <parameter name="..." transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="461">tuples of out parameter name, out parameter type, and out parameter
value location, terminated with %NULL. The out parameter values should be
freed after use</doc>
            <varargs/>
          </parameter>
        </parameters>
      </method>
      <method name="get_result_hash"
              c:identifier="gupnp_service_proxy_action_get_result_hash"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy-action.c"
             line="409">See gupnp_service_proxy_action_get_result(); this version takes a #GHashTable for
runtime generated parameter lists.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="244"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy-action.c"
               line="419">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="411">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </instance-parameter>
          <parameter name="out_hash"
                     direction="inout"
                     caller-allocates="0"
                     transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="412">A #GHashTable of
out parameter name and initialised #GValue pairs</doc>
            <type name="GLib.HashTable" c:type="GHashTable*">
              <type name="utf8"/>
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="get_result_list"
              c:identifier="gupnp_service_proxy_action_get_result_list"
              throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-proxy-action.c"
             line="334">A variant of gupnp_service_proxy_action_get_result() that takes lists of
out-parameter names, types and place-holders for values. The returned list
in @out_values must be freed using #g_list_free and each element in it using
#g_value_unset and #g_free.</doc>
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="238"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy-action.c"
               line="350">%TRUE on success.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="336">A #GUPnPServiceProxyAction handle</doc>
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </instance-parameter>
          <parameter name="out_names" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="337">#GList of 'out' parameter
names (as strings)</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="utf8"/>
            </type>
          </parameter>
          <parameter name="out_types" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="339">#GList of types (as #GType)
that line up with @out_names</doc>
            <type name="GLib.List" c:type="GList*">
              <type name="GType"/>
            </type>
          </parameter>
          <parameter name="out_values"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-service-proxy-action.c"
                 line="341">#GList of values
(as #GValue) that line up with @out_names and @out_types.</doc>
            <type name="GLib.List" c:type="GList**">
              <type name="GObject.Value"/>
            </type>
          </parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gupnp_service_proxy_action_ref">
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="224"/>
        <return-value transfer-ownership="full">
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref" c:identifier="gupnp_service_proxy_action_unref">
        <source-position filename="../libgupnp/gupnp-service-proxy.h"
                         line="227"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="action" transfer-ownership="none">
            <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <callback name="ServiceProxyActionCallback"
              c:type="GUPnPServiceProxyActionCallback">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-proxy.h"
           line="63">Callback notifying that @action on @proxy has returned and
gupnp_service_proxy_end_action() etc can be called.</doc>
      <source-position filename="../libgupnp/gupnp-service-proxy.h" line="72"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="65">The #GUPnPServiceProxy @action is called from</doc>
          <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
        </parameter>
        <parameter name="action" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="66">The #GUPnPServiceProxyAction in progress</doc>
          <type name="ServiceProxyAction" c:type="GUPnPServiceProxyAction*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="2">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="67">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ServiceProxyClass"
            c:type="GUPnPServiceProxyClass"
            glib:is-gtype-struct-for="ServiceProxy">
      <source-position filename="../libgupnp/gupnp-service-proxy.h" line="54"/>
      <field name="parent_class">
        <type name="ServiceInfoClass" c:type="GUPnPServiceInfoClass"/>
      </field>
      <field name="subscription_lost">
        <callback name="subscription_lost">
          <source-position filename="../libgupnp/gupnp-service-proxy.h"
                           line="46"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="proxy" transfer-ownership="none">
              <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
            </parameter>
            <parameter name="reason" transfer-ownership="none">
              <type name="GLib.Error" c:type="const GError*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="_gupnp_reserved1" introspectable="0">
        <callback name="_gupnp_reserved1">
          <source-position filename="../libgupnp/gupnp-service-proxy.h"
                           line="50"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved2" introspectable="0">
        <callback name="_gupnp_reserved2">
          <source-position filename="../libgupnp/gupnp-service-proxy.h"
                           line="51"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved3" introspectable="0">
        <callback name="_gupnp_reserved3">
          <source-position filename="../libgupnp/gupnp-service-proxy.h"
                           line="52"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
      <field name="_gupnp_reserved4" introspectable="0">
        <callback name="_gupnp_reserved4">
          <source-position filename="../libgupnp/gupnp-service-proxy.h"
                           line="53"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
        </callback>
      </field>
    </record>
    <callback name="ServiceProxyNotifyCallback"
              c:type="GUPnPServiceProxyNotifyCallback">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-proxy.h"
           line="77">Callback notifying that the state variable @variable on @proxy has changed to
@value.</doc>
      <source-position filename="../libgupnp/gupnp-service-proxy.h" line="87"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="proxy" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="79">The #GUPnPServiceProxy the notification originates from</doc>
          <type name="ServiceProxy" c:type="GUPnPServiceProxy*"/>
        </parameter>
        <parameter name="variable" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="80">The name of the variable being notified</doc>
          <type name="utf8" c:type="const char*"/>
        </parameter>
        <parameter name="value" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="81">The #GValue of the variable being notified</doc>
          <type name="GObject.Value" c:type="GValue*"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-service-proxy.h"
               line="82">User data</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="ServiceStateVariableInfo"
            c:type="GUPnPServiceStateVariableInfo">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service-introspection.h"
           line="83">This structure contains information about service state variable.</doc>
      <source-position filename="../libgupnp/gupnp-service-introspection.h"
                       line="113"/>
      <field name="name" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="85">The name of the state variable.</doc>
        <type name="utf8" c:type="char*"/>
      </field>
      <field name="send_events" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="86">Whether this state variable can source events.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="is_numeric" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="87">Wether this state variable is a numeric type (integer and
float).</doc>
        <type name="gboolean" c:type="gboolean"/>
      </field>
      <field name="type" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="89">The GType of this state variable.</doc>
        <type name="GType" c:type="GType"/>
      </field>
      <field name="default_value" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="90">The default value of this state variable.</doc>
        <type name="GObject.Value" c:type="GValue"/>
      </field>
      <field name="minimum" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="91">The minimum value of this state variable. Only applies to numeric
data types.</doc>
        <type name="GObject.Value" c:type="GValue"/>
      </field>
      <field name="maximum" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="93">The maximum value of this state variable. Only applies to numeric
data types.</doc>
        <type name="GObject.Value" c:type="GValue"/>
      </field>
      <field name="step" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="95">The step value of this state variable. Only applies to numeric
data types.</doc>
        <type name="GObject.Value" c:type="GValue"/>
      </field>
      <field name="allowed_values" writable="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service-introspection.h"
             line="97">The allowed values of this state variable. Only applies to
string data types. Unlike the other fields in this structure, this field
contains a list of (char *) strings rather than GValues.</doc>
        <type name="GLib.List" c:type="GList*">
          <type name="utf8"/>
        </type>
      </field>
    </record>
    <glib:boxed glib:name="Time"
                c:symbol-prefix="time"
                glib:type-name="GUPnPTime"
                glib:get-type="gupnp_time_get_type">
    </glib:boxed>
    <glib:boxed glib:name="TimeTZ"
                c:symbol-prefix="time_tz"
                glib:type-name="GUPnPTimeTZ"
                glib:get-type="gupnp_time_tz_get_type">
    </glib:boxed>
    <glib:boxed glib:name="URI"
                c:symbol-prefix="uri"
                glib:type-name="GUPnPURI"
                glib:get-type="gupnp_uri_get_type">
    </glib:boxed>
    <glib:boxed glib:name="UUID"
                c:symbol-prefix="uuid"
                glib:type-name="GUPnPUUID"
                glib:get-type="gupnp_uuid_get_type">
    </glib:boxed>
    <class name="WhiteList"
           c:symbol-prefix="white_list"
           c:type="GUPnPWhiteList"
           version="0.20.5"
           parent="GObject.Object"
           glib:type-name="GUPnPWhiteList"
           glib:get-type="gupnp_white_list_get_type"
           glib:type-struct="WhiteListClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-white-list.c"
           line="22">#GUPnPWhiteList handles network filtering. It provides API to manage a list
of entries that will be used to filter networks.
The #GUPnPWhiteList could be enabled or not. If it's enabled but the entries
list is empty, it behaves as disabled.</doc>
      <source-position filename="../libgupnp/gupnp-white-list.h" line="41"/>
      <constructor name="new"
                   c:identifier="gupnp_white_list_new"
                   version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="187">Create a new #GUPnPWhiteList.
The white list is disabled by default.</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="44"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="193">A new #GUPnPWhiteList object.</doc>
          <type name="WhiteList" c:type="GUPnPWhiteList*"/>
        </return-value>
      </constructor>
      <method name="add_entry"
              c:identifier="gupnp_white_list_add_entry"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="268">Add @entry in the list of valid criteria used by @white_list to
filter networks.
if @entry already exists, it won't be added a second time.</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="57"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="277">%TRUE if @entry is added, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="270">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
          <parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="271">A value used to filter network</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_entryv"
              c:identifier="gupnp_white_list_add_entryv"
              version="0.20.8">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="305">Add a list of entries to a #GUPnPWhiteList. This is a helper function to
directly add a %NULL-terminated array of string usually aquired from
commandline args.</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="307">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
          <parameter name="entries" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="308">A %NULL-terminated list of strings</doc>
            <array c:type="gchar**">
              <type name="utf8" c:type="gchar*"/>
            </array>
          </parameter>
        </parameters>
      </method>
      <method name="check_context"
              c:identifier="gupnp_white_list_check_context"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="411">It will check if the @context is allowed or not. The @white_list will check
all its entries againt #GUPnPContext interface, host ip and network fields
information. This function doesn't take into account the @white_list status
(enabled or not).</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="421">%TRUE if @context is matching the @white_list criterias,
%FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="413">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
          <parameter name="context" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="414">A #GUPnPContext to test.</doc>
            <type name="Context" c:type="GUPnPContext*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear"
              c:identifier="gupnp_white_list_clear"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="388">Remove all entries from #GList that compose the white list.
The list is now empty. Even if #GUPnPWhiteList is enabled, it will have the
same behavior as if it was disabled.</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="390">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="gupnp_white_list_get_enabled"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="224">Return the status of the #GUPnPWhiteList</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="51"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="230">%TRUE if @white_list is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="226">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entries"
              c:identifier="gupnp_white_list_get_entries"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="364">Get the #GList of entries that compose the white list. Do not free</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="68"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="370">a #GList of entries
used to filter networks, interfaces,... or %NULL.
Do not modify or free the list nor its elements.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="utf8"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="366">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_empty"
              c:identifier="gupnp_white_list_is_empty"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="246">Return the state of the entries list of #GUPnPWhiteList</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="252">%TRUE if @white_list is empty, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="248">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_entry"
              c:identifier="gupnp_white_list_remove_entry"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="328">Remove @entry in the list of valid criteria used by @white_list to
filter networks.</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="64"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-white-list.c"
               line="336">%TRUE if @entry is removed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="330">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
          <parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="331">A value to remove from the filter list.</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="gupnp_white_list_set_enabled"
              version="0.20.5">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="203">Enable or disable the #GUPnPWhiteList to perform the network filtering.</doc>
        <source-position filename="../libgupnp/gupnp-white-list.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="white_list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="205">A #GUPnPWhiteList</doc>
            <type name="WhiteList" c:type="GUPnPWhiteList*"/>
          </instance-parameter>
          <parameter name="enable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-white-list.c"
                 line="206">%TRUE to enable @white_list, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="enabled"
                version="0.20.5"
                writable="1"
                construct="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="149">Whether this white list is active or not.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="entries"
                version="0.20.5"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-white-list.c"
             line="168">Whether this white list is active or not.</doc>
        <type name="GLib.List" c:type="gpointer">
          <type name="utf8"/>
        </type>
      </property>
      <field name="parent_instance">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
    </class>
    <record name="WhiteListClass"
            c:type="GUPnPWhiteListClass"
            glib:is-gtype-struct-for="WhiteList">
      <source-position filename="../libgupnp/gupnp-white-list.h" line="41"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <class name="XMLDoc"
           c:symbol-prefix="xml_doc"
           c:type="GUPnPXMLDoc"
           version="0.13.0"
           parent="GObject.Object"
           glib:type-name="GUPnPXMLDoc"
           glib:get-type="gupnp_xml_doc_get_type"
           glib:type-struct="XMLDocClass">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-xml-doc.c"
           line="25">GObject wrapper for xmlDoc, so that we can use refcounting and weak
references.</doc>
      <source-position filename="../libgupnp/gupnp-xml-doc.h" line="36"/>
      <constructor name="new"
                   c:identifier="gupnp_xml_doc_new"
                   version="0.13.0">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-xml-doc.c"
             line="83">Create a new #GUPnPXMLDoc for @xml_doc.</doc>
        <source-position filename="../libgupnp/gupnp-xml-doc.h" line="43"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-xml-doc.c"
               line="89">A new #GUPnPXMLDoc, or %NULL on an error</doc>
          <type name="XMLDoc" c:type="GUPnPXMLDoc*"/>
        </return-value>
        <parameters>
          <parameter name="xml_doc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-xml-doc.c"
                 line="85">Pointer to #xmlDoc to wrap under this object</doc>
            <type name="libxml2.Doc" c:type="xmlDoc*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_path"
                   c:identifier="gupnp_xml_doc_new_from_path"
                   version="0.13.0"
                   throws="1">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-xml-doc.c"
             line="107">Create a new #GUPnPXMLDoc for the XML document at @path.</doc>
        <source-position filename="../libgupnp/gupnp-xml-doc.h" line="46"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-xml-doc.c"
               line="114">A new #GUPnPXMLDoc, or %NULL on an error</doc>
          <type name="XMLDoc" c:type="GUPnPXMLDoc*"/>
        </return-value>
        <parameters>
          <parameter name="path" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-xml-doc.c"
                 line="109">Path to xml document</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_doc" c:identifier="gupnp_xml_doc_get_doc">
        <source-position filename="../libgupnp/gupnp-xml-doc.h" line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="../libgupnp/gupnp-xml-doc.c"
               line="150">a pointer to the wrapped #xmlDoc</doc>
          <type name="libxml2.Doc" c:type="const xmlDoc*"/>
        </return-value>
        <parameters>
          <instance-parameter name="xml_doc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="../libgupnp/gupnp-xml-doc.c"
                 line="148">A #GUPnPXMLDoc</doc>
            <type name="XMLDoc" c:type="GUPnPXMLDoc*"/>
          </instance-parameter>
        </parameters>
      </method>
    </class>
    <record name="XMLDocClass"
            c:type="GUPnPXMLDocClass"
            glib:is-gtype-struct-for="XMLDoc">
      <source-position filename="../libgupnp/gupnp-xml-doc.h" line="36"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <enumeration name="XMLError"
                 glib:type-name="GUPnPXMLError"
                 glib:get-type="gupnp_xml_error_get_type"
                 c:type="GUPnPXMLError"
                 glib:error-domain="gupnp-xml-error">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-error.h"
           line="102">#GError codes used for errors in the #GUPNP_XML_ERROR domain, during
processing of XML data.</doc>
      <member name="parse"
              value="0"
              c:identifier="GUPNP_XML_ERROR_PARSE"
              glib:nick="parse">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="104">Generic XML parsing error.</doc>
      </member>
      <member name="no_node"
              value="1"
              c:identifier="GUPNP_XML_ERROR_NO_NODE"
              glib:nick="no-node">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="105">A required XML node was not found.</doc>
      </member>
      <member name="empty_node"
              value="2"
              c:identifier="GUPNP_XML_ERROR_EMPTY_NODE"
              glib:nick="empty-node">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="106">An XML node is unexpectedly empty.</doc>
      </member>
      <member name="invalid_attribute"
              value="3"
              c:identifier="GUPNP_XML_ERROR_INVALID_ATTRIBUTE"
              glib:nick="invalid-attribute">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="107">An XML node has an unknown attribute.</doc>
      </member>
      <member name="other"
              value="4"
              c:identifier="GUPNP_XML_ERROR_OTHER"
              glib:nick="other">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-error.h"
             line="108">Unknown/unhandled XML related errors.</doc>
      </member>
      <function name="quark" c:identifier="gupnp_xml_error_quark">
        <return-value transfer-ownership="none">
          <type name="GLib.Quark" c:type="GQuark"/>
        </return-value>
      </function>
    </enumeration>
    <function name="control_error_quark"
              c:identifier="gupnp_control_error_quark"
              moved-to="ControlError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="eventing_error_quark"
              c:identifier="gupnp_eventing_error_quark"
              moved-to="EventingError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="get_uuid" c:identifier="gupnp_get_uuid">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-service.c"
           line="1105">Generate and return a new UUID.</doc>
      <source-position filename="../libgupnp/gupnp-uuid.h" line="28"/>
      <return-value transfer-ownership="full">
        <doc xml:space="preserve"
             filename="../libgupnp/gupnp-service.c"
             line="1110">A newly generated UUID in string representation.</doc>
        <type name="utf8" c:type="char*"/>
      </return-value>
    </function>
    <docsection name="gupnptypes">
      <doc xml:space="preserve"
           filename="../libgupnp/gupnp-types.c"
           line="23">These GTypes are used to marshal to and from string data to particular UPnP
types when invoking actions on a #GUPnPServiceProxy.</doc>
    </docsection>
    <function name="rootdevice_error_quark"
              c:identifier="gupnp_rootdevice_error_quark"
              moved-to="RootdeviceError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function name="server_error_quark"
              c:identifier="gupnp_server_error_quark"
              moved-to="ServerError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
    <function-macro name="value_get_string"
                    c:identifier="gupnp_value_get_string"
                    introspectable="0">
      <source-position filename="../libgupnp/gupnp-types.h" line="115"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="value_get_xml_node"
                    c:identifier="gupnp_value_get_xml_node"
                    introspectable="0">
      <source-position filename="../libgupnp/gupnp-types.h" line="112"/>
      <parameters>
        <parameter name="value">
        </parameter>
      </parameters>
    </function-macro>
    <function name="xml_error_quark"
              c:identifier="gupnp_xml_error_quark"
              moved-to="XMLError.quark">
      <return-value transfer-ownership="none">
        <type name="GLib.Quark" c:type="GQuark"/>
      </return-value>
    </function>
  </namespace>
</repository>
