<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="LibvirtGConfig" version="1.0"/>
  <include name="LibvirtGLib" version="1.0"/>
  <package name="libvirt-gobject-1.0"/>
  <c:include name="libvirt-gobject/libvirt-gobject.h"/>
  <namespace name="LibvirtGObject"
             version="1.0"
             shared-library="libvirt-glib-1.0.so.0,libvirt-gconfig-1.0.so.0,libvirt-gobject-1.0.so.0"
             c:identifier-prefixes="GVir"
             c:symbol-prefixes="gvir">
    <function-macro name="CONNECTION"
                    c:identifier="GVIR_CONNECTION"
                    introspectable="0">
      <source-position filename="libvirt-gobject-connection.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_CLASS"
                    c:identifier="GVIR_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-connection.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="CONNECTION_GET_CLASS"
                    c:identifier="GVIR_CONNECTION_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-connection.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Connection"
           c:symbol-prefix="connection"
           c:type="GVirConnection"
           parent="GObject.Object"
           glib:type-name="GVirConnection"
           glib:get-type="gvir_connection_get_type"
           glib:type-struct="ConnectionClass">
      <source-position filename="libvirt-gobject-connection.h" line="81"/>
      <constructor name="new" c:identifier="gvir_connection_new">
        <source-position filename="libvirt-gobject-connection.h" line="87"/>
        <return-value transfer-ownership="full">
          <type name="Connection" c:type="GVirConnection*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </constructor>
      <virtual-method name="connection_closed">
        <source-position filename="libvirt-gobject-connection.h" line="73"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connection_opened">
        <source-position filename="libvirt-gobject-connection.h" line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="domain_added">
        <source-position filename="libvirt-gobject-connection.h" line="75"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="domain_removed">
        <source-position filename="libvirt-gobject-connection.h" line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stream_new" introspectable="0">
        <source-position filename="libvirt-gobject-connection.h" line="78"/>
        <return-value>
          <type name="Stream" c:type="GVirStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="handle"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="close" c:identifier="gvir_connection_close">
        <source-position filename="libvirt-gobject-connection.h" line="110"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="create_domain"
              c:identifier="gvir_connection_create_domain"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1360">Create the configuration file for a new persistent domain.
The returned domain will initially be in the shutoff state.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="139"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1368">the newly created domain, or NULL if an error
occurred. The returned object should be unreffed with g_object_unref()
when no longer needed.</doc>
          <type name="Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1362">a #GVirConnection on which to create the domain</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="conf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1363">the configuration for the new domain</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_storage_pool"
              c:identifier="gvir_connection_create_storage_pool"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="214"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1993">the newly created storage pool, or NULL if an
error occurred. The returned list should be freed with g_list_free(),
after its elements have been unreffed with g_object_unref().</doc>
          <type name="StoragePool" c:type="GVirStoragePool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1988">a #GVirConnection on which to create the pool</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="conf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1989">the configuration for the new storage pool</doc>
            <type name="LibvirtGConfig.StoragePool"
                  c:type="GVirConfigStoragePool*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1990">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_domains"
              c:identifier="gvir_connection_fetch_domains"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="697">Use this method to fetch all domains managed by connection
@conn. Use e.g. #gvir_connection_find_domain_by_id or
#gvir_connection_get_domain afterwards to query the fetched
domains.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="112"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="699">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="700">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_domains_async"
              c:identifier="gvir_connection_fetch_domains_async">
        <source-position filename="libvirt-gobject-connection.h" line="115"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="896">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="897">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="898">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="899">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_domains_finish"
              c:identifier="gvir_connection_fetch_domains_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="119"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="924">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="925">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_interfaces"
              c:identifier="gvir_connection_fetch_interfaces"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1469">Use this method to fetch information on all network interfaces
managed by connection @conn on host machine. Use
#gvir_connection_get_interfaces or #gvir_connection_get_interface afterwards
to query the fetched interfaces.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="147"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1480">%TRUE on success, %FALSE otherwise and @err is set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1471">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1472">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_interfaces_async"
              c:identifier="gvir_connection_fetch_interfaces_async">
        <source-position filename="libvirt-gobject-connection.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1584">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1585">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1586">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1587">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_interfaces_finish"
              c:identifier="gvir_connection_fetch_interfaces_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="154"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1612">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1613">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_networks"
              c:identifier="gvir_connection_fetch_networks"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1729">Use this method to fetch all networks managed by connection
@conn. Use e.g. #gvir_connection_find_network_by_name or
#gvir_connection_get_networks afterwards to query the fetched
domains.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="163"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1731">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1732">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_networks_async"
              c:identifier="gvir_connection_fetch_networks_async">
        <source-position filename="libvirt-gobject-connection.h" line="166"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1839">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1840">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1841">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1842">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_networks_finish"
              c:identifier="gvir_connection_fetch_networks_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="170"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1867">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1868">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_storage_pools"
              c:identifier="gvir_connection_fetch_storage_pools"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="785">Use this method to fetch all storage pools managed by connection
@conn. Use e.g. #gvir_connection_find_storage_pool_by_name or
#gvir_connection_get_storage_pools afterwards to query the fetched
pools.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="197"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="787">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="788">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_storage_pools_async"
              c:identifier="gvir_connection_fetch_storage_pools_async">
        <source-position filename="libvirt-gobject-connection.h" line="200"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="958">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="959">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="960">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="961">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_storage_pools_finish"
              c:identifier="gvir_connection_fetch_storage_pools_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="204"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="986">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="987">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_domain_by_id"
              c:identifier="gvir_connection_find_domain_by_id">
        <source-position filename="libvirt-gobject-connection.h" line="134"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1206">the #GVirDomain, or NULL. The returned
object should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1203">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1204">id of the requested domain</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_domain_by_name"
              c:identifier="gvir_connection_find_domain_by_name">
        <source-position filename="libvirt-gobject-connection.h" line="136"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1243">the #GVirDomain, or NULL. The returned
object should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1240">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1241">name of the requested domain</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_interface_by_mac"
              c:identifier="gvir_connection_find_interface_by_mac">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1689">Get a particular interface which has MAC address @mac.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="160"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1696">A new reference to a #GVirInterface, or NULL
if no interface exists with MAC address @mac. The returned object must be
unreffed using g_object_unref() once used.</doc>
          <type name="Interface" c:type="GVirInterface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1691">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="macaddr" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1692">MAC address to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_network_by_name"
              c:identifier="gvir_connection_find_network_by_name">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1943">Get a particular network which has name @name.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="176"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1950">A new reference to a #GVirNetwork, or NULL if
no network exists with name @name. The returned object must be unreffed using
g_object_unref() once used.</doc>
          <type name="Network" c:type="GVirNetwork*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1945">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1946">name of the network to search for</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_storage_pool_by_name"
              c:identifier="gvir_connection_find_storage_pool_by_name">
        <source-position filename="libvirt-gobject-connection.h" line="211"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1283">the #GVirStoragePool, or NULL. The returned
object should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="StoragePool" c:type="GVirStoragePool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1280">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1281">name of the requested storage pool</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_capabilities"
              c:identifier="gvir_connection_get_capabilities"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="227"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2253">a #GVirConfigCapabilities or NULL.  The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="LibvirtGConfig.Capabilities"
                c:type="GVirConfigCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2250">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_capabilities_async"
              c:identifier="gvir_connection_get_capabilities_async">
        <source-position filename="libvirt-gobject-connection.h" line="229"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2303">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2304">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2305">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2306">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_capabilities_finish"
              c:identifier="gvir_connection_get_capabilities_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="234"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2334">a #GVirConfigCapabilities or NULL. The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="LibvirtGConfig.Capabilities"
                c:type="GVirConfigCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2331">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2332">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_domain" c:identifier="gvir_connection_get_domain">
        <source-position filename="libvirt-gobject-connection.h" line="132"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1153">the #GVirDomain, or NULL. The returned
object should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1150">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1151">uuid string of the requested domain</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_domain_capabilities"
              c:identifier="gvir_connection_get_domain_capabilities"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="259"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2090">a #GVirConfigDomainCapabilities or NULL.
The return object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="LibvirtGConfig.DomainCapabilities"
                c:type="GVirConfigDomainCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2082">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="emulatorbin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2083">path to emulator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arch"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2084">domain architecture</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="machine"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2085">machine type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="virttype"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2086">virtualization type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2087">extra flags; not used yet, so callers should always pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_domain_capabilities_async"
              c:identifier="gvir_connection_get_domain_capabilities_async">
        <source-position filename="libvirt-gobject-connection.h" line="266"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2177">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="emulatorbin"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2178">path to emulator</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="arch"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2179">domain architecture</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="machine"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2180">machine type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="virttype"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2181">virtualization type</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2182">extra flags; not used yet, so callers should always pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2183">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="7">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2184">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2185">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_domain_capabilities_finish"
              c:identifier="gvir_connection_get_domain_capabilities_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="276"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2229">a #GVirConfigDomainCapabilities or NULL.
The returned object should be unreffed with g_object_unref() when no
longer needed.</doc>
          <type name="LibvirtGConfig.DomainCapabilities"
                c:type="GVirConfigDomainCapabilities*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2226">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2227">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_domains" c:identifier="gvir_connection_get_domains">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1091">Gets a list of the domains available through @conn.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="131"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1097">List
of #GVirDomain. The returned list should be freed with g_list_free(),
after its elements have been unreffed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Domain"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1093">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hypervisor_name"
              c:identifier="gvir_connection_get_hypervisor_name"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1010">Get name of current hypervisor used.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="126"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1017">new string that should be freed when no longer needed,
or NULL upon error.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1012">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_interface"
              c:identifier="gvir_connection_get_interface">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1659">Get a particular interface which has name @name.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="158"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1666">A new reference to a #GVirInterface, or NULL
if no interface exists with name @name. The returned object must be unreffed
using g_object_unref() once used.</doc>
          <type name="Interface" c:type="GVirInterface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1661">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1662">interface name to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_interfaces"
              c:identifier="gvir_connection_get_interfaces">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1630">Get a list of all the network interfaces managed by connection @conn on
host machine.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="157"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1637">List
of #GVirInterface. The returned list should be freed with g_list_free(),
after its elements have been unreffed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Interface"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1632">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_network" c:identifier="gvir_connection_get_network">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1913">Get a particular network which has UUID @uuid.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="174"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1920">A new reference to a #GVirNetwork, or NULL if
no network exists with UUID @uuid. The returned object must be unreffed using
g_object_unref() once used.</doc>
          <type name="Network" c:type="GVirNetwork*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1915">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1916">UUID of the network to lookup</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_networks" c:identifier="gvir_connection_get_networks">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1885">Get a list of all the network networks available through @conn.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="173"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1891">List
of #GVirNetwork. The returned list should be freed with g_list_free(),
after its elements have been unreffed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Network"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1887">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_node_info"
              c:identifier="gvir_connection_get_node_info"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="224"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2045">the info, or NULL if an error occurred. The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="NodeInfo" c:type="GVirNodeInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2042">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_storage_pool"
              c:identifier="gvir_connection_get_storage_pool">
        <source-position filename="libvirt-gobject-connection.h" line="209"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1179">the #GVirStoragePool, or NULL. The returned
object should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="StoragePool" c:type="GVirStoragePool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1176">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="uuid" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1177">uuid string of the requested storage pool</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_storage_pools"
              c:identifier="gvir_connection_get_storage_pools">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1119">Gets a list of the storage pools available through @conn.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="208"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1125">List
of #GVirStoragePool. The returned list should be freed with
g_list_free(), after its elements have been unreffed with
g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="StoragePool"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1121">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stream" c:identifier="gvir_connection_get_stream">
        <source-position filename="libvirt-gobject-connection.h" line="221"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1341">a #GVirStream stream, or NULL.The returned
object should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="Stream" c:type="GVirStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1338">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1339">flags to use for the stream</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_uri" c:identifier="gvir_connection_get_uri">
        <source-position filename="libvirt-gobject-connection.h" line="124"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_version"
              c:identifier="gvir_connection_get_version"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1051">Get version of current hypervisor used.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="128"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1058">version on success, 0 otherwise and @err set.</doc>
          <type name="gulong" c:type="gulong"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1053">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_open" c:identifier="gvir_connection_is_open">
        <source-position filename="libvirt-gobject-connection.h" line="108"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="is_read_only" c:identifier="gvir_connection_is_read_only">
        <source-position filename="libvirt-gobject-connection.h" line="109"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open" c:identifier="gvir_connection_open" throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="88"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="486">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="487">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_async" c:identifier="gvir_connection_open_async">
        <source-position filename="libvirt-gobject-connection.h" line="94"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="521">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="522">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="523">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="524">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_finish"
              c:identifier="gvir_connection_open_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="550">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="551">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_read_only"
              c:identifier="gvir_connection_open_read_only"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="91"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_read_only_async"
              c:identifier="gvir_connection_open_read_only_async">
        <source-position filename="libvirt-gobject-connection.h" line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="585">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="586">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="587">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="588">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_read_only_finish"
              c:identifier="gvir_connection_open_read_only_finish"
              throws="1">
        <source-position filename="libvirt-gobject-connection.h" line="105"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="614">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="615">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_domain_from_file"
              c:identifier="gvir_connection_restore_domain_from_file"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="2353">Restores the domain saved with #gvir_domain_save_to_file</doc>
        <source-position filename="libvirt-gobject-connection.h" line="239"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2362">TRUE on success, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2355">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2356">path to input file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="custom_conf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2357">configuration for domain or NULL</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2358">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_domain_from_file_async"
              c:identifier="gvir_connection_restore_domain_from_file_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="2439">Asynchronous variant of #gvir_connection_restore_domain_from_file</doc>
        <source-position filename="libvirt-gobject-connection.h" line="246"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2441">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2442">path to input file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="custom_conf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2443">configuration for domain</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2444">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2445">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2446">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2447">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="restore_domain_from_file_finish"
              c:identifier="gvir_connection_restore_domain_from_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="2489">Finishes the operation started by #gvir_restore_domain_from_file_async.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="255"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="2497">TRUE if domain was restored successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2491">a #GVirConnection</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="2492">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_domain"
              c:identifier="gvir_connection_start_domain"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-connection.c"
             line="1414">Start a new transient domain without persistent configuration.
The returned domain will initially be running.</doc>
        <source-position filename="libvirt-gobject-connection.h" line="142"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-connection.c"
               line="1422">the newly created domain, or NULL if an error
occurred. The returned object should be unreffed with g_object_unref()
when no longer needed.</doc>
          <type name="Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="conn" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1416">a #GVirConnection on which to create the domain</doc>
            <type name="Connection" c:type="GVirConnection*"/>
          </instance-parameter>
          <parameter name="conf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-connection.c"
                 line="1417">the configuration for the new domain</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="ConnectionHandle"/>
      </property>
      <property name="uri"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ConnectionPrivate" c:type="GVirConnectionPrivate*"/>
      </field>
      <glib:signal name="connection-closed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="connection-opened" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="domain-added" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Domain"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="domain-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Domain"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ConnectionClass"
            c:type="GVirConnectionClass"
            glib:is-gtype-struct-for="Connection">
      <source-position filename="libvirt-gobject-connection.h" line="81"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="connection_opened">
        <callback name="connection_opened">
          <source-position filename="libvirt-gobject-connection.h" line="72"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_closed">
        <callback name="connection_closed">
          <source-position filename="libvirt-gobject-connection.h" line="73"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="domain_added">
        <callback name="domain_added">
          <source-position filename="libvirt-gobject-connection.h" line="75"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="domain_removed">
        <callback name="domain_removed">
          <source-position filename="libvirt-gobject-connection.h" line="76"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stream_new" introspectable="0">
        <callback name="stream_new" introspectable="0">
          <source-position filename="libvirt-gobject-connection.h" line="78"/>
          <return-value>
            <type name="Stream" c:type="GVirStream*"/>
          </return-value>
          <parameters>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
            <parameter name="handle"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <type name="gpointer" c:type="gpointer"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="ConnectionHandle"
                c:symbol-prefix="connection_handle"
                glib:type-name="GVirConnectionHandle"
                glib:get-type="gvir_connection_handle_get_type">
    </glib:boxed>
    <record name="ConnectionPrivate"
            c:type="GVirConnectionPrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-connection.h" line="55"/>
    </record>
    <function-macro name="DOMAIN"
                    c:identifier="GVIR_DOMAIN"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_CLASS"
                    c:identifier="GVIR_DOMAIN_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_DEVICE"
                    c:identifier="GVIR_DOMAIN_DEVICE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-device.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_DEVICE_CLASS"
                    c:identifier="GVIR_DOMAIN_DEVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-device.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_DEVICE_GET_CLASS"
                    c:identifier="GVIR_DOMAIN_DEVICE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-device.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_DISK"
                    c:identifier="GVIR_DOMAIN_DISK"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-disk.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_DISK_CLASS"
                    c:identifier="GVIR_DOMAIN_DISK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-disk.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_DISK_GET_CLASS"
                    c:identifier="GVIR_DOMAIN_DISK_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-disk.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_GET_CLASS"
                    c:identifier="GVIR_DOMAIN_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_INTERFACE"
                    c:identifier="GVIR_DOMAIN_INTERFACE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_INTERFACE_CLASS"
                    c:identifier="GVIR_DOMAIN_INTERFACE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_INTERFACE_GET_CLASS"
                    c:identifier="GVIR_DOMAIN_INTERFACE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_SNAPSHOT"
                    c:identifier="GVIR_DOMAIN_SNAPSHOT"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_SNAPSHOT_CLASS"
                    c:identifier="GVIR_DOMAIN_SNAPSHOT_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DOMAIN_SNAPSHOT_GET_CLASS"
                    c:identifier="GVIR_DOMAIN_SNAPSHOT_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Domain"
           c:symbol-prefix="domain"
           c:type="GVirDomain"
           parent="GObject.Object"
           glib:type-name="GVirDomain"
           glib:get-type="gvir_domain_get_type"
           glib:type-struct="DomainClass">
      <source-position filename="libvirt-gobject-domain.h" line="72"/>
      <virtual-method name="pmsuspended">
        <source-position filename="libvirt-gobject-domain.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="resumed">
        <source-position filename="libvirt-gobject-domain.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="started">
        <source-position filename="libvirt-gobject-domain.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stopped">
        <source-position filename="libvirt-gobject-domain.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="suspended">
        <source-position filename="libvirt-gobject-domain.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="updated">
        <source-position filename="libvirt-gobject-domain.h" line="67"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="create_snapshot"
              c:identifier="gvir_domain_create_snapshot"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="366"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1503">snapshot of domain. The returned object should be
unreffed when no longer needed</doc>
          <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1498">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="custom_conf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1499">configuration of snapshot or NULL</doc>
            <type name="LibvirtGConfig.DomainSnapshot"
                  c:type="GVirConfigDomainSnapshot*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1500">bitwise-OR of #GVirDomainSnapshotCreateFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_snapshot_async"
              c:identifier="gvir_domain_create_snapshot_async">
        <source-position filename="libvirt-gobject-domain.h" line="371"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1570">The #GVirDomain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="custom_conf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1571">Configuration of snapshot or %NULL</doc>
            <type name="LibvirtGConfig.DomainSnapshot"
                  c:type="GVirConfigDomainSnapshot*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1572">Bitwise-OR of #GVirDomainSnapshotCreateFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1573">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1574">Completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1575">Opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_snapshot_finish"
              c:identifier="gvir_domain_create_snapshot_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="378"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1606">The created snapshot</doc>
          <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1602">A #GVirDomain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1603">Async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="gvir_domain_delete" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="274"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="620">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="621">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_snapshots"
              c:identifier="gvir_domain_fetch_snapshots"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="383"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1625">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1620">The domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="list_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1621">bitwise-OR of #GVirDomainSnapshotListFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1622">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_snapshots_async"
              c:identifier="gvir_domain_fetch_snapshots_async">
        <source-position filename="libvirt-gobject-domain.h" line="390"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1742">The domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="list_flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1743">bitwise-OR of #GVirDomainSnapshotListFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1744">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1745">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1746">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="fetch_snapshots_finish"
              c:identifier="gvir_domain_fetch_snapshots_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="396"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1771">TRUE on success, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1768">a #GVirDomain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1769">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="gvir_domain_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="312"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="844">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="841">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="842">the %GVirDomainXMLFlags flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_devices"
              c:identifier="gvir_domain_get_devices"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1410">Gets the list of devices attached to @domain. The returned list should
be freed with g_list_free(), after its elements have been unreffed with
g_object_unref().</doc>
        <source-position filename="libvirt-gobject-domain.h" line="357"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1419">a newly
allocated #GList of #GVirDomainDevice.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="DomainDevice"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1412">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_has_current_snapshot"
              c:identifier="gvir_domain_get_has_current_snapshot"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="400"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1793">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1787">a #GVirDomain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1788">Unused, pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="has_current_snapshot"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1789">Will be set to %TRUE if the given domain
has a current snapshot and to %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_id" c:identifier="gvir_domain_get_id" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="236"/>
        <return-value transfer-ownership="none">
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info" c:identifier="gvir_domain_get_info" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="302"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="944">the info. The returned structure should be
freed using #g_boxed_free() with GVIR_TYPE_DOMAIN_INFO as the first argument
when no longer needed.</doc>
          <type name="DomainInfo" c:type="GVirDomainInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="942">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_info_async" c:identifier="gvir_domain_get_info_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="995">Asynchronous variant of #gvir_domain_get_info.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="304"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="997">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="998">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="999">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1000">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info_finish"
              c:identifier="gvir_domain_get_info_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1022">Finishes the operation started by #gvir_domain_get_info_async.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="308"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1030">the info. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="DomainInfo" c:type="GVirDomainInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1024">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1025">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_domain_get_name">
        <source-position filename="libvirt-gobject-domain.h" line="234"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent" c:identifier="gvir_domain_get_persistent">
        <source-position filename="libvirt-gobject-domain.h" line="354"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1387">TRUE if domain is persistent, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1385">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_saved" c:identifier="gvir_domain_get_saved">
        <source-position filename="libvirt-gobject-domain.h" line="355"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1400">TRUE if a stopped domain has a saved state to which it can be
restored to using #gvir_domain_start, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1398">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_snapshots" c:identifier="gvir_domain_get_snapshots">
        <source-position filename="libvirt-gobject-domain.h" line="388"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1696">A
list of all the snapshots available for the given domain. The returned
list should be freed with g_list_free(), after its elements have been
unreffed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="DomainSnapshot"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1695">The domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="gvir_domain_get_uuid">
        <source-position filename="libvirt-gobject-domain.h" line="235"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="open_console"
              c:identifier="gvir_domain_open_console"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1086">Open a text console for the domain @dom, connecting it to the
stream @stream. If @devname is NULL, the default console will
be opened, otherwise @devname can be used to specify a non-default
console device.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="325"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1098">TRUE if the console was opened, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1088">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1090">stream to use as output</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </parameter>
          <parameter name="devname"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1089">the device name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1091">extra flags, currently unused</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_graphics"
              c:identifier="gvir_domain_open_graphics"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1135">Open a connection to the local graphics display, connecting it to the
socket pair file descriptor passed in as @fd.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="331"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1145">TRUE if the graphics connection was opened, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1137">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1138">the graphics index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="fd" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1139">pre-opened socket pair</doc>
            <type name="gint" c:type="int"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1140">extra flags, currently unused</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="open_graphics_fd"
              c:identifier="gvir_domain_open_graphics_fd"
              version="0.2.0"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1176">This will create a socket pair connected to the graphics backend of @dom. One
end of the socket will be returned on success, and the other end is handed to
the hypervisor. If @dom has multiple graphics backends configured, then @idx
will determine which one is opened, starting from @idx 0.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="336"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1187">An fd on success, -1 on failure.</doc>
          <type name="gint" c:type="int"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1178">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="idx" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1179">the graphics index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1180">extra flags, currently unused</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="reboot" c:identifier="gvir_domain_reboot" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="280"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="675">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="676">the %GVirDomainRebootFlags flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="resume" c:identifier="gvir_domain_resume" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="251"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="429">TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="426">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resume_async" c:identifier="gvir_domain_resume_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="465">Asynchronous variant of #gvir_domain_resume.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="253"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="467">the domain to resume</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="468">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="469">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="470">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="resume_finish"
              c:identifier="gvir_domain_resume_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="257"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save" c:identifier="gvir_domain_save" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1287">Saves the state of the domain on disk and stops it. Use #gvir_domain_start
to restore the saved state of the domain. A saved domain can be restored
even after shutdown/reboot of host machine.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="343"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1297">TRUE if domain was saved successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1289">the domain to save</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1290">extra flags, currently unused</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_async" c:identifier="gvir_domain_save_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1332">Asynchronous variant of #gvir_domain_save.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="346"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1334">the domain to save</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1335">extra flags, currently unused</doc>
            <type name="guint" c:type="unsigned int"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1336">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1337">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1338">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_finish"
              c:identifier="gvir_domain_save_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1362">Finishes the operation started by #gvir_domain_save_async.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="351"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1370">TRUE if domain was saved successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1364">the domain to save</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1365">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file"
              c:identifier="gvir_domain_save_to_file"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="284"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="705">TRUE on success, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="700">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="701">path to the output file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="custom_conf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="702">configuration for domain or NULL</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="703">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file_async"
              c:identifier="gvir_domain_save_to_file_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="774">Asynchronous variant of #gvir_domain_save_to_file</doc>
        <source-position filename="libvirt-gobject-domain.h" line="290"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="776">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="filename" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="777">path to output file</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="custom_conf"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="778">configuration for domain or NULL</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="779">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="780">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="5">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="781">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="782">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="save_to_file_finish"
              c:identifier="gvir_domain_save_to_file_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="818">Finishes the operation started by #gvir_domain_save_to_file_async.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="298"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="826">TRUE if domain was saved successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="820">the domain to save</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="821">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="screenshot"
              c:identifier="gvir_domain_screenshot"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="319"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1050">a newly allocated string containing the
mime-type of the image format, or NULL upon error.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1046">stream to use as output</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </parameter>
          <parameter name="monitor_id" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1047">monitor ID to take screenshot from</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1048">extra flags, currently unused</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config"
              c:identifier="gvir_domain_set_config"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="873">Resets configuration of an existing domain.

Note: If domain is already running, the new configuration will not take
affect until domain reboots.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="315"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="884">TRUE on success, FALSE if an error occurred.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="domain" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="875">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="conf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="876">the new configuration for the domain</doc>
            <type name="LibvirtGConfig.Domain" c:type="GVirConfigDomain*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time" c:identifier="gvir_domain_set_time" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1820">This function tries to set guest time to the given value. The passed
time must in UTC.

If @date_time is %NULL, the time is reset using the domain's RTC.

Please note that some hypervisors may require guest agent to be configured
and running in order for this function to work.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="405"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1835">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1822">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="date_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1823">the time to set as #GDateTime.</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1824">Unused, pass 0.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_async" c:identifier="gvir_domain_set_time_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1896">Asynchronous variant of #gvir_domain_set_time.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="409"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1898">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="date_time"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1899">the time to set as #GDateTime.</doc>
            <type name="GLib.DateTime" c:type="GDateTime*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1900">bitwise-OR of #GVirDomainSetTimeFlags.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1901">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="4">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1902">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1903">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_time_finish"
              c:identifier="gvir_domain_set_time_finish"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1933">Finishes the operation started by #gvir_domain_set_time_async.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="415"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1941">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1935">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1936">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="shutdown" c:identifier="gvir_domain_shutdown" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="277"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="650">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="651">the %GVirDomainShutdownFlags flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="gvir_domain_start" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="239"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="339">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="340">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async" c:identifier="gvir_domain_start_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="383">Asynchronous variant of #gvir_domain_start.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="242"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="385">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="386">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="387">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="388">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="389">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="gvir_domain_start_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="247"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="gvir_domain_stop" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="271"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="590">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="591">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="suspend" c:identifier="gvir_domain_suspend" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1256">Suspends an active domain, the process is frozen without further access to
CPU resources and I/O but the memory used by the domain at the hypervisor
level will stay allocated. Use gvir_domain_resume() to reactivate the domain.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="341"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1265">TRUE if domain was suspended successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1258">the domain to suspend</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="update_device"
              c:identifier="gvir_domain_update_device"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="1455">Update the configuration of a device.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="360"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="1464">TRUE if device was updated successfully, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1457">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1458">A modified device config</doc>
            <type name="LibvirtGConfig.DomainDevice"
                  c:type="GVirConfigDomainDevice*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="1459">bitwise-OR of #GVirDomainUpdateDeviceFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="wakeup" c:identifier="gvir_domain_wakeup" throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="260"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain.c"
               line="509">TRUE on success</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="505">the domain</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="506">placeholder for flags, pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="wakeup_async" c:identifier="gvir_domain_wakeup_async">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.c"
             line="547">Asynchronous variant of #gvir_domain_wakeup.</doc>
        <source-position filename="libvirt-gobject-domain.h" line="263"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="549">the domain to wakeup</doc>
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="550">placeholder for flags, pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="551">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="552">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain.c"
                 line="553">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="wakeup_finish"
              c:identifier="gvir_domain_wakeup_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain.h" line="268"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="dom" transfer-ownership="none">
            <type name="Domain" c:type="GVirDomain*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DomainHandle"/>
      </property>
      <property name="persistent" transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DomainPrivate" c:type="GVirDomainPrivate*"/>
      </field>
      <glib:signal name="pmsuspended"
                   when="last"
                   no-recurse="1"
                   detailed="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="resumed"
                   when="last"
                   no-recurse="1"
                   detailed="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="started"
                   when="last"
                   no-recurse="1"
                   detailed="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="stopped"
                   when="last"
                   no-recurse="1"
                   detailed="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="suspended"
                   when="last"
                   no-recurse="1"
                   detailed="1"
                   no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="updated" when="last" no-recurse="1" no-hooks="1">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="DomainClass"
            c:type="GVirDomainClass"
            glib:is-gtype-struct-for="Domain">
      <source-position filename="libvirt-gobject-domain.h" line="72"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="started">
        <callback name="started">
          <source-position filename="libvirt-gobject-domain.h" line="64"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stopped">
        <callback name="stopped">
          <source-position filename="libvirt-gobject-domain.h" line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="resumed">
        <callback name="resumed">
          <source-position filename="libvirt-gobject-domain.h" line="66"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="updated">
        <callback name="updated">
          <source-position filename="libvirt-gobject-domain.h" line="67"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="suspended">
        <callback name="suspended">
          <source-position filename="libvirt-gobject-domain.h" line="68"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="pmsuspended">
        <callback name="pmsuspended">
          <source-position filename="libvirt-gobject-domain.h" line="69"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="dom" transfer-ownership="none">
              <type name="Domain" c:type="GVirDomain*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="19">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DomainDeleteFlags"
                 glib:type-name="GVirDomainDeleteFlags"
                 glib:get-type="gvir_domain_delete_flags_get_type"
                 c:type="GVirDomainDeleteFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_DELETE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="98">No flags</doc>
      </member>
      <member name="saved_state"
              value="1"
              c:identifier="GVIR_DOMAIN_DELETE_SAVED_STATE"
              glib:nick="saved-state">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="99">Also remove associated saved state (if present).</doc>
      </member>
      <member name="snapshots_metadata"
              value="2"
              c:identifier="GVIR_DOMAIN_DELETE_SNAPSHOTS_METADATA"
              glib:nick="snapshots-metadata">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="100">If last use of domain, then also
                                        remove any snapshot metadata.</doc>
      </member>
      <member name="remove_nvram"
              value="4"
              c:identifier="GVIR_DOMAIN_DELETE_REMOVE_NVRAM"
              glib:nick="remove-nvram">
      </member>
      <member name="keep_nvram"
              value="8"
              c:identifier="GVIR_DOMAIN_DELETE_KEEP_NVRAM"
              glib:nick="keep-nvram">
      </member>
    </enumeration>
    <class name="DomainDevice"
           c:symbol-prefix="domain_device"
           c:type="GVirDomainDevice"
           parent="GObject.Object"
           abstract="1"
           glib:type-name="GVirDomainDevice"
           glib:get-type="gvir_domain_device_get_type"
           glib:type-struct="DomainDeviceClass">
      <source-position filename="libvirt-gobject-domain-device.h" line="59"/>
      <method name="get_config" c:identifier="gvir_domain_device_get_config">
        <source-position filename="libvirt-gobject-domain-device.h" line="64"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-device.c"
               line="173">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.DomainDevice"
                c:type="GVirConfigDomainDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-device.c"
                 line="171">the domain device</doc>
            <type name="DomainDevice" c:type="GVirDomainDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_domain" c:identifier="gvir_domain_device_get_domain">
        <source-position filename="libvirt-gobject-domain-device.h" line="63"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-device.c"
               line="158">the associated domain. The returned object
should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="Domain" c:type="GVirDomain*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-device.c"
                 line="156">the domain device</doc>
            <type name="DomainDevice" c:type="GVirDomainDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="config"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="LibvirtGConfig.DomainDevice"/>
      </property>
      <property name="domain"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="Domain"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DomainDevicePrivate" c:type="GVirDomainDevicePrivate*"/>
      </field>
    </class>
    <record name="DomainDeviceClass"
            c:type="GVirDomainDeviceClass"
            glib:is-gtype-struct-for="DomainDevice">
      <source-position filename="libvirt-gobject-domain-device.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DomainDevicePrivate"
            c:type="GVirDomainDevicePrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-domain-device.h" line="42"/>
    </record>
    <class name="DomainDisk"
           c:symbol-prefix="domain_disk"
           c:type="GVirDomainDisk"
           parent="DomainDevice"
           glib:type-name="GVirDomainDisk"
           glib:get-type="gvir_domain_disk_get_type"
           glib:type-struct="DomainDiskClass">
      <source-position filename="libvirt-gobject-domain-disk.h" line="69"/>
      <method name="get_stats"
              c:identifier="gvir_domain_disk_get_stats"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-disk.c"
             line="91">This function returns network disk stats. Individual fields
within the stats structure may be returned as -1, which indicates
that the hypervisor does not support that particular statistic.</doc>
        <source-position filename="libvirt-gobject-domain-disk.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-disk.c"
               line="100">the stats or %NULL in case of error.The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="DomainDiskStats" c:type="GVirDomainDiskStats*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-disk.c"
                 line="93">the domain disk</doc>
            <type name="DomainDisk" c:type="GVirDomainDisk*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gvir_domain_disk_resize" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-disk.c"
             line="136">This function resize the disk of a running domain.</doc>
        <source-position filename="libvirt-gobject-domain-disk.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-disk.c"
               line="145">TRUE if size was successfully changed, FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-disk.c"
                 line="138">the domain disk</doc>
            <type name="DomainDisk" c:type="GVirDomainDisk*"/>
          </instance-parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-disk.c"
                 line="139">new size of the block image in kilobytes</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-disk.c"
                 line="140">flags, currently unused. Pass '0'.</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="DomainDevice" c:type="GVirDomainDevice"/>
      </field>
      <field name="priv">
        <type name="DomainDiskPrivate" c:type="GVirDomainDiskPrivate*"/>
      </field>
    </class>
    <record name="DomainDiskClass"
            c:type="GVirDomainDiskClass"
            glib:is-gtype-struct-for="DomainDisk">
      <source-position filename="libvirt-gobject-domain-disk.h" line="69"/>
      <field name="parent_class">
        <type name="DomainDeviceClass" c:type="GVirDomainDeviceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DomainDiskPrivate"
            c:type="GVirDomainDiskPrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-domain-disk.h" line="52"/>
    </record>
    <record name="DomainDiskStats"
            c:type="GVirDomainDiskStats"
            glib:type-name="GVirDomainDiskStats"
            glib:get-type="gvir_domain_disk_stats_get_type"
            c:symbol-prefix="domain_disk_stats">
      <source-position filename="libvirt-gobject-domain-disk.h" line="49"/>
      <field name="rd_req" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="rd_bytes" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="wr_req" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="wr_bytes" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="errs" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <glib:boxed glib:name="DomainHandle"
                c:symbol-prefix="domain_handle"
                glib:type-name="GVirDomainHandle"
                glib:get-type="gvir_domain_handle_get_type">
    </glib:boxed>
    <record name="DomainInfo"
            c:type="GVirDomainInfo"
            glib:type-name="GVirDomainInfo"
            glib:get-type="gvir_domain_info_get_type"
            c:symbol-prefix="domain_info">
      <source-position filename="libvirt-gobject-domain.h" line="228"/>
      <field name="state" writable="1">
        <type name="DomainState" c:type="GVirDomainState"/>
      </field>
      <field name="maxMem" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="memory" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="nrVirtCpu" writable="1">
        <type name="guint16" c:type="guint16"/>
      </field>
      <field name="cpuTime" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <class name="DomainInterface"
           c:symbol-prefix="domain_interface"
           c:type="GVirDomainInterface"
           parent="DomainDevice"
           glib:type-name="GVirDomainInterface"
           glib:get-type="gvir_domain_interface_get_type"
           glib:type-struct="DomainInterfaceClass">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="72"/>
      <method name="get_stats"
              c:identifier="gvir_domain_interface_get_stats"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-interface.c"
             line="93">This function returns network interface stats. Individual fields
within the stats structure may be returned as -1, which indicates
that the hypervisor does not support that particular statistic.</doc>
        <source-position filename="libvirt-gobject-domain-interface.h"
                         line="77"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-interface.c"
               line="102">the stats or %NULL in case of error. The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="DomainInterfaceStats"
                c:type="GVirDomainInterfaceStats*"/>
        </return-value>
        <parameters>
          <instance-parameter name="self" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-interface.c"
                 line="95">the domain interface</doc>
            <type name="DomainInterface" c:type="GVirDomainInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="DomainDevice" c:type="GVirDomainDevice"/>
      </field>
      <field name="priv">
        <type name="DomainInterfacePrivate"
              c:type="GVirDomainInterfacePrivate*"/>
      </field>
    </class>
    <record name="DomainInterfaceClass"
            c:type="GVirDomainInterfaceClass"
            glib:is-gtype-struct-for="DomainInterface">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="72"/>
      <field name="parent_class">
        <type name="DomainDeviceClass" c:type="GVirDomainDeviceClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="DomainInterfacePrivate"
            c:type="GVirDomainInterfacePrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="55"/>
    </record>
    <record name="DomainInterfaceStats"
            c:type="GVirDomainInterfaceStats"
            glib:type-name="GVirDomainInterfaceStats"
            glib:get-type="gvir_domain_interface_stats_get_type"
            c:symbol-prefix="domain_interface_stats">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="52"/>
      <field name="rx_bytes" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="rx_packets" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="rx_errs" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="rx_drop" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="tx_bytes" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="tx_packets" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="tx_errs" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
      <field name="tx_drop" writable="1">
        <type name="gint64" c:type="gint64"/>
      </field>
    </record>
    <record name="DomainPrivate" c:type="GVirDomainPrivate" disguised="1">
      <source-position filename="libvirt-gobject-domain.h" line="47"/>
    </record>
    <enumeration name="DomainRebootFlags"
                 glib:type-name="GVirDomainRebootFlags"
                 glib:get-type="gvir_domain_reboot_flags_get_type"
                 c:type="GVirDomainRebootFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_REBOOT_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="177">No flags, hypervisor choice</doc>
      </member>
      <member name="acpi_power_btn"
              value="1"
              c:identifier="GVIR_DOMAIN_REBOOT_ACPI_POWER_BTN"
              glib:nick="acpi-power-btn">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="178">Send ACPI event</doc>
      </member>
      <member name="guest_agent"
              value="2"
              c:identifier="GVIR_DOMAIN_REBOOT_GUEST_AGENT"
              glib:nick="guest-agent">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="179">Use guest agent</doc>
      </member>
    </enumeration>
    <enumeration name="DomainShutdownFlags"
                 glib:type-name="GVirDomainShutdownFlags"
                 glib:get-type="gvir_domain_shutdown_flags_get_type"
                 c:type="GVirDomainShutdownFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_SHUTDOWN_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="127">No flags, hypervisor choice</doc>
      </member>
      <member name="acpi_power_btn"
              value="1"
              c:identifier="GVIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN"
              glib:nick="acpi-power-btn">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="128">Send ACPI event</doc>
      </member>
      <member name="guest_agent"
              value="2"
              c:identifier="GVIR_DOMAIN_SHUTDOWN_GUEST_AGENT"
              glib:nick="guest-agent">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="129">Use guest agent</doc>
      </member>
    </enumeration>
    <class name="DomainSnapshot"
           c:symbol-prefix="domain_snapshot"
           c:type="GVirDomainSnapshot"
           parent="GObject.Object"
           glib:type-name="GVirDomainSnapshot"
           glib:get-type="gvir_domain_snapshot_get_type"
           glib:type-struct="DomainSnapshotClass">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="59"/>
      <method name="delete"
              c:identifier="gvir_domain_snapshot_delete"
              throws="1">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="97"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="210">TRUE on success, FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="206">The domain snapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="207">Bitwise or of #GVirDomainSnapshotDeleteFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async"
              c:identifier="gvir_domain_snapshot_delete_async">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="101"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="256">A #GVirDomainSnapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="257">Bitwise-OR of #GVirDomainSnapshotDeleteFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="258">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="259">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="260">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="gvir_domain_snapshot_delete_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="283">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="280">A #GVirDomainSnapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="res" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="281">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="gvir_domain_snapshot_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="175">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.DomainSnapshot"
                c:type="GVirConfigDomainSnapshot*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="172">the domain_snapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="173">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_is_current"
              c:identifier="gvir_domain_snapshot_get_is_current"
              throws="1">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="111"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="303">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="297">The domain snapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="298">Currently unused, pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="is_current"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="299">%TRUE if the given snapshot is the current snapshot
of its domain, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_domain_snapshot_get_name">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="90"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="revert_to"
              c:identifier="gvir_domain_snapshot_revert_to"
              throws="1">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="337">TRUE if the snapshot's domain has successfully been
reverted to the given snapshot, FALSE otherwise, in which case
@error will be set.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="333">The domain snapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="334">Bitwise OR of GVirDomainSnapshotRevertFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="revert_to_async"
              c:identifier="gvir_domain_snapshot_revert_to_async">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="384">A #GVirDomainSnapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="385">Bitwise OR of #GVirDomainSnapshotRevertFlags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="386">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="387">The callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="388">Opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="revert_to_finish"
              c:identifier="gvir_domain_snapshot_revert_to_finish"
              throws="1">
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="413">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="410">The domain snapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="411">The result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_config"
              c:identifier="gvir_domain_snapshot_set_config"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.c"
             line="427">Updates the given snapshot's configuration according to the
given GVirConfigDomainSnapshot.</doc>
        <source-position filename="libvirt-gobject-domain-snapshot.h"
                         line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-domain-snapshot.c"
               line="436">%TRUE if no error was reported, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="snapshot" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="429">The domain snapshot</doc>
            <type name="DomainSnapshot" c:type="GVirDomainSnapshot*"/>
          </instance-parameter>
          <parameter name="conf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-domain-snapshot.c"
                 line="430">The new config object</doc>
            <type name="LibvirtGConfig.DomainSnapshot"
                  c:type="GVirConfigDomainSnapshot*"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="DomainSnapshotHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="DomainSnapshotPrivate"
              c:type="GVirDomainSnapshotPrivate*"/>
      </field>
    </class>
    <record name="DomainSnapshotClass"
            c:type="GVirDomainSnapshotClass"
            glib:is-gtype-struct-for="DomainSnapshot">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <enumeration name="DomainSnapshotCreateFlags"
                 glib:type-name="GVirDomainSnapshotCreateFlags"
                 glib:get-type="gvir_domain_snapshot_create_flags_get_type"
                 c:type="GVirDomainSnapshotCreateFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="140">No flags</doc>
      </member>
      <member name="redefine"
              value="1"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_REDEFINE"
              glib:nick="redefine">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="141">Restore or alter metadata</doc>
      </member>
      <member name="current"
              value="2"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_CURRENT"
              glib:nick="current">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="142">With redefine, make snapshot current</doc>
      </member>
      <member name="no_metadata"
              value="4"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_NO_METADATA"
              glib:nick="no-metadata">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="143">Make snapshot without remembering it</doc>
      </member>
      <member name="halt"
              value="8"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_HALT"
              glib:nick="halt">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="144">Stop running guest after snapshot</doc>
      </member>
      <member name="disk_only"
              value="16"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_DISK_ONLY"
              glib:nick="disk-only">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="145">Disk snapshot, not system checkpoint</doc>
      </member>
      <member name="reuse_ext"
              value="32"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_REUSE_EXT"
              glib:nick="reuse-ext">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="146">Reuse any existing external files</doc>
      </member>
      <member name="quiesce"
              value="64"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_QUIESCE"
              glib:nick="quiesce">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="147">Use guest agent to quiesce all mounter
                               file systems within the domain</doc>
      </member>
      <member name="atomic"
              value="128"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_ATOMIC"
              glib:nick="atomic">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="149">Atomically avoid partial changes</doc>
      </member>
    </enumeration>
    <enumeration name="DomainSnapshotDeleteFlags"
                 glib:type-name="GVirDomainSnapshotDeleteFlags"
                 glib:get-type="gvir_domain_snapshot_delete_flags_get_type"
                 c:type="GVirDomainSnapshotDeleteFlags">
      <member name="children"
              value="1"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN"
              glib:nick="children">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.h"
             line="63">Also delete children</doc>
      </member>
      <member name="metadata_only"
              value="2"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY"
              glib:nick="metadata-only">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.h"
             line="64">Delete just metadata</doc>
      </member>
      <member name="children_only"
              value="4"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY"
              glib:nick="children-only">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.h"
             line="65">Delete just children</doc>
      </member>
    </enumeration>
    <glib:boxed glib:name="DomainSnapshotHandle"
                c:symbol-prefix="domain_snapshot_handle"
                glib:type-name="GVirDomainSnapshotHandle"
                glib:get-type="gvir_domain_snapshot_handle_get_type">
    </glib:boxed>
    <enumeration name="DomainSnapshotListFlags"
                 glib:type-name="GVirDomainSnapshotListFlags"
                 glib:get-type="gvir_domain_snapshot_list_flags_get_type"
                 c:type="GVirDomainSnapshotListFlags">
      <member name="all"
              value="0"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_ALL"
              glib:nick="all">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="190">List all snapshots</doc>
      </member>
      <member name="descendants"
              value="1"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS"
              glib:nick="descendants">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="191">List all descendants, not just
                                        children, when listing a snapshot.
                                        For historical reasons, groups do not use contiguous bits.</doc>
      </member>
      <member name="roots"
              value="1"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_ROOTS"
              glib:nick="roots">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="194">Filter by snapshots with no parents, when listing a domain</doc>
      </member>
      <member name="metadata"
              value="2"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_METADATA"
              glib:nick="metadata">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="195">Filter by snapshots which have metadata</doc>
      </member>
      <member name="leaves"
              value="4"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_LEAVES"
              glib:nick="leaves">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="196">Filter by snapshots with no children</doc>
      </member>
      <member name="no_leaves"
              value="8"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES"
              glib:nick="no-leaves">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="197">Filter by snapshots that have children</doc>
      </member>
      <member name="no_metadata"
              value="16"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA"
              glib:nick="no-metadata">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="198">Filter by snapshots with no metadata</doc>
      </member>
      <member name="inactive"
              value="32"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_INACTIVE"
              glib:nick="inactive">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="199">Filter by snapshots taken while guest was shut off</doc>
      </member>
      <member name="active"
              value="64"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_ACTIVE"
              glib:nick="active">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="200">Filter by snapshots taken while guest was active, and with memory state</doc>
      </member>
      <member name="disk_only"
              value="128"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY"
              glib:nick="disk-only">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="201">Filter by snapshots taken while guest was active, but without memory state</doc>
      </member>
      <member name="internal"
              value="256"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_INTERNAL"
              glib:nick="internal">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="202">Filter by snapshots stored internal to disk images</doc>
      </member>
      <member name="external"
              value="512"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL"
              glib:nick="external">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="203">Filter by snapshots that use files external to disk images</doc>
      </member>
    </enumeration>
    <record name="DomainSnapshotPrivate"
            c:type="GVirDomainSnapshotPrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="42"/>
    </record>
    <enumeration name="DomainSnapshotRevertFlags"
                 glib:type-name="GVirDomainSnapshotRevertFlags"
                 glib:get-type="gvir_domain_snapshot_revert_flags_get_type"
                 c:type="GVirDomainSnapshotRevertFlags">
      <member name="running"
              value="1"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_REVERT_RUNNING"
              glib:nick="running">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.h"
             line="76">Run after revert</doc>
      </member>
      <member name="paused"
              value="2"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_REVERT_PAUSED"
              glib:nick="paused">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.h"
             line="77">Pause after revert</doc>
      </member>
      <member name="force"
              value="4"
              c:identifier="GVIR_DOMAIN_SNAPSHOT_REVERT_FORCE"
              glib:nick="force">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain-snapshot.h"
             line="78">Allow risky reverts</doc>
      </member>
    </enumeration>
    <bitfield name="DomainStartFlags"
              glib:type-name="GVirDomainStartFlags"
              glib:get-type="gvir_domain_start_flags_get_type"
              c:type="GVirDomainStartFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_START_NONE"
              glib:nick="none">
      </member>
      <member name="paused"
              value="1"
              c:identifier="GVIR_DOMAIN_START_PAUSED"
              glib:nick="paused">
      </member>
      <member name="autodestroy"
              value="2"
              c:identifier="GVIR_DOMAIN_START_AUTODESTROY"
              glib:nick="autodestroy">
      </member>
      <member name="bypass_cache"
              value="4"
              c:identifier="GVIR_DOMAIN_START_BYPASS_CACHE"
              glib:nick="bypass-cache">
      </member>
      <member name="force_boot"
              value="8"
              c:identifier="GVIR_DOMAIN_START_FORCE_BOOT"
              glib:nick="force-boot">
      </member>
    </bitfield>
    <enumeration name="DomainState"
                 glib:type-name="GVirDomainState"
                 glib:get-type="gvir_domain_state_get_type"
                 c:type="GVirDomainState">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_STATE_NONE"
              glib:nick="none">
      </member>
      <member name="running"
              value="1"
              c:identifier="GVIR_DOMAIN_STATE_RUNNING"
              glib:nick="running">
      </member>
      <member name="blocked"
              value="2"
              c:identifier="GVIR_DOMAIN_STATE_BLOCKED"
              glib:nick="blocked">
      </member>
      <member name="paused"
              value="3"
              c:identifier="GVIR_DOMAIN_STATE_PAUSED"
              glib:nick="paused">
      </member>
      <member name="shutdown"
              value="4"
              c:identifier="GVIR_DOMAIN_STATE_SHUTDOWN"
              glib:nick="shutdown">
      </member>
      <member name="shutoff"
              value="5"
              c:identifier="GVIR_DOMAIN_STATE_SHUTOFF"
              glib:nick="shutoff">
      </member>
      <member name="crashed"
              value="6"
              c:identifier="GVIR_DOMAIN_STATE_CRASHED"
              glib:nick="crashed">
      </member>
      <member name="pmsuspended"
              value="7"
              c:identifier="GVIR_DOMAIN_STATE_PMSUSPENDED"
              glib:nick="pmsuspended">
      </member>
    </enumeration>
    <enumeration name="DomainUpdateDeviceFlags"
                 glib:type-name="GVirDomainUpdateDeviceFlags"
                 glib:get-type="gvir_domain_update_device_flags_get_type"
                 c:type="GVirDomainUpdateDeviceFlags">
      <member name="current"
              value="0"
              c:identifier="GVIR_DOMAIN_UPDATE_DEVICE_CURRENT"
              glib:nick="current">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="165">Update current domain state</doc>
      </member>
      <member name="live"
              value="1"
              c:identifier="GVIR_DOMAIN_UPDATE_DEVICE_LIVE"
              glib:nick="live">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="166">Update state for only active domains</doc>
      </member>
      <member name="config"
              value="2"
              c:identifier="GVIR_DOMAIN_UPDATE_DEVICE_CONFIG"
              glib:nick="config">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="167">Update state for persistent state only</doc>
      </member>
    </enumeration>
    <enumeration name="DomainXMLFlags"
                 glib:type-name="GVirDomainXMLFlags"
                 glib:get-type="gvir_domain_xml_flags_get_type"
                 c:type="GVirDomainXMLFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_DOMAIN_XML_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="113">No flags</doc>
      </member>
      <member name="secure"
              value="1"
              c:identifier="GVIR_DOMAIN_XML_SECURE"
              glib:nick="secure">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="114">Dump security sensitive information too</doc>
      </member>
      <member name="inactive"
              value="2"
              c:identifier="GVIR_DOMAIN_XML_INACTIVE"
              glib:nick="inactive">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="115">Dump inactive domain information</doc>
      </member>
      <member name="update_cpu"
              value="4"
              c:identifier="GVIR_DOMAIN_XML_UPDATE_CPU"
              glib:nick="update-cpu">
        <doc xml:space="preserve"
             filename="libvirt-gobject-domain.h"
             line="116">Update guest CPU requirements according to host CPU</doc>
      </member>
    </enumeration>
    <function-macro name="INTERFACE"
                    c:identifier="GVIR_INTERFACE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-interface.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INTERFACE_CLASS"
                    c:identifier="GVIR_INTERFACE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-interface.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="INTERFACE_GET_CLASS"
                    c:identifier="GVIR_INTERFACE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-interface.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <enumeration name="IPAddrType"
                 glib:type-name="GVirIPAddrType"
                 glib:get-type="gvir_ip_addr_type_get_type"
                 c:type="GVirIPAddrType">
      <member name="ipv4"
              value="0"
              c:identifier="GVIR_IP_ADDR_TYPE_IPV4"
              glib:nick="ipv4">
        <doc xml:space="preserve"
             filename="libvirt-gobject-network-dhcp-lease.h"
             line="36">IPv4 Address.</doc>
      </member>
      <member name="ipv6"
              value="1"
              c:identifier="GVIR_IP_ADDR_TYPE_IPV6"
              glib:nick="ipv6">
        <doc xml:space="preserve"
             filename="libvirt-gobject-network-dhcp-lease.h"
             line="37">IPv6 Address.</doc>
      </member>
    </enumeration>
    <function-macro name="IS_CONNECTION"
                    c:identifier="GVIR_IS_CONNECTION"
                    introspectable="0">
      <source-position filename="libvirt-gobject-connection.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_CONNECTION_CLASS"
                    c:identifier="GVIR_IS_CONNECTION_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-connection.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN"
                    c:identifier="GVIR_IS_DOMAIN"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_CLASS"
                    c:identifier="GVIR_IS_DOMAIN_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain.h" line="40"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_DEVICE"
                    c:identifier="GVIR_IS_DOMAIN_DEVICE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-device.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_DEVICE_CLASS"
                    c:identifier="GVIR_IS_DOMAIN_DEVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-device.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_DISK"
                    c:identifier="GVIR_IS_DOMAIN_DISK"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-disk.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_DISK_CLASS"
                    c:identifier="GVIR_IS_DOMAIN_DISK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-disk.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_INTERFACE"
                    c:identifier="GVIR_IS_DOMAIN_INTERFACE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_INTERFACE_CLASS"
                    c:identifier="GVIR_IS_DOMAIN_INTERFACE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-interface.h"
                       line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_SNAPSHOT"
                    c:identifier="GVIR_IS_DOMAIN_SNAPSHOT"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_DOMAIN_SNAPSHOT_CLASS"
                    c:identifier="GVIR_IS_DOMAIN_SNAPSHOT_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-domain-snapshot.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INTERFACE"
                    c:identifier="GVIR_IS_INTERFACE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-interface.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_INTERFACE_CLASS"
                    c:identifier="GVIR_IS_INTERFACE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-interface.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER"
                    c:identifier="GVIR_IS_MANAGER"
                    introspectable="0">
      <source-position filename="libvirt-gobject-manager.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_MANAGER_CLASS"
                    c:identifier="GVIR_IS_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-manager.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK"
                    c:identifier="GVIR_IS_NETWORK"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_CLASS"
                    c:identifier="GVIR_IS_NETWORK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_DHCP_LEASE"
                    c:identifier="GVIR_IS_NETWORK_DHCP_LEASE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="47"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_DHCP_LEASE_CLASS"
                    c:identifier="GVIR_IS_NETWORK_DHCP_LEASE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="48"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_FILTER"
                    c:identifier="GVIR_IS_NETWORK_FILTER"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-filter.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NETWORK_FILTER_CLASS"
                    c:identifier="GVIR_IS_NETWORK_FILTER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-filter.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NODE_DEVICE"
                    c:identifier="GVIR_IS_NODE_DEVICE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-node-device.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_NODE_DEVICE_CLASS"
                    c:identifier="GVIR_IS_NODE_DEVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-node-device.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SECRET"
                    c:identifier="GVIR_IS_SECRET"
                    introspectable="0">
      <source-position filename="libvirt-gobject-secret.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_SECRET_CLASS"
                    c:identifier="GVIR_IS_SECRET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-secret.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORAGE_POOL"
                    c:identifier="GVIR_IS_STORAGE_POOL"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-pool.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORAGE_POOL_CLASS"
                    c:identifier="GVIR_IS_STORAGE_POOL_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-pool.h" line="36"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORAGE_VOL"
                    c:identifier="GVIR_IS_STORAGE_VOL"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-vol.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STORAGE_VOL_CLASS"
                    c:identifier="GVIR_IS_STORAGE_VOL_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-vol.h" line="37"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM"
                    c:identifier="GVIR_IS_STREAM"
                    introspectable="0">
      <source-position filename="libvirt-gobject-stream.h" line="39"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="IS_STREAM_CLASS"
                    c:identifier="GVIR_IS_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-stream.h" line="40"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Interface"
           c:symbol-prefix="interface"
           c:type="GVirInterface"
           parent="GObject.Object"
           glib:type-name="GVirInterface"
           glib:get-type="gvir_interface_get_type"
           glib:type-struct="InterfaceClass">
      <source-position filename="libvirt-gobject-interface.h" line="59"/>
      <method name="get_config"
              c:identifier="gvir_interface_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-interface.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-interface.c"
               line="188">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.Interface" c:type="GVirConfigInterface*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iface" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-interface.c"
                 line="184">the interface</doc>
            <type name="Interface" c:type="GVirInterface*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-interface.c"
                 line="185">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_mac" c:identifier="gvir_interface_get_mac">
        <source-position filename="libvirt-gobject-interface.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iface" transfer-ownership="none">
            <type name="Interface" c:type="GVirInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_interface_get_name">
        <source-position filename="libvirt-gobject-interface.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iface" transfer-ownership="none">
            <type name="Interface" c:type="GVirInterface*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="InterfaceHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="InterfacePrivate" c:type="GVirInterfacePrivate*"/>
      </field>
    </class>
    <record name="InterfaceClass"
            c:type="GVirInterfaceClass"
            glib:is-gtype-struct-for="Interface">
      <source-position filename="libvirt-gobject-interface.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="InterfaceHandle"
                c:symbol-prefix="interface_handle"
                glib:type-name="GVirInterfaceHandle"
                glib:get-type="gvir_interface_handle_get_type">
    </glib:boxed>
    <record name="InterfacePrivate"
            c:type="GVirInterfacePrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-interface.h" line="42"/>
    </record>
    <function-macro name="MANAGER"
                    c:identifier="GVIR_MANAGER"
                    introspectable="0">
      <source-position filename="libvirt-gobject-manager.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_CLASS"
                    c:identifier="GVIR_MANAGER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-manager.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="MANAGER_GET_CLASS"
                    c:identifier="GVIR_MANAGER_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-manager.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Manager"
           c:symbol-prefix="manager"
           c:type="GVirManager"
           parent="GObject.Object"
           glib:type-name="GVirManager"
           glib:get-type="gvir_manager_get_type"
           glib:type-struct="ManagerClass">
      <source-position filename="libvirt-gobject-manager.h" line="62"/>
      <constructor name="new" c:identifier="gvir_manager_new">
        <source-position filename="libvirt-gobject-manager.h" line="66"/>
        <return-value transfer-ownership="full">
          <type name="Manager" c:type="GVirManager*"/>
        </return-value>
      </constructor>
      <virtual-method name="connection_added">
        <source-position filename="libvirt-gobject-manager.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="man" transfer-ownership="none">
            <type name="Manager" c:type="GVirManager*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="connection_removed">
        <source-position filename="libvirt-gobject-manager.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="man" transfer-ownership="none">
            <type name="Manager" c:type="GVirManager*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="add_connection" c:identifier="gvir_manager_add_connection">
        <source-position filename="libvirt-gobject-manager.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="man" transfer-ownership="none">
            <type name="Manager" c:type="GVirManager*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </method>
      <method name="find_connection_by_uri"
              c:identifier="gvir_manager_find_connection_by_uri">
        <source-position filename="libvirt-gobject-manager.h" line="76"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="libvirt-gobject-manager.c"
               line="190">the connection,or NULL. The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="Connection" c:type="GVirConnection*"/>
        </return-value>
        <parameters>
          <instance-parameter name="man" transfer-ownership="none">
            <type name="Manager" c:type="GVirManager*"/>
          </instance-parameter>
          <parameter name="uri" transfer-ownership="none">
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_connections"
              c:identifier="gvir_manager_get_connections">
        <source-position filename="libvirt-gobject-manager.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-manager.c"
               line="166">the connections.
The returned list should be freed with g_list_free(), after its elements
have been unreffed with g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="Connection"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="man" transfer-ownership="none">
            <type name="Manager" c:type="GVirManager*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="remove_connection"
              c:identifier="gvir_manager_remove_connection">
        <source-position filename="libvirt-gobject-manager.h" line="71"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="man" transfer-ownership="none">
            <type name="Manager" c:type="GVirManager*"/>
          </instance-parameter>
          <parameter name="conn" transfer-ownership="none">
            <type name="Connection" c:type="GVirConnection*"/>
          </parameter>
        </parameters>
      </method>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="ManagerPrivate" c:type="GVirManagerPrivate*"/>
      </field>
      <glib:signal name="connection-added" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Connection"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="connection-removed" when="first">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="object" transfer-ownership="none">
            <type name="Connection"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ManagerClass"
            c:type="GVirManagerClass"
            glib:is-gtype-struct-for="Manager">
      <source-position filename="libvirt-gobject-manager.h" line="62"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="connection_added">
        <callback name="connection_added">
          <source-position filename="libvirt-gobject-manager.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="man" transfer-ownership="none">
              <type name="Manager" c:type="GVirManager*"/>
            </parameter>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="connection_removed">
        <callback name="connection_removed">
          <source-position filename="libvirt-gobject-manager.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="man" transfer-ownership="none">
              <type name="Manager" c:type="GVirManager*"/>
            </parameter>
            <parameter name="conn" transfer-ownership="none">
              <type name="Connection" c:type="GVirConnection*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="ManagerPrivate" c:type="GVirManagerPrivate" disguised="1">
      <source-position filename="libvirt-gobject-manager.h" line="41"/>
    </record>
    <function-macro name="NETWORK"
                    c:identifier="GVIR_NETWORK"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_CLASS"
                    c:identifier="GVIR_NETWORK_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_DHCP_LEASE"
                    c:identifier="GVIR_NETWORK_DHCP_LEASE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="45"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_DHCP_LEASE_CLASS"
                    c:identifier="GVIR_NETWORK_DHCP_LEASE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="46"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_DHCP_LEASE_GET_CLASS"
                    c:identifier="GVIR_NETWORK_DHCP_LEASE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="49"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_FILTER"
                    c:identifier="GVIR_NETWORK_FILTER"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-filter.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_FILTER_CLASS"
                    c:identifier="GVIR_NETWORK_FILTER_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-filter.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_FILTER_GET_CLASS"
                    c:identifier="GVIR_NETWORK_FILTER_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network-filter.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NETWORK_GET_CLASS"
                    c:identifier="GVIR_NETWORK_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-network.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NODE_DEVICE"
                    c:identifier="GVIR_NODE_DEVICE"
                    introspectable="0">
      <source-position filename="libvirt-gobject-node-device.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NODE_DEVICE_CLASS"
                    c:identifier="GVIR_NODE_DEVICE_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-node-device.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="NODE_DEVICE_GET_CLASS"
                    c:identifier="GVIR_NODE_DEVICE_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-node-device.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Network"
           c:symbol-prefix="network"
           c:type="GVirNetwork"
           parent="GObject.Object"
           glib:type-name="GVirNetwork"
           glib:get-type="gvir_network_get_type"
           glib:type-struct="NetworkClass">
      <source-position filename="libvirt-gobject-network.h" line="62"/>
      <virtual-method name="started">
        <source-position filename="libvirt-gobject-network.h" line="58"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="net" transfer-ownership="none">
            <type name="Network" c:type="GVirNetwork*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="stopped">
        <source-position filename="libvirt-gobject-network.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="net" transfer-ownership="none">
            <type name="Network" c:type="GVirNetwork*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_config"
              c:identifier="gvir_network_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-network.h" line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network.c"
               line="198">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.Network" c:type="GVirConfigNetwork*"/>
        </return-value>
        <parameters>
          <instance-parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network.c"
                 line="194">the network</doc>
            <type name="Network" c:type="GVirNetwork*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network.c"
                 line="195">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_dhcp_leases"
              c:identifier="gvir_network_get_dhcp_leases"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-network.c"
             line="225">This function fetches leases info of guests in the specified network. If the
optional parameter @mac is specified, the returned list will contain only
lease info about a specific guest interface with @mac. There can be multiple
leases for a single @mac because this API supports DHCPv6 too.</doc>
        <source-position filename="libvirt-gobject-network.h" line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network.c"
               line="237">the
list of network leases. Each object in the returned list should be unreffed
with g_object_unref() and the list itself using g_list_free, when no longer
needed.</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="NetworkDHCPLease"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="network" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network.c"
                 line="227">the network</doc>
            <type name="Network" c:type="GVirNetwork*"/>
          </instance-parameter>
          <parameter name="mac"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network.c"
                 line="228">The optional ASCII formatted MAC address of an interface</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network.c"
                 line="229">placeholder for flags, must be 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_network_get_name">
        <source-position filename="libvirt-gobject-network.h" line="68"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="network" transfer-ownership="none">
            <type name="Network" c:type="GVirNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="gvir_network_get_uuid">
        <source-position filename="libvirt-gobject-network.h" line="69"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="network" transfer-ownership="none">
            <type name="Network" c:type="GVirNetwork*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="NetworkHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NetworkPrivate" c:type="GVirNetworkPrivate*"/>
      </field>
    </class>
    <record name="NetworkClass"
            c:type="GVirNetworkClass"
            glib:is-gtype-struct-for="Network">
      <source-position filename="libvirt-gobject-network.h" line="62"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="started">
        <callback name="started">
          <source-position filename="libvirt-gobject-network.h" line="58"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="net" transfer-ownership="none">
              <type name="Network" c:type="GVirNetwork*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="stopped">
        <callback name="stopped">
          <source-position filename="libvirt-gobject-network.h" line="59"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="net" transfer-ownership="none">
              <type name="Network" c:type="GVirNetwork*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="NetworkDHCPLease"
           c:symbol-prefix="network_dhcp_lease"
           c:type="GVirNetworkDHCPLease"
           parent="GObject.Object"
           glib:type-name="GVirNetworkDHCPLease"
           glib:get-type="gvir_network_dhcp_lease_get_type"
           glib:type-struct="NetworkDHCPLeaseClass">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="69"/>
      <method name="get_client_id"
              c:identifier="gvir_network_dhcp_lease_get_client_id">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="81"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="282">The client ID or DUID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="280">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_expiry_time"
              c:identifier="gvir_network_dhcp_lease_get_expiry_time">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="74"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="163">The expiry time of this lease, as seconds since epoch.</doc>
          <type name="gint64" c:type="gint64"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="161">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_hostname"
              c:identifier="gvir_network_dhcp_lease_get_hostname">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="265">The hostname.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="263">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iaid" c:identifier="gvir_network_dhcp_lease_get_iaid">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="214">The IAID.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="212">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_iface"
              c:identifier="gvir_network_dhcp_lease_get_iface">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="146">The network interface name.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="144">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip" c:identifier="gvir_network_dhcp_lease_get_ip">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="78"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="231">The IP address.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="229">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_ip_type"
              c:identifier="gvir_network_dhcp_lease_get_ip_type">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="180">The type of IP, see %GVirIPAddrType for possible values.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="178">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mac" c:identifier="gvir_network_dhcp_lease_get_mac">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="197">The MAC address.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="195">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_prefix"
              c:identifier="gvir_network_dhcp_lease_get_prefix">
        <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                         line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-dhcp-lease.c"
               line="248">The number of network address bits in the IP address.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="lease" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-dhcp-lease.c"
                 line="246">the lease</doc>
            <type name="NetworkDHCPLease" c:type="GVirNetworkDHCPLease*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="gpointer" c:type="gpointer"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NetworkDHCPLeasePrivate"
              c:type="GVirNetworkDHCPLeasePrivate*"/>
      </field>
    </class>
    <record name="NetworkDHCPLeaseClass"
            c:type="GVirNetworkDHCPLeaseClass"
            glib:is-gtype-struct-for="NetworkDHCPLease">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="69"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="7">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <record name="NetworkDHCPLeasePrivate"
            c:type="GVirNetworkDHCPLeasePrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-network-dhcp-lease.h"
                       line="52"/>
    </record>
    <class name="NetworkFilter"
           c:symbol-prefix="network_filter"
           c:type="GVirNetworkFilter"
           parent="GObject.Object"
           glib:type-name="GVirNetworkFilter"
           glib:get-type="gvir_network_filter_get_type"
           glib:type-struct="NetworkFilterClass">
      <source-position filename="libvirt-gobject-network-filter.h" line="59"/>
      <method name="get_config"
              c:identifier="gvir_network_filter_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-network-filter.h"
                         line="67"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-network-filter.c"
               line="200">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.NetworkFilter"
                c:type="GVirConfigNetworkFilter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-filter.c"
                 line="196">the network_filter</doc>
            <type name="NetworkFilter" c:type="GVirNetworkFilter*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-network-filter.c"
                 line="197">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_network_filter_get_name">
        <source-position filename="libvirt-gobject-network-filter.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <type name="NetworkFilter" c:type="GVirNetworkFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="gvir_network_filter_get_uuid">
        <source-position filename="libvirt-gobject-network-filter.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="filter" transfer-ownership="none">
            <type name="NetworkFilter" c:type="GVirNetworkFilter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="NetworkFilterHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NetworkFilterPrivate" c:type="GVirNetworkFilterPrivate*"/>
      </field>
    </class>
    <record name="NetworkFilterClass"
            c:type="GVirNetworkFilterClass"
            glib:is-gtype-struct-for="NetworkFilter">
      <source-position filename="libvirt-gobject-network-filter.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="NetworkFilterHandle"
                c:symbol-prefix="network_filter_handle"
                glib:type-name="GVirNetworkFilterHandle"
                glib:get-type="gvir_network_filter_handle_get_type">
    </glib:boxed>
    <record name="NetworkFilterPrivate"
            c:type="GVirNetworkFilterPrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-network-filter.h" line="42"/>
    </record>
    <glib:boxed glib:name="NetworkHandle"
                c:symbol-prefix="network_handle"
                glib:type-name="GVirNetworkHandle"
                glib:get-type="gvir_network_handle_get_type">
    </glib:boxed>
    <record name="NetworkPrivate" c:type="GVirNetworkPrivate" disguised="1">
      <source-position filename="libvirt-gobject-network.h" line="42"/>
    </record>
    <class name="NodeDevice"
           c:symbol-prefix="node_device"
           c:type="GVirNodeDevice"
           parent="GObject.Object"
           glib:type-name="GVirNodeDevice"
           glib:get-type="gvir_node_device_get_type"
           glib:type-struct="NodeDeviceClass">
      <source-position filename="libvirt-gobject-node-device.h" line="59"/>
      <method name="get_config"
              c:identifier="gvir_node_device_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-node-device.h" line="66"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-node-device.c"
               line="176">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.NodeDevice"
                c:type="GVirConfigNodeDevice*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-node-device.c"
                 line="172">the node_device</doc>
            <type name="NodeDevice" c:type="GVirNodeDevice*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-node-device.c"
                 line="173">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_node_device_get_name">
        <source-position filename="libvirt-gobject-node-device.h" line="64"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="device" transfer-ownership="none">
            <type name="NodeDevice" c:type="GVirNodeDevice*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="NodeDeviceHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="NodeDevicePrivate" c:type="GVirNodeDevicePrivate*"/>
      </field>
    </class>
    <record name="NodeDeviceClass"
            c:type="GVirNodeDeviceClass"
            glib:is-gtype-struct-for="NodeDevice">
      <source-position filename="libvirt-gobject-node-device.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="NodeDeviceHandle"
                c:symbol-prefix="node_device_handle"
                glib:type-name="GVirNodeDeviceHandle"
                glib:get-type="gvir_node_device_handle_get_type">
    </glib:boxed>
    <record name="NodeDevicePrivate"
            c:type="GVirNodeDevicePrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-node-device.h" line="42"/>
    </record>
    <record name="NodeInfo"
            c:type="GVirNodeInfo"
            glib:type-name="GVirNodeInfo"
            glib:get-type="gvir_node_info_get_type"
            c:symbol-prefix="node_info">
      <source-position filename="libvirt-gobject-connection.h" line="52"/>
      <field name="model" writable="1">
        <array zero-terminated="0" fixed-size="32">
          <type name="gchar" c:type="gchar"/>
        </array>
      </field>
      <field name="memory" writable="1">
        <type name="gulong" c:type="gulong"/>
      </field>
      <field name="cpus" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="mhz" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="nodes" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="sockets" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="cores" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
      <field name="threads" writable="1">
        <type name="guint" c:type="guint"/>
      </field>
    </record>
    <function-macro name="SECRET"
                    c:identifier="GVIR_SECRET"
                    introspectable="0">
      <source-position filename="libvirt-gobject-secret.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SECRET_CLASS"
                    c:identifier="GVIR_SECRET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-secret.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="SECRET_GET_CLASS"
                    c:identifier="GVIR_SECRET_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-secret.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORAGE_POOL"
                    c:identifier="GVIR_STORAGE_POOL"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-pool.h" line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORAGE_POOL_CLASS"
                    c:identifier="GVIR_STORAGE_POOL_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-pool.h" line="34"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORAGE_POOL_GET_CLASS"
                    c:identifier="GVIR_STORAGE_POOL_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-pool.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORAGE_VOL"
                    c:identifier="GVIR_STORAGE_VOL"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-vol.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORAGE_VOL_CLASS"
                    c:identifier="GVIR_STORAGE_VOL_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-vol.h" line="35"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STORAGE_VOL_GET_CLASS"
                    c:identifier="GVIR_STORAGE_VOL_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-storage-vol.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM"
                    c:identifier="GVIR_STREAM"
                    introspectable="0">
      <source-position filename="libvirt-gobject-stream.h" line="37"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_CLASS"
                    c:identifier="GVIR_STREAM_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-stream.h" line="38"/>
      <parameters>
        <parameter name="klass">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_GET_CLASS"
                    c:identifier="GVIR_STREAM_GET_CLASS"
                    introspectable="0">
      <source-position filename="libvirt-gobject-stream.h" line="41"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Secret"
           c:symbol-prefix="secret"
           c:type="GVirSecret"
           parent="GObject.Object"
           glib:type-name="GVirSecret"
           glib:get-type="gvir_secret_get_type"
           glib:type-struct="SecretClass">
      <source-position filename="libvirt-gobject-secret.h" line="59"/>
      <method name="get_config"
              c:identifier="gvir_secret_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-secret.h" line="68"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-secret.c"
               line="183">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.Secret" c:type="GVirConfigSecret*"/>
        </return-value>
        <parameters>
          <instance-parameter name="secret" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-secret.c"
                 line="179">the secret</doc>
            <type name="Secret" c:type="GVirSecret*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-secret.c"
                 line="180">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_secret_get_name">
        <source-position filename="libvirt-gobject-secret.h" line="65"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="secret" transfer-ownership="none">
            <type name="Secret" c:type="GVirSecret*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="gvir_secret_get_uuid">
        <source-position filename="libvirt-gobject-secret.h" line="66"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="secret" transfer-ownership="none">
            <type name="Secret" c:type="GVirSecret*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="SecretHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="SecretPrivate" c:type="GVirSecretPrivate*"/>
      </field>
    </class>
    <record name="SecretClass"
            c:type="GVirSecretClass"
            glib:is-gtype-struct-for="Secret">
      <source-position filename="libvirt-gobject-secret.h" line="59"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="SecretHandle"
                c:symbol-prefix="secret_handle"
                glib:type-name="GVirSecretHandle"
                glib:get-type="gvir_secret_handle_get_type">
    </glib:boxed>
    <record name="SecretPrivate" c:type="GVirSecretPrivate" disguised="1">
      <source-position filename="libvirt-gobject-secret.h" line="42"/>
    </record>
    <class name="StoragePool"
           c:symbol-prefix="storage_pool"
           c:type="GVirStoragePool"
           parent="GObject.Object"
           glib:type-name="GVirStoragePool"
           glib:get-type="gvir_storage_pool_get_type"
           glib:type-struct="StoragePoolClass">
      <source-position filename="libvirt-gobject-storage-pool.h" line="60"/>
      <method name="build" c:identifier="gvir_storage_pool_build" throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="114"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="624">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="620">the storage pool to build</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="621">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_async" c:identifier="gvir_storage_pool_build_async">
        <source-position filename="libvirt-gobject-storage-pool.h" line="117"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="661">the storage pool to build</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="662">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="663">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="664">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="665">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="build_finish"
              c:identifier="gvir_storage_pool_build_finish"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="122"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="693">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="689">the storage pool to build</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="690">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="create_volume"
              c:identifier="gvir_storage_pool_create_volume"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="109"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="563">the newly created volume. The returned object
should be unreffed with g_object_unref() when no longer needed.</doc>
          <type name="StorageVol" c:type="GVirStorageVol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="559">the storage pool in which to create the volume</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="conf" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="560">the configuration for the new volume</doc>
            <type name="LibvirtGConfig.StorageVol"
                  c:type="GVirConfigStorageVol*"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete" c:identifier="gvir_storage_pool_delete" throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="158"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="964">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="960">the storage pool to delete</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="961">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_async"
              c:identifier="gvir_storage_pool_delete_async">
        <source-position filename="libvirt-gobject-storage-pool.h" line="161"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1052">the storage pool to delete</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1053">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1054">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1055">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1056">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="delete_finish"
              c:identifier="gvir_storage_pool_delete_finish"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="166"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="1084">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1080">the storage pool to delete</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1081">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_active" c:identifier="gvir_storage_pool_get_active">
        <source-position filename="libvirt-gobject-storage-pool.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autostart"
              c:identifier="gvir_storage_pool_get_autostart"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="169"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="988">#True if autostart is enabled, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="985">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="gvir_storage_pool_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="241">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.StoragePool"
                c:type="GVirConfigStoragePool*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="237">the storage_pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="238">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="gvir_storage_pool_get_info"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="92"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="273">the info. The returned pointer should be
freed using #g_boxed_free() when no longer needed.</doc>
          <type name="StoragePoolInfo" c:type="GVirStoragePoolInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="270">the storage_pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_storage_pool_get_name">
        <source-position filename="libvirt-gobject-storage-pool.h" line="83"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_persistent"
              c:identifier="gvir_storage_pool_get_persistent">
        <source-position filename="libvirt-gobject-storage-pool.h" line="86"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uuid" c:identifier="gvir_storage_pool_get_uuid">
        <source-position filename="libvirt-gobject-storage-pool.h" line="84"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume" c:identifier="gvir_storage_pool_get_volume">
        <source-position filename="libvirt-gobject-storage-pool.h" line="107"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="529">the #GVirStorageVol, or NULL. The
returned object should be unreffed with g_object_unref() when no longer
needed.</doc>
          <type name="StorageVol" c:type="GVirStorageVol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="526">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="527">Name of the requested storage volume</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_volumes" c:identifier="gvir_storage_pool_get_volumes">
        <source-position filename="libvirt-gobject-storage-pool.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="499">
List of #GVirStorageVol.  The returned list should be freed with
g_list_free(), after its elements have been unreffed with
g_object_unref().</doc>
          <type name="GLib.List" c:type="GList*">
            <type name="StorageVol"/>
          </type>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="497">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="refresh"
              c:identifier="gvir_storage_pool_refresh"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="95"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="348">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="349">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_async"
              c:identifier="gvir_storage_pool_refresh_async">
        <source-position filename="libvirt-gobject-storage-pool.h" line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="451">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="452">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="453">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="454">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="refresh_finish"
              c:identifier="gvir_storage_pool_refresh_finish"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="102"/>
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="476">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="477">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_autostart"
              c:identifier="gvir_storage_pool_set_autostart"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-pool.c"
             line="1007">Sets whether or not storage pool @pool is started automatically on boot.</doc>
        <source-position filename="libvirt-gobject-storage-pool.h" line="171"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="1015">#TRUE on success, #FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1009">the storage pool</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="autostart" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="1010">Whether or not to autostart</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="start" c:identifier="gvir_storage_pool_start" throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="794">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="790">the storage pool to start</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="791">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_async" c:identifier="gvir_storage_pool_start_async">
        <source-position filename="libvirt-gobject-storage-pool.h" line="139"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="831">the storage pool to start</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="832">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="833">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="3">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="834">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="835">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="start_finish"
              c:identifier="gvir_storage_pool_start_finish"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="144"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="863">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="859">the storage pool to start</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="860">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="gvir_storage_pool_stop" throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="148"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="881">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="878">the storage pool to stop</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="stop_async" c:identifier="gvir_storage_pool_stop_async">
        <source-position filename="libvirt-gobject-storage-pool.h" line="150"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="916">the storage pool to stop</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="917">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="918">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="919">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop_finish"
              c:identifier="gvir_storage_pool_stop_finish"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="154"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="945">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="941">the storage pool to stop</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="942">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <method name="undefine"
              c:identifier="gvir_storage_pool_undefine"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="126"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="711">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="708">the storage pool to undefine</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="undefine_async"
              c:identifier="gvir_storage_pool_undefine_async">
        <source-position filename="libvirt-gobject-storage-pool.h" line="128"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="746">the storage pool to undefine</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="747">cancellation object</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="callback"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1"
                     scope="async"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="748">completion callback</doc>
            <type name="Gio.AsyncReadyCallback" c:type="GAsyncReadyCallback"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="749">opaque data for callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="undefine_finish"
              c:identifier="gvir_storage_pool_undefine_finish"
              throws="1">
        <source-position filename="libvirt-gobject-storage-pool.h" line="132"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-pool.c"
               line="775">#True on success, #False otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="pool" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="771">the storage pool to undefine</doc>
            <type name="StoragePool" c:type="GVirStoragePool*"/>
          </instance-parameter>
          <parameter name="result" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-pool.c"
                 line="772">async method result</doc>
            <type name="Gio.AsyncResult" c:type="GAsyncResult*"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="StoragePoolHandle"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StoragePoolPrivate" c:type="GVirStoragePoolPrivate*"/>
      </field>
    </class>
    <record name="StoragePoolClass"
            c:type="GVirStoragePoolClass"
            glib:is-gtype-struct-for="StoragePool">
      <source-position filename="libvirt-gobject-storage-pool.h" line="60"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="StoragePoolHandle"
                c:symbol-prefix="storage_pool_handle"
                glib:type-name="GVirStoragePoolHandle"
                glib:get-type="gvir_storage_pool_handle_get_type">
    </glib:boxed>
    <record name="StoragePoolInfo"
            c:type="GVirStoragePoolInfo"
            glib:type-name="GVirStoragePoolInfo"
            glib:get-type="gvir_storage_pool_info_get_type"
            c:symbol-prefix="storage_pool_info">
      <source-position filename="libvirt-gobject-storage-pool.h" line="77"/>
      <field name="state" writable="1">
        <type name="StoragePoolState" c:type="GVirStoragePoolState"/>
      </field>
      <field name="capacity" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="allocation" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="available" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <record name="StoragePoolPrivate"
            c:type="GVirStoragePoolPrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-storage-pool.h" line="43"/>
    </record>
    <enumeration name="StoragePoolState"
                 glib:type-name="GVirStoragePoolState"
                 glib:get-type="gvir_storage_pool_state_get_type"
                 c:type="GVirStoragePoolState">
      <member name="inactive"
              value="0"
              c:identifier="GVIR_STORAGE_POOL_STATE_INACTIVE"
              glib:nick="inactive">
      </member>
      <member name="building"
              value="1"
              c:identifier="GVIR_STORAGE_POOL_STATE_BUILDING"
              glib:nick="building">
      </member>
      <member name="running"
              value="2"
              c:identifier="GVIR_STORAGE_POOL_STATE_RUNNING"
              glib:nick="running">
      </member>
      <member name="degraded"
              value="3"
              c:identifier="GVIR_STORAGE_POOL_STATE_DEGRADED"
              glib:nick="degraded">
      </member>
      <member name="inaccessible"
              value="4"
              c:identifier="GVIR_STORAGE_POOL_STATE_INACCESSIBLE"
              glib:nick="inaccessible">
      </member>
    </enumeration>
    <class name="StorageVol"
           c:symbol-prefix="storage_vol"
           c:type="GVirStorageVol"
           parent="GObject.Object"
           glib:type-name="GVirStorageVol"
           glib:get-type="gvir_storage_vol_get_type"
           glib:type-struct="StorageVolClass">
      <source-position filename="libvirt-gobject-storage-vol.h" line="61"/>
      <method name="delete" c:identifier="gvir_storage_vol_delete" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-vol.c"
             line="290">Deletes the storage volume @vol.</doc>
        <source-position filename="libvirt-gobject-storage-vol.h" line="99"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-vol.c"
               line="298">%TRUE on success, %FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="292">the storage volume to delete</doc>
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="293">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="download"
              c:identifier="gvir_storage_vol_download"
              throws="1">
        <source-position filename="libvirt-gobject-storage-vol.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-vol.c"
               line="358">#TRUE of success, #FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="352">the storage volume to download from</doc>
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="353">stream to use as output</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="354">position in @vol to start reading from</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="355">limit on amount of data to download, or 0 for downloading all data</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="356">extra flags, not used yet, pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_config"
              c:identifier="gvir_storage_vol_get_config"
              throws="1">
        <source-position filename="libvirt-gobject-storage-vol.h" line="103"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-vol.c"
               line="228">the config. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="LibvirtGConfig.StorageVol"
                c:type="GVirConfigStorageVol*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="224">the storage_vol</doc>
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="225">the flags</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_info"
              c:identifier="gvir_storage_vol_get_info"
              throws="1">
        <source-position filename="libvirt-gobject-storage-vol.h" line="106"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-vol.c"
               line="260">the info. The returned object should be
unreffed with g_object_unref() when no longer needed.</doc>
          <type name="StorageVolInfo" c:type="GVirStorageVolInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="257">the storage_vol</doc>
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gvir_storage_vol_get_name">
        <source-position filename="libvirt-gobject-storage-vol.h" line="96"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_path"
              c:identifier="gvir_storage_vol_get_path"
              throws="1">
        <source-position filename="libvirt-gobject-storage-vol.h" line="97"/>
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="resize" c:identifier="gvir_storage_vol_resize" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-vol.c"
             line="320">Changes the capacity of the storage volume @vol to @capacity.</doc>
        <source-position filename="libvirt-gobject-storage-vol.h" line="108"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-vol.c"
               line="329">#TRUE success, #FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="322">the storage volume to resize</doc>
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
          <parameter name="capacity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="323">the new capacity of the volume</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="324">the flags</doc>
            <type name="StorageVolResizeFlags" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="upload" c:identifier="gvir_storage_vol_upload" throws="1">
        <source-position filename="libvirt-gobject-storage-vol.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-storage-vol.c"
               line="404">#TRUE of success, #FALSE otherwise</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="vol" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="398">the storage volume to upload</doc>
            <type name="StorageVol" c:type="GVirStorageVol*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="399">stream to use as input</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="400">position in @vol to start to write to</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="length" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="401">limit on amount of data to upload, or 0 for uploading all data</doc>
            <type name="guint64" c:type="guint64"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-storage-vol.c"
                 line="402">the flags, not set yet, pass 0</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="StorageVolHandle"/>
      </property>
      <property name="pool"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="StoragePool"/>
      </property>
      <field name="parent">
        <type name="GObject.Object" c:type="GObject"/>
      </field>
      <field name="priv">
        <type name="StorageVolPrivate" c:type="GVirStorageVolPrivate*"/>
      </field>
    </class>
    <record name="StorageVolClass"
            c:type="GVirStorageVolClass"
            glib:is-gtype-struct-for="StorageVol">
      <source-position filename="libvirt-gobject-storage-vol.h" line="61"/>
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="StorageVolHandle"
                c:symbol-prefix="storage_vol_handle"
                glib:type-name="GVirStorageVolHandle"
                glib:get-type="gvir_storage_vol_handle_get_type">
    </glib:boxed>
    <record name="StorageVolInfo"
            c:type="GVirStorageVolInfo"
            glib:type-name="GVirStorageVolInfo"
            glib:get-type="gvir_storage_vol_info_get_type"
            c:symbol-prefix="storage_vol_info">
      <source-position filename="libvirt-gobject-storage-vol.h" line="90"/>
      <field name="type" writable="1">
        <type name="StorageVolType" c:type="GVirStorageVolType"/>
      </field>
      <field name="capacity" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
      <field name="allocation" writable="1">
        <type name="guint64" c:type="guint64"/>
      </field>
    </record>
    <record name="StorageVolPrivate"
            c:type="GVirStorageVolPrivate"
            disguised="1">
      <source-position filename="libvirt-gobject-storage-vol.h" line="44"/>
    </record>
    <enumeration name="StorageVolResizeFlags"
                 glib:type-name="GVirStorageVolResizeFlags"
                 glib:get-type="gvir_storage_vol_resize_flags_get_type"
                 c:type="GVirStorageVolResizeFlags">
      <member name="none"
              value="0"
              c:identifier="GVIR_STORAGE_VOL_RESIZE_NONE"
              glib:nick="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-vol.h"
             line="71">No flags</doc>
      </member>
      <member name="allocate"
              value="1"
              c:identifier="GVIR_STORAGE_VOL_RESIZE_ALLOCATE"
              glib:nick="allocate">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-vol.h"
             line="72">force allocation of new size</doc>
      </member>
      <member name="delta"
              value="2"
              c:identifier="GVIR_STORAGE_VOL_RESIZE_DELTA"
              glib:nick="delta">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-vol.h"
             line="73">size is relative to current</doc>
      </member>
      <member name="shrink"
              value="4"
              c:identifier="GVIR_STORAGE_VOL_RESIZE_SHRINK"
              glib:nick="shrink">
        <doc xml:space="preserve"
             filename="libvirt-gobject-storage-vol.h"
             line="74">allow decrease in capacity. This combined
with #GVIR_STORAGE_VOL_RESIZE_DELTA, implies a negative delta.</doc>
      </member>
    </enumeration>
    <enumeration name="StorageVolType"
                 glib:type-name="GVirStorageVolType"
                 glib:get-type="gvir_storage_vol_type_get_type"
                 c:type="GVirStorageVolType">
      <member name="file"
              value="0"
              c:identifier="GVIR_STORAGE_VOL_STATE_FILE"
              glib:nick="file">
      </member>
      <member name="block"
              value="1"
              c:identifier="GVIR_STORAGE_VOL_STATE_BLOCK"
              glib:nick="block">
      </member>
      <member name="dir"
              value="2"
              c:identifier="GVIR_STORAGE_VOL_STATE_DIR"
              glib:nick="dir">
      </member>
    </enumeration>
    <class name="Stream"
           c:symbol-prefix="stream"
           c:type="GVirStream"
           parent="Gio.IOStream"
           glib:type-name="GVirStream"
           glib:get-type="gvir_stream_get_type"
           glib:type-struct="StreamClass">
      <source-position filename="libvirt-gobject-stream.h" line="63"/>
      <method name="add_watch"
              c:identifier="gvir_stream_add_watch"
              shadowed-by="add_watch_full"
              introspectable="0">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.c"
             line="655">Adds a watch for @stream to the mainloop</doc>
        <source-position filename="libvirt-gobject-stream.h" line="109"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.c"
               line="664">the event source id</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="657">the stream</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </instance-parameter>
          <parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="658">the conditions to watch for (bitfield of #GVirStreamIOCondition)</doc>
            <type name="StreamIOCondition" c:type="GVirStreamIOCondition"/>
          </parameter>
          <parameter name="func" transfer-ownership="none" closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="659">the function to call when the condition is satisfied</doc>
            <type name="StreamIOFunc" c:type="GVirStreamIOFunc"/>
          </parameter>
          <parameter name="opaque"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="660">user data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="add_watch_full"
              c:identifier="gvir_stream_add_watch_full"
              shadows="add_watch">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.c"
             line="679">Adds a watch for @stream to the mainloop</doc>
        <source-position filename="libvirt-gobject-stream.h" line="113"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.c"
               line="690">the event source id</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="681">the stream</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </instance-parameter>
          <parameter name="priority" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="682">the priority of the #GVirStream source</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
          <parameter name="cond" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="683">the conditions to watch for (bitfield of #GVirStreamIOCondition)</doc>
            <type name="StreamIOCondition" c:type="GVirStreamIOCondition"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="3"
                     destroy="4">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="684">the function to call when the condition is satisfied</doc>
            <type name="StreamIOFunc" c:type="GVirStreamIOFunc"/>
          </parameter>
          <parameter name="opaque"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="685">user data to pass to @func</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
          <parameter name="notify" transfer-ownership="none" scope="async">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="686">the function to call when the source is removed</doc>
            <type name="GLib.DestroyNotify" c:type="GDestroyNotify"/>
          </parameter>
        </parameters>
      </method>
      <method name="receive" c:identifier="gvir_stream_receive" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.c"
             line="307">Receive data (up to @size bytes) from a stream.
On error -1 is returned and @error is set accordingly.

gvir_stream_receive() can return any number of bytes, up to
@size. If more than @size bytes have been received, the additional
data will be returned in future calls to gvir_stream_receive().

If there is no data available, a %G_IO_ERROR_WOULD_BLOCK error will be
returned.</doc>
        <source-position filename="libvirt-gobject-stream.h" line="125"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.c"
               line="326">Number of bytes read, or 0 if the end of stream reached,
or -1 on error.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="309">the stream</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="310">a buffer
    to read data into (which should be at least @size bytes long).</doc>
            <array length="1" zero-terminated="0" c:type="gchar*">
              <type name="guint8"/>
            </array>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="312">the number of bytes you want to read from the stream</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="313">a %GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="receive_all"
              c:identifier="gvir_stream_receive_all"
              throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.c"
             line="377">Receive the entire data stream, sending the data to the
requested data sink. This is simply a convenient alternative
to virStreamRecv, for apps that do blocking-I/o.</doc>
        <source-position filename="libvirt-gobject-stream.h" line="120"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.c"
               line="389">the number of bytes consumed or -1 upon error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="379">the stream</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="380">cancellation notifier</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="381">the callback for writing data to application</doc>
            <type name="StreamSinkFunc" c:type="GVirStreamSinkFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="382">data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <method name="send" c:identifier="gvir_stream_send" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.c"
             line="422">Send data (up to @size bytes) from a stream.
On error -1 is returned and @error is set accordingly.

gvir_stream_send() can return any number of bytes, up to
@size. If more than @size bytes have been sendd, the additional
data will be returned in future calls to gvir_stream_send().

If there is no data available, a %G_IO_ERROR_WOULD_BLOCK error will be
returned.</doc>
        <source-position filename="libvirt-gobject-stream.h" line="136"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.c"
               line="441">Number of bytes written.</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="424">the stream</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </instance-parameter>
          <parameter name="buffer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="425">a buffer to write data from (which should be at least @size
    bytes long).</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="size" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="427">the number of bytes you want to write to the stream</doc>
            <type name="gsize" c:type="gsize"/>
          </parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="428">a %GCancellable or %NULL</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
        </parameters>
      </method>
      <method name="send_all" c:identifier="gvir_stream_send_all" throws="1">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.c"
             line="493">Send the entire data stream, sending the data to the
requested data source. This is simply a convenient alternative
to virStreamRecv, for apps that do blocking-I/o.</doc>
        <source-position filename="libvirt-gobject-stream.h" line="131"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.c"
               line="505">the number of bytes consumed or -1 upon error</doc>
          <type name="gssize" c:type="gssize"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="495">the stream</doc>
            <type name="Stream" c:type="GVirStream*"/>
          </instance-parameter>
          <parameter name="cancellable"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="496">cancellation notifier</doc>
            <type name="Gio.Cancellable" c:type="GCancellable*"/>
          </parameter>
          <parameter name="func"
                     transfer-ownership="none"
                     scope="notified"
                     closure="2">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="497">the callback for writing data to application</doc>
            <type name="StreamSourceFunc" c:type="GVirStreamSourceFunc"/>
          </parameter>
          <parameter name="user_data"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="libvirt-gobject-stream.c"
                 line="498">data to be passed to @callback</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </method>
      <property name="handle"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <type name="StreamHandle"/>
      </property>
      <field name="parent_instance">
        <type name="Gio.IOStream" c:type="GIOStream"/>
      </field>
      <field name="priv">
        <type name="StreamPrivate" c:type="GVirStreamPrivate*"/>
      </field>
    </class>
    <record name="StreamClass"
            c:type="GVirStreamClass"
            glib:is-gtype-struct-for="Stream">
      <source-position filename="libvirt-gobject-stream.h" line="63"/>
      <field name="parent_class">
        <type name="Gio.IOStreamClass" c:type="GIOStreamClass"/>
      </field>
      <field name="padding">
        <array zero-terminated="0" fixed-size="20">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <glib:boxed glib:name="StreamHandle"
                c:symbol-prefix="stream_handle"
                glib:type-name="GVirStreamHandle"
                glib:get-type="gvir_stream_handle_get_type">
    </glib:boxed>
    <bitfield name="StreamIOCondition"
              glib:type-name="GVirStreamIOCondition"
              glib:get-type="gvir_stream_io_condition_get_type"
              c:type="GVirStreamIOCondition">
      <member name="readable"
              value="1"
              c:identifier="GVIR_STREAM_IO_CONDITION_READABLE"
              glib:nick="readable">
      </member>
      <member name="writable"
              value="2"
              c:identifier="GVIR_STREAM_IO_CONDITION_WRITABLE"
              glib:nick="writable">
      </member>
      <member name="hangup"
              value="4"
              c:identifier="GVIR_STREAM_IO_CONDITION_HANGUP"
              glib:nick="hangup">
      </member>
      <member name="error"
              value="8"
              c:identifier="GVIR_STREAM_IO_CONDITION_ERROR"
              glib:nick="error">
      </member>
    </bitfield>
    <callback name="StreamIOFunc" c:type="GVirStreamIOFunc">
      <source-position filename="libvirt-gobject-stream.h" line="105"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="stream" transfer-ownership="none">
          <type name="Stream" c:type="GVirStream*"/>
        </parameter>
        <parameter name="cond" transfer-ownership="none">
          <type name="StreamIOCondition" c:type="GVirStreamIOCondition"/>
        </parameter>
        <parameter name="opaque"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <record name="StreamPrivate" c:type="GVirStreamPrivate" disguised="1">
      <source-position filename="libvirt-gobject-stream.h" line="46"/>
    </record>
    <callback name="StreamSinkFunc" c:type="GVirStreamSinkFunc">
      <source-position filename="libvirt-gobject-stream.h" line="75"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.h"
             line="72">the number of bytes filled, 0 upon end
of file, or -1 upon error</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="stream" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="67">a #GVirStream</doc>
          <type name="Stream" c:type="GVirStream*"/>
        </parameter>
        <parameter name="buf"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="68">data pointer</doc>
          <array length="2" zero-terminated="0" c:type="const gchar*">
            <type name="utf8" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="nbytes"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="69">data size</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="70">user data passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <callback name="StreamSourceFunc" c:type="GVirStreamSourceFunc">
      <source-position filename="libvirt-gobject-stream.h" line="90"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="libvirt-gobject-stream.h"
             line="87">the number of bytes filled, 0 upon end
of file, or -1 upon error</doc>
        <type name="gint" c:type="gint"/>
      </return-value>
      <parameters>
        <parameter name="stream" transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="82">a #GVirStream</doc>
          <type name="Stream" c:type="GVirStream*"/>
        </parameter>
        <parameter name="buf"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="none">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="83">data pointer</doc>
          <array length="2" zero-terminated="0" c:type="gchar*">
            <type name="utf8" c:type="gchar"/>
          </array>
        </parameter>
        <parameter name="nbytes"
                   direction="out"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="84">data size</doc>
          <type name="gsize" c:type="gsize"/>
        </parameter>
        <parameter name="user_data"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1"
                   closure="3">
          <doc xml:space="preserve"
               filename="libvirt-gobject-stream.h"
               line="85">user data passed to the function</doc>
          <type name="gpointer" c:type="gpointer"/>
        </parameter>
      </parameters>
    </callback>
    <function name="init_object" c:identifier="gvir_init_object">
      <source-position filename="libvirt-gobject-main.h" line="33"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-main.c"
               line="35">pointer to application's argc</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libvirt-gobject-main.c"
               line="36">pointer to application's argv</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_object_check"
              c:identifier="gvir_init_object_check"
              throws="1">
      <source-position filename="libvirt-gobject-main.h" line="35"/>
      <return-value transfer-ownership="none">
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full">
          <doc xml:space="preserve"
               filename="libvirt-gobject-main.c"
               line="60">pointer to application's argc</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="none"
                   nullable="1"
                   allow-none="1">
          <doc xml:space="preserve"
               filename="libvirt-gobject-main.c"
               line="61">pointer to application's argv</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
